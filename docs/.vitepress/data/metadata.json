{
	"id": 0,
	"name": "@vinicunca/perkakas",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 1093,
			"name": "KEY_CODES",
			"variant": "declaration",
			"kind": 32,
			"flags": {
				"isConst": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Using event.code is not predictable since each machine may have different output"
					}
				]
			},
			"sources": [
				{
					"fileName": "key-codes.ts",
					"line": 5,
					"character": 13,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 1094,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 1095,
							"name": "ALT",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 6,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "Alt"
							},
							"defaultValue": "'Alt'"
						},
						{
							"id": 1096,
							"name": "ARROW_DOWN",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 7,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "ArrowDown"
							},
							"defaultValue": "'ArrowDown'"
						},
						{
							"id": 1097,
							"name": "ARROW_LEFT",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 8,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "ArrowLeft"
							},
							"defaultValue": "'ArrowLeft'"
						},
						{
							"id": 1098,
							"name": "ARROW_RIGHT",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 9,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "ArrowRight"
							},
							"defaultValue": "'ArrowRight'"
						},
						{
							"id": 1099,
							"name": "ARROW_UP",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 10,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "ArrowUp"
							},
							"defaultValue": "'ArrowUp'"
						},
						{
							"id": 1100,
							"name": "AT",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 11,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "@"
							},
							"defaultValue": "'@'"
						},
						{
							"id": 1101,
							"name": "BACKSPACE",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 12,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "Backspace"
							},
							"defaultValue": "'Backspace'"
						},
						{
							"id": 1102,
							"name": "CTRL",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 13,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "Control"
							},
							"defaultValue": "'Control'"
						},
						{
							"id": 1103,
							"name": "DELETE",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 14,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "Delete"
							},
							"defaultValue": "'Delete'"
						},
						{
							"id": 1104,
							"name": "END",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 15,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "End"
							},
							"defaultValue": "'End'"
						},
						{
							"id": 1105,
							"name": "ENTER",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 16,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "Enter"
							},
							"defaultValue": "'Enter'"
						},
						{
							"id": 1106,
							"name": "ESC",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 17,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "Escape"
							},
							"defaultValue": "'Escape'"
						},
						{
							"id": 1107,
							"name": "HOME",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 18,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "Home"
							},
							"defaultValue": "'Home'"
						},
						{
							"id": 1108,
							"name": "KEY_F",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 19,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "KEY_F"
							},
							"defaultValue": "'KEY_F'"
						},
						{
							"id": 1109,
							"name": "META",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 20,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "Meta"
							},
							"defaultValue": "'Meta'"
						},
						{
							"id": 1110,
							"name": "PAGE_DOWN",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 21,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "PageDown"
							},
							"defaultValue": "'PageDown'"
						},
						{
							"id": 1111,
							"name": "PAGE_UP",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 22,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "PageUp"
							},
							"defaultValue": "'PageUp'"
						},
						{
							"id": 1112,
							"name": "SHIFT",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 23,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "Shift"
							},
							"defaultValue": "'Shift'"
						},
						{
							"id": 1113,
							"name": "SPACE",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 24,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "Space"
							},
							"defaultValue": "'Space'"
						},
						{
							"id": 1114,
							"name": "TAB",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "key-codes.ts",
									"line": 25,
									"character": 2,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
								}
							],
							"type": {
								"type": "literal",
								"value": "Tab"
							},
							"defaultValue": "'Tab'"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1095,
								1096,
								1097,
								1098,
								1099,
								1100,
								1101,
								1102,
								1103,
								1104,
								1105,
								1106,
								1107,
								1108,
								1109,
								1110,
								1111,
								1112,
								1113,
								1114
							]
						}
					],
					"sources": [
						{
							"fileName": "key-codes.ts",
							"line": 5,
							"character": 25,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/key-codes.ts"
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 2,
			"name": "add",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "add.ts",
					"line": 17,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/add.ts"
				},
				{
					"fileName": "add.ts",
					"line": 33,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/add.ts"
				}
			],
			"signatures": [
				{
					"id": 3,
					"name": "add",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Adds two numbers."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.add(value, addend);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.add(10, 5) // => 15\n   P.add(10, -5) // => 5\n   P.reduce([1, 2, 3, 4], P.add, 0) // => 10"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "add.ts",
							"line": 17,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/add.ts"
						}
					],
					"parameters": [
						{
							"id": 4,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						},
						{
							"id": 5,
							"name": "addend",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number to add to the value."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "bigint"
					}
				},
				{
					"id": 9,
					"name": "add",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Adds two numbers."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.add(addend)(value);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.add(5)(10) // => 15\n   P.add(-5)(10) // => 5\n   P.map([1, 2, 3, 4], P.add(1)) // => [2, 3, 4, 5]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "add.ts",
							"line": 33,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/add.ts"
						}
					],
					"parameters": [
						{
							"id": 10,
							"name": "addend",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number to add to the value."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 11,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "add.ts",
									"line": 33,
									"character": 37,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/add.ts"
								}
							],
							"signatures": [
								{
									"id": 12,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 13,
											"name": "value",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "bigint"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "bigint"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 19,
			"name": "addProp",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "add-prop.ts",
					"line": 18,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/add-prop.ts"
				},
				{
					"fileName": "add-prop.ts",
					"line": 36,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/add-prop.ts"
				},
				{
					"fileName": "add-prop.ts",
					"line": 41,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/add-prop.ts"
				}
			],
			"signatures": [
				{
					"id": 20,
					"name": "addProp",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Add a new property to an object."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.addProp(obj, prop, value)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.addProp({ firstName: 'john' }, 'lastName', 'doe'); // => {firstName: 'john', lastName: 'doe'}"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "add-prop.ts",
							"line": 18,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/add-prop.ts"
						}
					],
					"typeParameters": [
						{
							"id": 21,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 22,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							}
						},
						{
							"id": 23,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 24,
							"name": "obj",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the target object"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 21,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 25,
							"name": "prop",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the property name"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 22,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 26,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the property value"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 23,
								"name": "V",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "UpsertProp"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 21,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 22,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 23,
								"name": "V",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "UpsertProp",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 27,
					"name": "addProp",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Add a new property to an object."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.addProp(prop, value)(obj)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.addProp('lastName', 'doe')({ firstName: 'john' }); // => {firstName: 'john', lastName: 'doe'}"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "add-prop.ts",
							"line": 36,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/add-prop.ts"
						}
					],
					"typeParameters": [
						{
							"id": 28,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 29,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							}
						},
						{
							"id": 30,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 31,
							"name": "prop",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the property name"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 29,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 32,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the property value"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 30,
								"name": "V",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 33,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "add-prop.ts",
									"line": 39,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/add-prop.ts"
								}
							],
							"signatures": [
								{
									"id": 34,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 35,
											"name": "obj",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 28,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "UpsertProp"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 28,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 29,
												"name": "K",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 30,
												"name": "V",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "UpsertProp",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 36,
			"name": "allPass",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "all-pass.ts",
					"line": 19,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/all-pass.ts"
				},
				{
					"fileName": "all-pass.ts",
					"line": 39,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/all-pass.ts"
				},
				{
					"fileName": "all-pass.ts",
					"line": 43,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/all-pass.ts"
				}
			],
			"signatures": [
				{
					"id": 37,
					"name": "allPass",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Determines whether all predicates returns true for the input data."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.allPass(data, fns)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const isDivisibleBy3 = (x: number) => x % 3 === 0\n   const isDivisibleBy4 = (x: number) => x % 4 === 0\n   const fns = [isDivisibleBy3, isDivisibleBy4]\n   P.allPass(12, fns) // => true\n   P.allPass(8, fns) // => false"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "all-pass.ts",
							"line": 19,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/all-pass.ts"
						}
					],
					"typeParameters": [
						{
							"id": 38,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 39,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The input data for predicates."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 38,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 40,
							"name": "fns",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The list of predicates."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reflection",
										"declaration": {
											"id": 41,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "all-pass.ts",
													"line": 21,
													"character": 21,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/all-pass.ts"
												}
											],
											"signatures": [
												{
													"id": 42,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "all-pass.ts",
															"line": 21,
															"character": 21,
															"url": "https://github.com/vinicunca/perkakas/blob/main/src/all-pass.ts"
														}
													],
													"parameters": [
														{
															"id": 43,
															"name": "data",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 38,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 44,
					"name": "allPass",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Determines whether all predicates returns true for the input data."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.allPass(fns)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const isDivisibleBy3 = (x: number) => x % 3 === 0\n   const isDivisibleBy4 = (x: number) => x % 4 === 0\n   const fns = [isDivisibleBy3, isDivisibleBy4]\n   P.allPass(fns)(12) // => true\n   P.allPass(fns)(8) // => false"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "all-pass.ts",
							"line": 39,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/all-pass.ts"
						}
					],
					"typeParameters": [
						{
							"id": 45,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 46,
							"name": "fns",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The list of predicates."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reflection",
										"declaration": {
											"id": 47,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "all-pass.ts",
													"line": 40,
													"character": 21,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/all-pass.ts"
												}
											],
											"signatures": [
												{
													"id": 48,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "all-pass.ts",
															"line": 40,
															"character": 21,
															"url": "https://github.com/vinicunca/perkakas/blob/main/src/all-pass.ts"
														}
													],
													"parameters": [
														{
															"id": 49,
															"name": "data",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 45,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 50,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "all-pass.ts",
									"line": 41,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/all-pass.ts"
								}
							],
							"signatures": [
								{
									"id": 51,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 52,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 45,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 53,
			"name": "anyPass",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "any-pass.ts",
					"line": 19,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/any-pass.ts"
				},
				{
					"fileName": "any-pass.ts",
					"line": 39,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/any-pass.ts"
				},
				{
					"fileName": "any-pass.ts",
					"line": 43,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/any-pass.ts"
				}
			],
			"signatures": [
				{
					"id": 54,
					"name": "anyPass",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Determines whether any predicate returns true for the input data."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.anyPass(data, fns)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const isDivisibleBy3 = (x: number) => x % 3 === 0\n   const isDivisibleBy4 = (x: number) => x % 4 === 0\n   const fns = [isDivisibleBy3, isDivisibleBy4]\n   P.anyPass(8, fns) // => true\n   P.anyPass(11, fns) // => false"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "any-pass.ts",
							"line": 19,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/any-pass.ts"
						}
					],
					"typeParameters": [
						{
							"id": 55,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 56,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The input data for predicates."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 55,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 57,
							"name": "fns",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The list of predicates."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reflection",
										"declaration": {
											"id": 58,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "any-pass.ts",
													"line": 21,
													"character": 21,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/any-pass.ts"
												}
											],
											"signatures": [
												{
													"id": 59,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "any-pass.ts",
															"line": 21,
															"character": 21,
															"url": "https://github.com/vinicunca/perkakas/blob/main/src/any-pass.ts"
														}
													],
													"parameters": [
														{
															"id": 60,
															"name": "data",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 55,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 61,
					"name": "anyPass",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Determines whether any predicate returns true for the input data."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.anyPass(fns)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const isDivisibleBy3 = (x: number) => x % 3 === 0\n   const isDivisibleBy4 = (x: number) => x % 4 === 0\n   const fns = [isDivisibleBy3, isDivisibleBy4]\n   P.anyPass(fns)(8) // => true\n   P.anyPass(fns)(11) // => false"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "any-pass.ts",
							"line": 39,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/any-pass.ts"
						}
					],
					"typeParameters": [
						{
							"id": 62,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 63,
							"name": "fns",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The list of predicates."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reflection",
										"declaration": {
											"id": 64,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "any-pass.ts",
													"line": 40,
													"character": 21,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/any-pass.ts"
												}
											],
											"signatures": [
												{
													"id": 65,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "any-pass.ts",
															"line": 40,
															"character": 21,
															"url": "https://github.com/vinicunca/perkakas/blob/main/src/any-pass.ts"
														}
													],
													"parameters": [
														{
															"id": 66,
															"name": "data",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": 62,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 67,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "any-pass.ts",
									"line": 41,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/any-pass.ts"
								}
							],
							"signatures": [
								{
									"id": 68,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 69,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 62,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 70,
			"name": "ceil",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "ceil.ts",
					"line": 21,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/ceil.ts"
				},
				{
					"fileName": "ceil.ts",
					"line": 39,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/ceil.ts"
				},
				{
					"fileName": "ceil.ts",
					"line": 41,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/ceil.ts"
				}
			],
			"signatures": [
				{
					"id": 71,
					"name": "ceil",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Rounds up a given number to a specific precision.\nIf you'd like to round up to an integer (i.e. use this function with constant "
							},
							{
								"kind": "code",
								"text": "`precision === 0`"
							},
							{
								"kind": "text",
								"text": "),\nuse "
							},
							{
								"kind": "code",
								"text": "`Math.ceil`"
							},
							{
								"kind": "text",
								"text": " instead, as it won't incur the additional library overhead."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.ceil(value, precision);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.ceil(123.9876, 3) // => 123.988\n   P.ceil(483.22243, 1) // => 483.3\n   P.ceil(8541, -1) // => 8550\n   P.ceil(456789, -3) // => 457000"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "ceil.ts",
							"line": 21,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/ceil.ts"
						}
					],
					"parameters": [
						{
							"id": 72,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number to round up."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 73,
							"name": "precision",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The precision to round up to. Must be an integer between -15 and 15."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 74,
					"name": "ceil",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Rounds up a given number to a specific precision.\nIf you'd like to round up to an integer (i.e. use this function with constant "
							},
							{
								"kind": "code",
								"text": "`precision === 0`"
							},
							{
								"kind": "text",
								"text": "),\nuse "
							},
							{
								"kind": "code",
								"text": "`Math.ceil`"
							},
							{
								"kind": "text",
								"text": " instead, as it won't incur the additional library overhead."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.ceil(precision)(value);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.ceil(3)(123.9876) // => 123.988\n   P.ceil(1)(483.22243) // => 483.3\n   P.ceil(-1)(8541) // => 8550\n   P.ceil(-3)(456789) // => 457000"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "ceil.ts",
							"line": 39,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/ceil.ts"
						}
					],
					"parameters": [
						{
							"id": 75,
							"name": "precision",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The precision to round up to. Must be an integer between -15 and 15."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 76,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "ceil.ts",
									"line": 39,
									"character": 41,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/ceil.ts"
								}
							],
							"signatures": [
								{
									"id": 77,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 78,
											"name": "value",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 79,
			"name": "chunk",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "chunk.ts",
					"line": 215,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/chunk.ts"
				},
				{
					"fileName": "chunk.ts",
					"line": 232,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/chunk.ts"
				},
				{
					"fileName": "chunk.ts",
					"line": 236,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/chunk.ts"
				}
			],
			"signatures": [
				{
					"id": 80,
					"name": "chunk",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Split an array into groups the length of "
							},
							{
								"kind": "code",
								"text": "`size`"
							},
							{
								"kind": "text",
								"text": ". If "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": " can't be split evenly, the final chunk will be the remaining elements."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.chunk(array, size)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.chunk(['a', 'b', 'c', 'd'], 2) // => [['a', 'b'], ['c', 'd']]\n   P.chunk(['a', 'b', 'c', 'd'], 3) // => [['a', 'b', 'c'], ['d']]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "chunk.ts",
							"line": 215,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/chunk.ts"
						}
					],
					"typeParameters": [
						{
							"id": 81,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 82,
							"name": "N",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"parameters": [
						{
							"id": 83,
							"name": "array",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 81,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 84,
							"name": "size",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The length of the chunk."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 82,
								"name": "N",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/chunk.ts",
							"qualifiedName": "Chunk"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 81,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 82,
								"name": "N",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Chunk",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 85,
					"name": "chunk",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Split an array into groups the length of "
							},
							{
								"kind": "code",
								"text": "`size`"
							},
							{
								"kind": "text",
								"text": ". If "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": " can't be split evenly, the final chunk will be the remaining elements."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.chunk(size)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.chunk(2)(['a', 'b', 'c', 'd']) // => [['a', 'b'], ['c', 'd']]\n   P.chunk(3)(['a', 'b', 'c', 'd']) // => [['a', 'b', 'c'], ['d']]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "chunk.ts",
							"line": 232,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/chunk.ts"
						}
					],
					"typeParameters": [
						{
							"id": 86,
							"name": "N",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"parameters": [
						{
							"id": 87,
							"name": "size",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The length of the chunk."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 86,
								"name": "N",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 88,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "chunk.ts",
									"line": 234,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/chunk.ts"
								}
							],
							"signatures": [
								{
									"id": 89,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 91,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 90,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 91,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/chunk.ts",
											"qualifiedName": "Chunk"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 91,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 86,
												"name": "N",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Chunk",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 92,
			"name": "clamp",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "clamp.ts",
					"line": 27,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/clamp.ts"
				},
				{
					"fileName": "clamp.ts",
					"line": 42,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/clamp.ts"
				},
				{
					"fileName": "clamp.ts",
					"line": 44,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/clamp.ts"
				}
			],
			"signatures": [
				{
					"id": 93,
					"name": "clamp",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Clamp the given value within the inclusive min and max bounds."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.clamp(value, { min, max });"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "clamp(10, { min: 20 }) // => 20\n   clamp(10, { max: 5 }) // => 5\n   clamp(10, { max: 20, min: 5 }) // => 10"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "clamp.ts",
							"line": 27,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/clamp.ts"
						}
					],
					"parameters": [
						{
							"id": 94,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 95,
							"name": "limits",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The bounds limits."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/clamp.ts",
									"qualifiedName": "Limits"
								},
								"name": "Limits",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 96,
					"name": "clamp",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Clamp the given value within the inclusive min and max bounds."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.clamp({ min, max })(value);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "clamp({ min: 20 })(10) // => 20\n   clamp({ max: 5 })(10) // => 5\n   clamp({ max: 20, min: 5 })(10) // => 10"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "clamp.ts",
							"line": 42,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/clamp.ts"
						}
					],
					"parameters": [
						{
							"id": 97,
							"name": "limits",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The bounds limits."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/clamp.ts",
									"qualifiedName": "Limits"
								},
								"name": "Limits",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 98,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "clamp.ts",
									"line": 42,
									"character": 39,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/clamp.ts"
								}
							],
							"signatures": [
								{
									"id": 99,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 100,
											"name": "value",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 101,
			"name": "clone",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "clone.ts",
					"line": 15,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/clone.ts"
				},
				{
					"fileName": "clone.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/clone.ts"
				},
				{
					"fileName": "clone.ts",
					"line": 30,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/clone.ts"
				}
			],
			"signatures": [
				{
					"id": 102,
					"name": "clone",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a deep copy of the value. Supported types. Functions are assigned by\nreference rather than copied."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.clone(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.clone({foo: 'bar'}) // {foo: 'bar'}"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "clone.ts",
							"line": 15,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/clone.ts"
						}
					],
					"typeParameters": [
						{
							"id": 103,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 104,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The object to clone."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 103,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 103,
						"name": "T",
						"package": "@vinicunca/perkakas",
						"refersToTypeParameter": true
					}
				},
				{
					"id": 105,
					"name": "clone",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a deep copy of the value. Supported types. Functions are assigned by\nreference rather than copied."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.clone()(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe({foo: 'bar'}, P.clone()) // {foo: 'bar'}"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "clone.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/clone.ts"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 106,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "clone.ts",
									"line": 28,
									"character": 25,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/clone.ts"
								}
							],
							"signatures": [
								{
									"id": 107,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 109,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 108,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 109,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 109,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 110,
			"name": "concat",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "concat.ts",
					"line": 22,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/concat.ts"
				},
				{
					"fileName": "concat.ts",
					"line": 42,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/concat.ts"
				},
				{
					"fileName": "concat.ts",
					"line": 46,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/concat.ts"
				}
			],
			"signatures": [
				{
					"id": 111,
					"name": "concat",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Merge two or more arrays. This method does not change the existing arrays,\nbut instead returns a new array, even if the other array is empty."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A new array with the items of the first array followed by the items\nof the second array."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.concat(data, other);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.concat([1, 2, 3], ['a']) // [1, 2, 3, 'a']"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "concat.ts",
							"line": 22,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/concat.ts"
						}
					],
					"typeParameters": [
						{
							"id": 112,
							"name": "T1",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 113,
							"name": "T2",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 114,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The first items, these would be at the beginning of the new\narray."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 112,
								"name": "T1",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 115,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The remaining items, these would be at the end of the new\narray."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 113,
								"name": "T2",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "rest",
								"elementType": {
									"type": "reference",
									"target": 112,
									"name": "T1",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "rest",
								"elementType": {
									"type": "reference",
									"target": 113,
									"name": "T2",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							}
						]
					}
				},
				{
					"id": 116,
					"name": "concat",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Merge two or more arrays. This method does not change the existing arrays,\nbut instead returns a new array, even if the other array is empty."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A new array with the items of the first array followed by the items\nof the second array."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.concat(arr2)(arr1);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.concat(['a'])([1, 2, 3]) // [1, 2, 3, 'a']"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "concat.ts",
							"line": 42,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/concat.ts"
						}
					],
					"typeParameters": [
						{
							"id": 117,
							"name": "T2",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 118,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The remaining items, these would be at the end of the new\narray."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 117,
								"name": "T2",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 119,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "concat.ts",
									"line": 44,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/concat.ts"
								}
							],
							"signatures": [
								{
									"id": 120,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 122,
											"name": "T1",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 121,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 122,
												"name": "T1",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "rest",
												"elementType": {
													"type": "reference",
													"target": 122,
													"name": "T1",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											},
											{
												"type": "rest",
												"elementType": {
													"type": "reference",
													"target": 117,
													"name": "T2",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										]
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 123,
			"name": "conditional",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "conditional.ts",
					"line": 62,
					"character": 9,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
				},
				{
					"fileName": "conditional.ts",
					"line": 152,
					"character": 9,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
				}
			],
			"signatures": [
				{
					"id": 124,
					"name": "conditional",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Executes a transformer function based on the first matching predicate,\nfunctioning like a series of "
							},
							{
								"kind": "code",
								"text": "`if...else if...`"
							},
							{
								"kind": "text",
								"text": " statements. It sequentially\nevaluates each case and, upon finding a truthy predicate, runs the\ncorresponding transformer, and returns, ignoring any further cases, even if\nthey would match.\n\n!IMPORTANT! - Unlike similar implementations in frameworks like Lodash and\nRamda, this implementation does **NOT** return a default/fallback\n"
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": " value when none of the cases match; and instead will **throw** an\nexception in those cases.\nTo add a default case use the "
							},
							{
								"kind": "code",
								"text": "`conditional.defaultCase`"
							},
							{
								"kind": "text",
								"text": " helper as the final\ncase of your implementation. By default it returns "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": ", but could be\nprovided a transformer in order to return something else.\n\nDue to TypeScript's inability to infer the result of negating a type-\npredicate we can't refine the types used in subsequent cases based on\nprevious conditions. Using a "
							},
							{
								"kind": "code",
								"text": "`switch (true)`"
							},
							{
								"kind": "text",
								"text": " statement or ternary operators\nis recommended for more precise type control when such type narrowing is\nneeded."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The output of the matched transformer. If no cases match, an\nexception is thrown. The return type is a union of the return types of all\nprovided transformers."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.conditional(...cases)(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const nameOrId = 3 as string | number;\n  P.pipe(\n    nameOrId,\n    P.conditional(\n      [P.isString, (name) => "
									},
									{
										"kind": "code",
										"text": "`Hello ${name}`"
									},
									{
										"kind": "text",
										"text": "],\n      [P.isNumber, (id) => "
									},
									{
										"kind": "code",
										"text": "`Hello ID: ${id}`"
									},
									{
										"kind": "text",
										"text": "],\n      P.conditional.defaultCase(\n        (something) => "
									},
									{
										"kind": "code",
										"text": "`Hello something (${JSON.stringify(something)})`"
									},
									{
										"kind": "text",
										"text": ",\n      ),\n    ),\n  ); //=> 'Hello ID: 3'"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "conditional.ts",
							"line": 62,
							"character": 9,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
						},
						{
							"fileName": "conditional.ts",
							"line": 152,
							"character": 9,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
						}
					],
					"typeParameters": [
						{
							"id": 125,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 126,
							"name": "Fn0",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 127,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 64,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 128,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 64,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 129,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 125,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 130,
							"name": "Fn1",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 131,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 65,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 132,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 65,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 133,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 125,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 134,
							"name": "Fn2",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 135,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 66,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 136,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 66,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 137,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 125,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 138,
							"name": "Fn3",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 139,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 67,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 140,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 67,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 141,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 125,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 142,
							"name": "Fn4",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 143,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 68,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 144,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 68,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 145,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 125,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 146,
							"name": "Fn5",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 147,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 69,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 148,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 69,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 149,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 125,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 150,
							"name": "Fn6",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 151,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 70,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 152,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 70,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 153,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 125,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 154,
							"name": "Fn7",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 155,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 71,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 156,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 71,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 157,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 125,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 158,
							"name": "Fn8",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 159,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 72,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 160,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 72,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 161,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 125,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 162,
							"name": "Fn9",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 163,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 73,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 164,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 73,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 165,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 125,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 166,
							"name": "Return0",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 167,
							"name": "Return1",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 168,
							"name": "Return2",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 169,
							"name": "Return3",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 170,
							"name": "Return4",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 171,
							"name": "Return5",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 172,
							"name": "Return6",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 173,
							"name": "Return7",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 174,
							"name": "Return8",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 175,
							"name": "Return9",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"parameters": [
						{
							"id": 176,
							"name": "case0",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 125,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 166,
										"name": "Return0",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 126,
										"name": "Fn0",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 177,
							"name": "case1",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 125,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 167,
										"name": "Return1",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 130,
										"name": "Fn1",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 178,
							"name": "case2",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 125,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 168,
										"name": "Return2",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 134,
										"name": "Fn2",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 179,
							"name": "case3",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 125,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 169,
										"name": "Return3",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 138,
										"name": "Fn3",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 180,
							"name": "case4",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 125,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 170,
										"name": "Return4",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 142,
										"name": "Fn4",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 181,
							"name": "case5",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 125,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 171,
										"name": "Return5",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 146,
										"name": "Fn5",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 182,
							"name": "case6",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 125,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 172,
										"name": "Return6",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 150,
										"name": "Fn6",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 183,
							"name": "case7",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 125,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 173,
										"name": "Return7",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 154,
										"name": "Fn7",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 184,
							"name": "case8",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 125,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 174,
										"name": "Return8",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 158,
										"name": "Fn8",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 185,
							"name": "case9",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 125,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 175,
										"name": "Return9",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 162,
										"name": "Fn9",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 186,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "conditional.ts",
									"line": 95,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
								}
							],
							"signatures": [
								{
									"id": 187,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 188,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 125,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 166,
												"name": "Return0",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 167,
												"name": "Return1",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 168,
												"name": "Return2",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 169,
												"name": "Return3",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 170,
												"name": "Return4",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 171,
												"name": "Return5",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 172,
												"name": "Return6",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 173,
												"name": "Return7",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 174,
												"name": "Return8",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 175,
												"name": "Return9",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										]
									}
								}
							]
						}
					}
				},
				{
					"id": 189,
					"name": "conditional",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Executes a transformer function based on the first matching predicate,\nfunctioning like a series of "
							},
							{
								"kind": "code",
								"text": "`if...else if...`"
							},
							{
								"kind": "text",
								"text": " statements. It sequentially\nevaluates each case and, upon finding a truthy predicate, runs the\ncorresponding transformer, and returns, ignoring any further cases, even if\nthey would match.\n\n!IMPORTANT! - Unlike similar implementations in frameworks like Lodash and\nRamda, this implementation does **NOT** return a default/fallback\n"
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": " value when none of the cases match; and instead will **throw** an\nexception in those cases.\nTo add a default case use the "
							},
							{
								"kind": "code",
								"text": "`conditional.defaultCase`"
							},
							{
								"kind": "text",
								"text": " helper as the final\ncase of your implementation. By default it returns "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": ", but could be\nprovided a transformer in order to return something else.\n\nDue to TypeScript's inability to infer the result of negating a type-\npredicate we can't refine the types used in subsequent cases based on\nprevious conditions. Using a "
							},
							{
								"kind": "code",
								"text": "`switch (true)`"
							},
							{
								"kind": "text",
								"text": " statement or ternary operators\nis recommended for more precise type control when such type narrowing is\nneeded."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The output of the matched transformer. If no cases match, an\nexception is thrown. The return type is a union of the return types of all\nprovided transformers."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.conditional(data, ...cases);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const nameOrId = 3 as string | number;\n  P.conditional(\n    nameOrId,\n    [P.isString, (name) => "
									},
									{
										"kind": "code",
										"text": "`Hello ${name}`"
									},
									{
										"kind": "text",
										"text": "],\n    [P.isNumber, (id) => "
									},
									{
										"kind": "code",
										"text": "`Hello ID: ${id}`"
									},
									{
										"kind": "text",
										"text": "],\n    P.conditional.defaultCase(\n      (something) => "
									},
									{
										"kind": "code",
										"text": "`Hello something (${JSON.stringify(something)})`"
									},
									{
										"kind": "text",
										"text": ",\n    ),\n  ); //=> 'Hello ID: 3'"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "conditional.ts",
							"line": 62,
							"character": 9,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
						},
						{
							"fileName": "conditional.ts",
							"line": 152,
							"character": 9,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
						}
					],
					"typeParameters": [
						{
							"id": 190,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 191,
							"name": "Fn0",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 192,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 154,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 193,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 154,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 194,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 190,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 195,
							"name": "Fn1",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 196,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 155,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 197,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 155,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 198,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 190,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 199,
							"name": "Fn2",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 200,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 156,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 201,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 156,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 202,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 190,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 203,
							"name": "Fn3",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 204,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 157,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 205,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 157,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 206,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 190,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 207,
							"name": "Fn4",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 208,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 158,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 209,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 158,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 210,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 190,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 211,
							"name": "Fn5",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 212,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 159,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 213,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 159,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 214,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 190,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 215,
							"name": "Fn6",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 216,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 160,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 217,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 160,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 218,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 190,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 219,
							"name": "Fn7",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 220,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 161,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 221,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 161,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 222,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 190,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 223,
							"name": "Fn8",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 224,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 162,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 225,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 162,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 226,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 190,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 227,
							"name": "Fn9",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 228,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "conditional.ts",
											"line": 163,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
										}
									],
									"signatures": [
										{
											"id": 229,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "conditional.ts",
													"line": 163,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/conditional.ts"
												}
											],
											"parameters": [
												{
													"id": 230,
													"name": "x",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 190,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						},
						{
							"id": 231,
							"name": "Return0",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 232,
							"name": "Return1",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 233,
							"name": "Return2",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 234,
							"name": "Return3",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 235,
							"name": "Return4",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 236,
							"name": "Return5",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 237,
							"name": "Return6",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 238,
							"name": "Return7",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 239,
							"name": "Return8",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 240,
							"name": "Return9",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"parameters": [
						{
							"id": 241,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The input data to be evaluated against the provided cases."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 190,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 242,
							"name": "case0",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 190,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 231,
										"name": "Return0",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 191,
										"name": "Fn0",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 243,
							"name": "case1",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 190,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 232,
										"name": "Return1",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 195,
										"name": "Fn1",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 244,
							"name": "case2",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 190,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 233,
										"name": "Return2",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 199,
										"name": "Fn2",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 245,
							"name": "case3",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 190,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 234,
										"name": "Return3",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 203,
										"name": "Fn3",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 246,
							"name": "case4",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 190,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 235,
										"name": "Return4",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 207,
										"name": "Fn4",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 247,
							"name": "case5",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 190,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 236,
										"name": "Return5",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 211,
										"name": "Fn5",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 248,
							"name": "case6",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 190,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 237,
										"name": "Return6",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 215,
										"name": "Fn6",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 249,
							"name": "case7",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 190,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 238,
										"name": "Return7",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 219,
										"name": "Fn7",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 250,
							"name": "case8",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 190,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 239,
										"name": "Return8",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 223,
										"name": "Fn8",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 251,
							"name": "case9",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/conditional.ts",
									"qualifiedName": "Case"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 190,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 240,
										"name": "Return9",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 227,
										"name": "Fn9",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Case",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 231,
								"name": "Return0",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 232,
								"name": "Return1",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 233,
								"name": "Return2",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 234,
								"name": "Return3",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 235,
								"name": "Return4",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 236,
								"name": "Return5",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 237,
								"name": "Return6",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 238,
								"name": "Return7",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 239,
								"name": "Return8",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 240,
								"name": "Return9",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						]
					}
				}
			]
		},
		{
			"id": 262,
			"name": "constant",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "constant.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/constant.ts"
				}
			],
			"signatures": [
				{
					"id": 263,
					"name": "constant",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that takes any arguments and returns the provided "
							},
							{
								"kind": "code",
								"text": "`value`"
							},
							{
								"kind": "text",
								"text": " on every\ninvocation. This is useful to provide trivial implementations for APIs or in\ncombination with a ternary or other conditional execution to allow to short-\ncircuit more complex implementations for a specific case.\n\nNotice that this is a dataLast impl where the function needs to be invoked\nto get the \"do nothing\" function.\n\nSee also:\n"
							},
							{
								"kind": "code",
								"text": "`doNothing`"
							},
							{
								"kind": "text",
								"text": " - A function that doesn't return anything.\n"
							},
							{
								"kind": "code",
								"text": "`identity`"
							},
							{
								"kind": "text",
								"text": " - A function that returns the first argument it receives."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.constant(value);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.map([1, 2, 3], P.constant('a')); // => ['a', 'a', 'a']\n  P.map(\n    [1, 2, 3],\n    isDemoMode ? P.add(1) : P.constant(0),\n  ); // => [2, 3, 4] or [0, 0, 0]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "constant.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/constant.ts"
						}
					],
					"typeParameters": [
						{
							"id": 264,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 265,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The constant value that would be returned on every invocation.\nThe value is not copied/cloned on every invocation so care should be taken\nwith mutable objects (like arrays, objects, Maps, etc...)."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 264,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 266,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "constant.ts",
									"line": 30,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/constant.ts"
								}
							],
							"signatures": [
								{
									"id": 267,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 269,
											"name": "Args",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"parameters": [
										{
											"id": 268,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": 269,
												"name": "Args",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 264,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 270,
			"name": "curry",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "curry.ts",
					"line": 46,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/curry.ts"
				}
			],
			"signatures": [
				{
					"id": 271,
					"name": "curry",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a function with "
							},
							{
								"kind": "code",
								"text": "`dataFirst`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`dataLast`"
							},
							{
								"kind": "text",
								"text": " signatures.\n\n"
							},
							{
								"kind": "code",
								"text": "`curry`"
							},
							{
								"kind": "text",
								"text": " is a dynamic function and it's not type safe. It should be wrapped by\na function that have proper typings. Refer to the example below for correct\nusage.\n\n!IMPORTANT: functions that simply call "
							},
							{
								"kind": "code",
								"text": "`curry`"
							},
							{
								"kind": "text",
								"text": " and return the result (like\nalmost all functions in this library) should return "
							},
							{
								"kind": "code",
								"text": "`unknown`"
							},
							{
								"kind": "text",
								"text": " themselves if\nan explicit return type is required. This is because we currently don't\nprovide a generic return type that is built from the input function, and\ncrafting one manually isn't worthwhile as we rely on function declaration\noverloading to combine the types for dataFirst and dataLast invocations!"
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.curry(fn, args);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "function _findIndex(array, fn) {\n     for (let i = 0; i < array.length; i++) {\n       if (fn(array[i])) {\n         return i;\n       }\n     }\n     return -1;\n   }\n\n   // data-first\n   function findIndex<T>(array: T[], fn: (item: T) => boolean): number;\n\n   // data-last\n   function findIndex<T>(fn: (item: T) => boolean): (array: T[]) => number;\n\n   function findIndex(...args: unknown[]) {\n     return P.curry(_findIndex, args);\n   }"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "curry.ts",
							"line": 46,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/curry.ts"
						}
					],
					"parameters": [
						{
							"id": 272,
							"name": "fn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function to curry."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 273,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "curry.ts",
											"line": 47,
											"character": 6,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/curry.ts"
										}
									],
									"signatures": [
										{
											"id": 274,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "curry.ts",
													"line": 47,
													"character": 6,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/curry.ts"
												}
											],
											"parameters": [
												{
													"id": 275,
													"name": "args",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									]
								}
							}
						},
						{
							"id": 276,
							"name": "args",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The arguments."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							}
						},
						{
							"id": 277,
							"name": "lazy",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A lazy version of the function to curry."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 278,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "curry.ts",
											"line": 49,
											"character": 9,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/curry.ts"
										}
									],
									"signatures": [
										{
											"id": 279,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "curry.ts",
													"line": 49,
													"character": 9,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/curry.ts"
												}
											],
											"parameters": [
												{
													"id": 280,
													"name": "args",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/pipe.ts",
													"qualifiedName": "LazyEvaluator"
												},
												"name": "LazyEvaluator",
												"package": "@vinicunca/perkakas"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			]
		},
		{
			"id": 281,
			"name": "debounce",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "debounce.ts",
					"line": 101,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/debounce.ts"
				}
			],
			"signatures": [
				{
					"id": 282,
					"name": "debounce",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Wraps "
							},
							{
								"kind": "code",
								"text": "`func`"
							},
							{
								"kind": "text",
								"text": " with a debouncer object that \"debounces\" (delays) invocations of the function during a defined cool-down period ("
							},
							{
								"kind": "code",
								"text": "`waitMs`"
							},
							{
								"kind": "text",
								"text": "). It can be configured to invoke the function either at the start of the cool-down period, the end of it, or at both ends ("
							},
							{
								"kind": "code",
								"text": "`timing`"
							},
							{
								"kind": "text",
								"text": ").\nIt can also be configured to allow invocations during the cool-down period ("
							},
							{
								"kind": "code",
								"text": "`maxWaitMs`"
							},
							{
								"kind": "text",
								"text": ").\nIt stores the latest call's arguments so they could be used at the end of the cool-down period when invoking "
							},
							{
								"kind": "code",
								"text": "`func`"
							},
							{
								"kind": "text",
								"text": " (if configured to invoke the function at the end of the cool-down period).\nIt stores the value returned by "
							},
							{
								"kind": "code",
								"text": "`func`"
							},
							{
								"kind": "text",
								"text": " whenever its invoked. This value is returned on every call, and is accessible via the "
							},
							{
								"kind": "code",
								"text": "`cachedValue`"
							},
							{
								"kind": "text",
								"text": " property of the debouncer. Its important to note that the value might be different from the value that would be returned from running "
							},
							{
								"kind": "code",
								"text": "`func`"
							},
							{
								"kind": "text",
								"text": " with the current arguments as it is a cached value from a previous invocation.\n**Important**: The cool-down period defines the minimum between two invocations, and not the maximum. The period will be **extended** each time a call is made until a full cool-down period has elapsed without any additional calls."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A debouncer object. The main function is "
									},
									{
										"kind": "code",
										"text": "`call`"
									},
									{
										"kind": "text",
										"text": ". In addition to it\nthe debouncer comes with the following additional functions and properties:\n- "
									},
									{
										"kind": "code",
										"text": "`cancel`"
									},
									{
										"kind": "text",
										"text": " method to cancel delayed "
									},
									{
										"kind": "code",
										"text": "`func`"
									},
									{
										"kind": "text",
										"text": " invocations\n- "
									},
									{
										"kind": "code",
										"text": "`flush`"
									},
									{
										"kind": "text",
										"text": " method to end the cool-down period immediately.\n- "
									},
									{
										"kind": "code",
										"text": "`cachedValue`"
									},
									{
										"kind": "text",
										"text": " the latest return value of an invocation (if one occurred).\n- "
									},
									{
										"kind": "code",
										"text": "`isPending`"
									},
									{
										"kind": "text",
										"text": " flag to check if there is an inflight cool-down window."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.debounce(func, options);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const debouncer = debounce(identity(), { timing: 'trailing', waitMs: 1000 });\n  const result1 = debouncer.call(1); // => undefined\n  const result2 = debouncer.call(2); // => undefined\n  // after 1 second\n  const result3 = debouncer.call(3); // => 2\n  // after 1 second\n  debouncer.cachedValue; // => 3"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "https://css-tricks.com/debouncing-throttling-explained-examples/"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "debounce.ts",
							"line": 101,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/debounce.ts"
						}
					],
					"typeParameters": [
						{
							"id": 283,
							"name": "F",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 284,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "debounce.ts",
											"line": 101,
											"character": 35,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/debounce.ts"
										}
									],
									"signatures": [
										{
											"id": 285,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "debounce.ts",
													"line": 101,
													"character": 35,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/debounce.ts"
												}
											],
											"parameters": [
												{
													"id": 286,
													"name": "args",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							}
						}
					],
					"parameters": [
						{
							"id": 287,
							"name": "func",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function to debounce, the returned "
									},
									{
										"kind": "code",
										"text": "`call`"
									},
									{
										"kind": "text",
										"text": " function will have\nthe exact same signature."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 283,
								"name": "F",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 288,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An object allowing further customization of the debouncer:\n- "
									},
									{
										"kind": "code",
										"text": "`timing?: 'leading' | 'trailing' |'both'`"
									},
									{
										"kind": "text",
										"text": ". The default is "
									},
									{
										"kind": "code",
										"text": "`'trailing'`"
									},
									{
										"kind": "text",
										"text": ".\n  "
									},
									{
										"kind": "code",
										"text": "`leading`"
									},
									{
										"kind": "text",
										"text": " would result in the function being invoked at the start of the\n  cool-down period; "
									},
									{
										"kind": "code",
										"text": "`trailing`"
									},
									{
										"kind": "text",
										"text": " would result in the function being invoked at\n  the end of the cool-down period (using the args from the last call to the\n  debouncer). When "
									},
									{
										"kind": "code",
										"text": "`both`"
									},
									{
										"kind": "text",
										"text": " is selected the "
									},
									{
										"kind": "code",
										"text": "`trailing`"
									},
									{
										"kind": "text",
										"text": " invocation would only\n  take place if there were more than one call to the debouncer during the\n  cool-down period. **DEFAULT: 'trailing'**\n- "
									},
									{
										"kind": "code",
										"text": "`waitMs?: number`"
									},
									{
										"kind": "text",
										"text": ". The length of the cool-down period in milliseconds. The\n  debouncer would wait until this amount of time has passed without **any**\n  additional calls to the debouncer before triggering the end-of-cool-down-\n  period event. When this happens, the function would be invoked (if "
									},
									{
										"kind": "code",
										"text": "`timing`"
									},
									{
										"kind": "text",
										"text": "\n  isn't "
									},
									{
										"kind": "code",
										"text": "`'leading'`"
									},
									{
										"kind": "text",
										"text": ") and the debouncer state would be reset. **DEFAULT: 0**\n- "
									},
									{
										"kind": "code",
										"text": "`maxWaitMs?: number`"
									},
									{
										"kind": "text",
										"text": ". The length of time since a debounced call (a call\n  that the debouncer prevented from being invoked) was made until it would be\n  invoked. Because the debouncer can be continually triggered and thus never\n  reach the end of the cool-down period, this allows the function to still\n  be invoked occasionally. IMPORTANT: This param is ignored when "
									},
									{
										"kind": "code",
										"text": "`timing`"
									},
									{
										"kind": "text",
										"text": " is\n  "
									},
									{
										"kind": "code",
										"text": "`'leading'`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "src/debounce.ts",
											"qualifiedName": "DebounceOptions"
										},
										"name": "DebounceOptions",
										"package": "@vinicunca/perkakas"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 289,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 290,
													"name": "timing",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true,
														"isReadonly": true
													},
													"sources": [
														{
															"fileName": "debounce.ts",
															"line": 103,
															"character": 40,
															"url": "https://github.com/vinicunca/perkakas/blob/main/src/debounce.ts"
														}
													],
													"type": {
														"type": "literal",
														"value": "trailing"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														290
													]
												}
											],
											"sources": [
												{
													"fileName": "debounce.ts",
													"line": 103,
													"character": 29,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/debounce.ts"
												}
											]
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/debounce.ts",
							"qualifiedName": "Debouncer"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 283,
								"name": "F",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Debouncer",
						"package": "@vinicunca/perkakas"
					}
				}
			]
		},
		{
			"id": 302,
			"name": "difference",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "difference.ts",
					"line": 22,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/difference.ts"
				},
				{
					"fileName": "difference.ts",
					"line": 42,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/difference.ts"
				},
				{
					"fileName": "difference.ts",
					"line": 46,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/difference.ts"
				}
			],
			"signatures": [
				{
					"id": 303,
					"name": "difference",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Excludes the values from "
							},
							{
								"kind": "code",
								"text": "`other`"
							},
							{
								"kind": "text",
								"text": " array. The output maintains the same order\nas the input. The inputs are treated as multi-sets/bags (multiple copies of\nitems are treated as unique items)."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.difference(data, other)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.difference([1, 2, 3, 4], [2, 5, 3]); // => [1, 4]\n   P.difference([1, 1, 2, 2], [1]); // => [1, 2, 2]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "difference.ts",
							"line": 22,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/difference.ts"
						}
					],
					"typeParameters": [
						{
							"id": 304,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 305,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The input items."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 304,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 306,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The values to exclude."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 304,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 304,
							"name": "T",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 307,
					"name": "difference",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Excludes the values from "
							},
							{
								"kind": "code",
								"text": "`other`"
							},
							{
								"kind": "text",
								"text": " array. The output maintains the same order\nas the input. The inputs are treated as multi-sets/bags (multiple copies of\nitems are treated as unique items)."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.difference(other)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 3, 4], P.difference([2, 5, 3])); // => [1, 4]\n   P.pipe([1, 1, 2, 2], P.difference([1])); // => [1, 2, 2]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "difference.ts",
							"line": 42,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/difference.ts"
						}
					],
					"typeParameters": [
						{
							"id": 308,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 309,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The values to exclude."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 308,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 310,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "difference.ts",
									"line": 44,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/difference.ts"
								}
							],
							"signatures": [
								{
									"id": 311,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 312,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 308,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 308,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 313,
			"name": "differenceWith",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "difference-with.ts",
					"line": 27,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/difference-with.ts"
				},
				{
					"fileName": "difference-with.ts",
					"line": 55,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/difference-with.ts"
				},
				{
					"fileName": "difference-with.ts",
					"line": 60,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/difference-with.ts"
				}
			],
			"signatures": [
				{
					"id": 314,
					"name": "differenceWith",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Excludes the values from "
							},
							{
								"kind": "code",
								"text": "`other`"
							},
							{
								"kind": "text",
								"text": " array.\nElements are compared by custom comparator isEquals."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.differenceWith(array, other, isEquals)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.differenceWith(\n     [{a: 1}, {a: 2}, {a: 3}, {a: 4}],\n     [{a: 2}, {a: 5}, {a: 3}],\n     P.equals,\n   ) // => [{a: 1}, {a: 4}]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "difference-with.ts",
							"line": 27,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/difference-with.ts"
						}
					],
					"typeParameters": [
						{
							"id": 315,
							"name": "TFirst",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 316,
							"name": "TSecond",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 317,
							"name": "array",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The source array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 315,
										"name": "TFirst",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 318,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The values to exclude."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 316,
										"name": "TSecond",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 319,
							"name": "isEquals",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The comparator."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/difference-with.ts",
									"qualifiedName": "IsEquals"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 315,
										"name": "TFirst",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 316,
										"name": "TSecond",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "IsEquals",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 315,
							"name": "TFirst",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 320,
					"name": "differenceWith",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Excludes the values from "
							},
							{
								"kind": "code",
								"text": "`other`"
							},
							{
								"kind": "text",
								"text": " array.\nElements are compared by custom comparator isEquals."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.differenceWith(other, isEquals)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.differenceWith(\n     [{a: 2}, {a: 5}, {a: 3}],\n     P.equals,\n   )([{a: 1}, {a: 2}, {a: 3}, {a: 4}]) // => [{a: 1}, {a: 4}]\n   P.pipe(\n     [{a: 1}, {a: 2}, {a: 3}, {a: 4}, {a: 5}, {a: 6}], // only 4 iterations\n     P.differenceWith([{a: 2}, {a: 3}], P.equals),\n     P.take(2),\n   ) // => [{a: 1}, {a: 4}]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "difference-with.ts",
							"line": 55,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/difference-with.ts"
						}
					],
					"typeParameters": [
						{
							"id": 321,
							"name": "TFirst",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 322,
							"name": "TSecond",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 323,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The values to exclude."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 322,
										"name": "TSecond",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 324,
							"name": "isEquals",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The comparator."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/difference-with.ts",
									"qualifiedName": "IsEquals"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 321,
										"name": "TFirst",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 322,
										"name": "TSecond",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "IsEquals",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 325,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "difference-with.ts",
									"line": 58,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/difference-with.ts"
								}
							],
							"signatures": [
								{
									"id": 326,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 327,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 321,
														"name": "TFirst",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 321,
											"name": "TFirst",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 328,
			"name": "divide",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "divide.ts",
					"line": 16,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/divide.ts"
				},
				{
					"fileName": "divide.ts",
					"line": 31,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/divide.ts"
				}
			],
			"signatures": [
				{
					"id": 329,
					"name": "divide",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Divides two numbers."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.divide(value, divisor);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.divide(12, 3) // => 4\n   P.reduce([1, 2, 3, 4], P.divide, 24) // => 1"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "divide.ts",
							"line": 16,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/divide.ts"
						}
					],
					"parameters": [
						{
							"id": 330,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						},
						{
							"id": 331,
							"name": "divisor",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number to divide the value by."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "bigint"
					}
				},
				{
					"id": 335,
					"name": "divide",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Divides two numbers."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.divide(divisor)(value);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.divide(3)(12) // => 4\n   P.map([2, 4, 6, 8], P.divide(2)) // => [1, 2, 3, 4]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "divide.ts",
							"line": 31,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/divide.ts"
						}
					],
					"parameters": [
						{
							"id": 336,
							"name": "divisor",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number to divide the value by."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 337,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "divide.ts",
									"line": 31,
									"character": 41,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/divide.ts"
								}
							],
							"signatures": [
								{
									"id": 338,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 339,
											"name": "value",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "bigint"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "bigint"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 345,
			"name": "doNothing",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "do-nothing.ts",
					"line": 23,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/do-nothing.ts"
				}
			],
			"signatures": [
				{
					"id": 346,
					"name": "doNothing",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that takes any arguments and does nothing with them. This is\nuseful as a placeholder for any function or API that requires a **void**\nfunction (a function that doesn't return a value). This could also be used in\ncombination with a ternary or other conditional execution to allow disabling\na function call for a specific case.\n\nNotice that this is a dataLast impl where the function needs to be invoked\nto get the \"do nothing\" function.\n\nSee also:\n"
							},
							{
								"kind": "code",
								"text": "`constant`"
							},
							{
								"kind": "text",
								"text": " - A function that ignores it's arguments and returns the same value on every invocation.\n"
							},
							{
								"kind": "code",
								"text": "`identity`"
							},
							{
								"kind": "text",
								"text": " - A function that returns the first argument it receives."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.doNothing();"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "myApi({ onSuccess: handleSuccess, onError: P.doNothing() });\n  myApi({ onSuccess: isDemoMode ? P.doNothing(): handleSuccess });"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "do-nothing.ts",
							"line": 23,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/do-nothing.ts"
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/do-nothing.ts",
								"qualifiedName": "doesNothing"
							},
							"name": "doesNothing",
							"package": "@vinicunca/perkakas",
							"preferValues": true
						}
					}
				}
			]
		},
		{
			"id": 347,
			"name": "drop",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "drop.ts",
					"line": 94,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop.ts"
				},
				{
					"fileName": "drop.ts",
					"line": 111,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop.ts"
				},
				{
					"fileName": "drop.ts",
					"line": 115,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop.ts"
				}
			],
			"signatures": [
				{
					"id": 348,
					"name": "drop",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Removes first "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " elements from the "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.drop(array, n)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.drop([1, 2, 3, 4, 5], 2) // => [3, 4, 5]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "drop.ts",
							"line": 94,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop.ts"
						}
					],
					"typeParameters": [
						{
							"id": 349,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 350,
							"name": "N",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"parameters": [
						{
							"id": 351,
							"name": "array",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The target array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 349,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 352,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of elements to skip."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 350,
								"name": "N",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/drop.ts",
							"qualifiedName": "Drop"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 349,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 350,
								"name": "N",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Drop",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 353,
					"name": "drop",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Removes first "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " elements from the "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.drop(n)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.drop(2)([1, 2, 3, 4, 5]) // => [3, 4, 5]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "drop.ts",
							"line": 111,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop.ts"
						}
					],
					"typeParameters": [
						{
							"id": 354,
							"name": "N",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"parameters": [
						{
							"id": 355,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of elements to skip."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 354,
								"name": "N",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 356,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "drop.ts",
									"line": 113,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop.ts"
								}
							],
							"signatures": [
								{
									"id": 357,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 359,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 358,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 359,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/drop.ts",
											"qualifiedName": "Drop"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 359,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 354,
												"name": "N",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Drop",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 360,
			"name": "dropFirstBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "drop-first-by.ts",
					"line": 25,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-first-by.ts"
				},
				{
					"fileName": "drop-first-by.ts",
					"line": 46,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-first-by.ts"
				},
				{
					"fileName": "drop-first-by.ts",
					"line": 51,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-first-by.ts"
				}
			],
			"signatures": [
				{
					"id": 361,
					"name": "dropFirstBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Drop the first "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " items from "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " based on the provided ordering criteria. This allows you to avoid sorting the array before dropping the items. The complexity of this function is *O(Nlogn)* where "
							},
							{
								"kind": "code",
								"text": "`N`"
							},
							{
								"kind": "text",
								"text": " is the length of the array.\n\nFor the opposite operation (to keep "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " elements) see "
							},
							{
								"kind": "code",
								"text": "`takeFirstBy`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A subset of the input array."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.dropFirstBy(data, n, ...rules);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.dropFirstBy(['aa', 'aaaa', 'a', 'aaa'], 2, x => x.length); // => ['aaa', 'aaaa']"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "drop-first-by.ts",
							"line": 25,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-first-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 362,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 363,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The input array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 362,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 364,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of items to drop. If "
									},
									{
										"kind": "code",
										"text": "`n`"
									},
									{
										"kind": "text",
										"text": " is non-positive no items would be dropped and a *clone* of the input would be returned, if "
									},
									{
										"kind": "code",
										"text": "`n`"
									},
									{
										"kind": "text",
										"text": " is bigger then data.length no items would be returned."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 365,
							"name": "rules",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
									},
									{
										"kind": "code",
										"text": "`<`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`>`"
									},
									{
										"kind": "text",
										"text": " operators. Earlier rules take precedence over later ones. Use the syntax "
									},
									{
										"kind": "code",
										"text": "`[projection, \"desc\"]`"
									},
									{
										"kind": "text",
										"text": " for descending order."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 362,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 362,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 362,
							"name": "T",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 366,
					"name": "dropFirstBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Drop the first "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " items from "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " based on the provided ordering criteria. This allows you to avoid sorting the array before dropping the items. The complexity of this function is *O(Nlogn)* where "
							},
							{
								"kind": "code",
								"text": "`N`"
							},
							{
								"kind": "text",
								"text": " is the length of the array.\n\nFor the opposite operation (to keep "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " elements) see "
							},
							{
								"kind": "code",
								"text": "`takeFirstBy`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A subset of the input array."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.dropFirstBy(n, ...rules)(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(['aa', 'aaaa', 'a', 'aaa'], P.dropFirstBy(2, x => x.length)); // => ['aaa', 'aaaa']"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "drop-first-by.ts",
							"line": 46,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-first-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 367,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 368,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of items to drop. If "
									},
									{
										"kind": "code",
										"text": "`n`"
									},
									{
										"kind": "text",
										"text": " is non-positive no items would be dropped and a *clone* of the input would be returned, if "
									},
									{
										"kind": "code",
										"text": "`n`"
									},
									{
										"kind": "text",
										"text": " is bigger then data.length no items would be returned."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 369,
							"name": "rules",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
									},
									{
										"kind": "code",
										"text": "`<`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`>`"
									},
									{
										"kind": "text",
										"text": " operators. Earlier rules take precedence over later ones. Use the syntax "
									},
									{
										"kind": "code",
										"text": "`[projection, \"desc\"]`"
									},
									{
										"kind": "text",
										"text": " for descending order."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 367,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 367,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 370,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "drop-first-by.ts",
									"line": 49,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-first-by.ts"
								}
							],
							"signatures": [
								{
									"id": 371,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 372,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 367,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 367,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 373,
			"name": "dropLast",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "drop-last.ts",
					"line": 17,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last.ts"
				},
				{
					"fileName": "drop-last.ts",
					"line": 33,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last.ts"
				},
				{
					"fileName": "drop-last.ts",
					"line": 37,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last.ts"
				}
			],
			"signatures": [
				{
					"id": 374,
					"name": "dropLast",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Removes last "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " elements from the "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.dropLast(array, n)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.dropLast([1, 2, 3, 4, 5], 2) // => [1, 2, 3]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "drop-last.ts",
							"line": 17,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last.ts"
						}
					],
					"typeParameters": [
						{
							"id": 375,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 376,
							"name": "array",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The target array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 375,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 377,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of elements to skip."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "intrinsic",
								"name": "number"
							},
							"objectType": {
								"type": "reference",
								"target": 375,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					}
				},
				{
					"id": 378,
					"name": "dropLast",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Removes last "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " elements from the "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.dropLast(n)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.dropLast(2)([1, 2, 3, 4, 5]) // => [1, 2, 3]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "drop-last.ts",
							"line": 33,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last.ts"
						}
					],
					"parameters": [
						{
							"id": 379,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of elements to skip."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 380,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "drop-last.ts",
									"line": 35,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last.ts"
								}
							],
							"signatures": [
								{
									"id": 381,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 383,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 382,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 383,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "intrinsic",
												"name": "number"
											},
											"objectType": {
												"type": "reference",
												"target": 383,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 384,
			"name": "dropLastWhile",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "drop-last-while.ts",
					"line": 19,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last-while.ts"
				},
				{
					"fileName": "drop-last-while.ts",
					"line": 37,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last-while.ts"
				},
				{
					"fileName": "drop-last-while.ts",
					"line": 41,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last-while.ts"
				}
			],
			"signatures": [
				{
					"id": 385,
					"name": "dropLastWhile",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Removes elements from the end of the array until the predicate returns false.\n\nThe predicate is applied to each element in the array starting from the end and moving towards the beginning, until the predicate returns false. The returned array includes elements from the beginning of the array, up to and including the element that produced false for the predicate."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.dropLastWhile(data, predicate)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.dropLastWhile([1, 2, 10, 3, 4], x => x < 10) // => [1, 2, 10]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "drop-last-while.ts",
							"line": 19,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last-while.ts"
						}
					],
					"typeParameters": [
						{
							"id": 386,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 387,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 386,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 388,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The predicate."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 389,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "drop-last-while.ts",
											"line": 21,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last-while.ts"
										}
									],
									"signatures": [
										{
											"id": 390,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "drop-last-while.ts",
													"line": 21,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last-while.ts"
												}
											],
											"parameters": [
												{
													"id": 391,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 386,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 392,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 393,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 386,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "intrinsic",
								"name": "number"
							},
							"objectType": {
								"type": "reference",
								"target": 386,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					}
				},
				{
					"id": 394,
					"name": "dropLastWhile",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Removes elements from the end of the array until the predicate returns false.\n\nThe predicate is applied to each element in the array starting from the end and moving towards the beginning, until the predicate returns false. The returned array includes elements from the beginning of the array, up to and including the element that produced false for the predicate."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.dropLastWhile(predicate)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 10, 3, 4], P.dropLastWhile(x => x < 10))  // => [1, 2, 10]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "drop-last-while.ts",
							"line": 37,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last-while.ts"
						}
					],
					"typeParameters": [
						{
							"id": 395,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 396,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The predicate."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 397,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "drop-last-while.ts",
											"line": 38,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last-while.ts"
										}
									],
									"signatures": [
										{
											"id": 398,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "drop-last-while.ts",
													"line": 38,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last-while.ts"
												}
											],
											"parameters": [
												{
													"id": 399,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 395,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 400,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 401,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 395,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 402,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "drop-last-while.ts",
									"line": 39,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-last-while.ts"
								}
							],
							"signatures": [
								{
									"id": 403,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 404,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 395,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "intrinsic",
												"name": "number"
											},
											"objectType": {
												"type": "reference",
												"target": 395,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 405,
			"name": "dropWhile",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "drop-while.ts",
					"line": 19,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-while.ts"
				},
				{
					"fileName": "drop-while.ts",
					"line": 37,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-while.ts"
				},
				{
					"fileName": "drop-while.ts",
					"line": 41,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-while.ts"
				}
			],
			"signatures": [
				{
					"id": 406,
					"name": "dropWhile",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Removes elements from the beginning of the array until the predicate returns false.\n\nThe predicate is applied to each element in the array, until the predicate returns false. The returned array includes the rest of the elements, starting with the element that produced false for the predicate."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.dropWhile(data, predicate)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.dropWhile([1, 2, 10, 3, 4], x => x < 10) // => [10, 3, 4]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "drop-while.ts",
							"line": 19,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-while.ts"
						}
					],
					"typeParameters": [
						{
							"id": 407,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 408,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 407,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 409,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The predicate."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 410,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "drop-while.ts",
											"line": 21,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-while.ts"
										}
									],
									"signatures": [
										{
											"id": 411,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "drop-while.ts",
													"line": 21,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-while.ts"
												}
											],
											"parameters": [
												{
													"id": 412,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 407,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 413,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 414,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 407,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "intrinsic",
								"name": "number"
							},
							"objectType": {
								"type": "reference",
								"target": 407,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					}
				},
				{
					"id": 415,
					"name": "dropWhile",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Removes elements from the beginning of the array until the predicate returns false.\n\nThe predicate is applied to each element in the array, until the predicate returns false. The returned array includes the rest of the elements, starting with the element that produced false for the predicate."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.dropWhile(predicate)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 10, 3, 4], P.dropWhile(x => x < 10))  // => [10, 3, 4]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "drop-while.ts",
							"line": 37,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-while.ts"
						}
					],
					"typeParameters": [
						{
							"id": 416,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 417,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The predicate."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 418,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "drop-while.ts",
											"line": 38,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-while.ts"
										}
									],
									"signatures": [
										{
											"id": 419,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "drop-while.ts",
													"line": 38,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-while.ts"
												}
											],
											"parameters": [
												{
													"id": 420,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 416,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 421,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 422,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 416,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 423,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "drop-while.ts",
									"line": 39,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/drop-while.ts"
								}
							],
							"signatures": [
								{
									"id": 424,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 425,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 416,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "intrinsic",
												"name": "number"
											},
											"objectType": {
												"type": "reference",
												"target": 416,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 426,
			"name": "entries",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "entries.ts",
					"line": 29,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/entries.ts"
				},
				{
					"fileName": "entries.ts",
					"line": 41,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/entries.ts"
				},
				{
					"fileName": "entries.ts",
					"line": 43,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/entries.ts"
				}
			],
			"signatures": [
				{
					"id": 427,
					"name": "entries",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns an array of key/values of the enumerable properties of an object."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.entries(object)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.entries({ a: 1, b: 2, c: 3 }); // => [['a', 1], ['b', 2], ['c', 3]]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "entries.ts",
							"line": 29,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/entries.ts"
						}
					],
					"typeParameters": [
						{
							"id": 428,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 429,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {}
								}
							}
						}
					],
					"parameters": [
						{
							"id": 430,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Object to return keys and values of."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 428,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/entries.ts",
								"qualifiedName": "Entry"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 428,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							],
							"name": "Entry",
							"package": "@vinicunca/perkakas"
						}
					}
				},
				{
					"id": 431,
					"name": "entries",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns an array of key/values of the enumerable properties of an object."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.entries()(object)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe({ a: 1, b: 2, c: 3 }, P.entries()); // => [['a', 1], ['b', 2], ['c', 3]]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "entries.ts",
							"line": 41,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/entries.ts"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 432,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "entries.ts",
									"line": 41,
									"character": 27,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/entries.ts"
								}
							],
							"signatures": [
								{
									"id": 433,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 435,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 436,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "entries.ts",
															"line": 41,
															"character": 38,
															"url": "https://github.com/vinicunca/perkakas/blob/main/src/entries.ts"
														}
													]
												}
											}
										}
									],
									"parameters": [
										{
											"id": 434,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 435,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "src/entries.ts",
												"qualifiedName": "Entry"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 435,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "Entry",
											"package": "@vinicunca/perkakas"
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 437,
			"name": "evolve",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "evolve.ts",
					"line": 93,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/evolve.ts"
				},
				{
					"fileName": "evolve.ts",
					"line": 130,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/evolve.ts"
				},
				{
					"fileName": "evolve.ts",
					"line": 134,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/evolve.ts"
				}
			],
			"signatures": [
				{
					"id": 438,
					"name": "evolve",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a new object by applying functions that is included in "
							},
							{
								"kind": "code",
								"text": "`evolver`"
							},
							{
								"kind": "text",
								"text": " object parameter\nto the "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " object parameter according to their corresponding path.\n\nFunctions included in "
							},
							{
								"kind": "code",
								"text": "`evolver`"
							},
							{
								"kind": "text",
								"text": " object will not be invoked\nif its corresponding key does not exist in the "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " object.\nAlso, values included in "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " object will be kept as is\nif its corresponding key does not exist in the "
							},
							{
								"kind": "code",
								"text": "`evolver`"
							},
							{
								"kind": "text",
								"text": " object."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.evolve(data, evolver)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const evolver = {\n     count: add(1),\n     time: { elapsed: add(1), remaining: add(-1) },\n   };\n   const data = {\n     id: 10,\n     count: 10,\n     time: { elapsed: 100, remaining: 1400 },\n   };\n   evolve(data, evolver)\n   // => {\n   //   id: 10,\n   //   count: 11,\n   //   time: { elapsed: 101, remaining: 1399 },\n   // }"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "evolve.ts",
							"line": 93,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/evolve.ts"
						}
					],
					"typeParameters": [
						{
							"id": 439,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 440,
							"name": "E",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"parameters": [
						{
							"id": 441,
							"name": "object",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Object whose value is applied to the corresponding function\nthat is defined in "
									},
									{
										"kind": "code",
										"text": "`evolver`"
									},
									{
										"kind": "text",
										"text": " at the same path."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 439,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 442,
							"name": "evolver",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Object that include functions that is applied to\nthe corresponding value of "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " object at the same path."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 440,
								"name": "E",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/evolve.ts",
							"qualifiedName": "Evolved"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 439,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 440,
								"name": "E",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Evolved",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 443,
					"name": "evolve",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a new object by applying functions that is included in "
							},
							{
								"kind": "code",
								"text": "`evolver`"
							},
							{
								"kind": "text",
								"text": " object parameter\nto the "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " object parameter according to their corresponding path.\n\nFunctions included in "
							},
							{
								"kind": "code",
								"text": "`evolver`"
							},
							{
								"kind": "text",
								"text": " object will not be invoked\nif its corresponding key does not exist in the "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " object.\nAlso, values included in "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " object will not be used\nif its corresponding key does not exist in the "
							},
							{
								"kind": "code",
								"text": "`evolver`"
							},
							{
								"kind": "text",
								"text": " object."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.evolve(evolver)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const evolver = {\n     count: add(1),\n     time: { elapsed: add(1), remaining: add(-1) },\n   };\n   const data = {\n     id: 10,\n     count: 10,\n     time: { elapsed: 100, remaining: 1400 },\n   };\n   P.pipe(object, P.evolve(evolver))\n   // => {\n   //   id: 10,\n   //   count: 11,\n   //   time: { elapsed: 101, remaining: 1399 },\n   // }"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "evolve.ts",
							"line": 130,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/evolve.ts"
						}
					],
					"typeParameters": [
						{
							"id": 444,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 445,
							"name": "E",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"parameters": [
						{
							"id": 446,
							"name": "evolver",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Object that include functions that is applied to\nthe corresponding value of "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " object at the same path."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 445,
								"name": "E",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 447,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "evolve.ts",
									"line": 132,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/evolve.ts"
								}
							],
							"signatures": [
								{
									"id": 448,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 449,
											"name": "object",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 444,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/evolve.ts",
											"qualifiedName": "Evolved"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 444,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 445,
												"name": "E",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Evolved",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 450,
			"name": "filter",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "filter.ts",
					"line": 25,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/filter.ts"
				},
				{
					"fileName": "filter.ts",
					"line": 52,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/filter.ts"
				}
			],
			"signatures": [
				{
					"id": 451,
					"name": "filter",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a shallow copy of a portion of a given array, filtered down to just\nthe elements from the given array that pass the test implemented by the\nprovided function. Equivalent to "
							},
							{
								"kind": "code",
								"text": "`Array.prototype.filter`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A shallow copy of the given array containing just the elements that\npass the test. If no elements pass the test, an empty array is returned."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.filter(data, predicate)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.filter([1, 2, 3], x => x % 2 === 1) // => [1, 3]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "filter.ts",
							"line": 25,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/filter.ts"
						}
					],
					"typeParameters": [
						{
							"id": 452,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 453,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 454,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to filter."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 452,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 455,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " to keep the element in the resulting array, and "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": "\notherwise. A type-predicate can also be used to narrow the result."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 456,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "filter.ts",
											"line": 27,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/filter.ts"
										}
									],
									"signatures": [
										{
											"id": 457,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "filter.ts",
													"line": 27,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/filter.ts"
												}
											],
											"parameters": [
												{
													"id": 458,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 452,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 459,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 460,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 452,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "value",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"target": 453,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 453,
							"name": "S",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 470,
					"name": "filter",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a shallow copy of a portion of a given array, filtered down to just\nthe elements from the given array that pass the test implemented by the\nprovided function. Equivalent to "
							},
							{
								"kind": "code",
								"text": "`Array.prototype.filter`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A shallow copy of the given array containing just the elements that\npass the test. If no elements pass the test, an empty array is returned."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.filter(predicate)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 3], P.filter(x => x % 2 === 1)) // => [1, 3]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "filter.ts",
							"line": 52,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/filter.ts"
						}
					],
					"typeParameters": [
						{
							"id": 471,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 472,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 473,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " to keep the element in the resulting array, and "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": "\notherwise."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 474,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "filter.ts",
											"line": 53,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/filter.ts"
										}
									],
									"signatures": [
										{
											"id": 475,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "filter.ts",
													"line": 53,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/filter.ts"
												}
											],
											"parameters": [
												{
													"id": 476,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 471,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 477,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 478,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 471,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "value",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"target": 472,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 479,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "filter.ts",
									"line": 54,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/filter.ts"
								}
							],
							"signatures": [
								{
									"id": 480,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 481,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 471,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 472,
											"name": "S",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 493,
			"name": "find",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "find.ts",
					"line": 34,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/find.ts"
				},
				{
					"fileName": "find.ts",
					"line": 72,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/find.ts"
				}
			],
			"signatures": [
				{
					"id": 494,
					"name": "find",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the first element in the provided array that satisfies the provided\ntesting function. If no values satisfy the testing function, "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": " is\nreturned.\n\nSimilar functions:\n"
							},
							{
								"kind": "code",
								"text": "`findLast`"
							},
							{
								"kind": "text",
								"text": " - If you need the last element that satisfies the provided testing function.\n"
							},
							{
								"kind": "code",
								"text": "`findIndex`"
							},
							{
								"kind": "text",
								"text": " - If you need the index of the found element in the array.\n"
							},
							{
								"kind": "code",
								"text": "`indexOf`"
							},
							{
								"kind": "text",
								"text": " - If you need to find the index of a value.\n"
							},
							{
								"kind": "code",
								"text": "`includes`"
							},
							{
								"kind": "text",
								"text": " - If you need to find if a value exists in an array.\n"
							},
							{
								"kind": "code",
								"text": "`some`"
							},
							{
								"kind": "text",
								"text": " - If you need to find if any element satisfies the provided testing function.\n"
							},
							{
								"kind": "code",
								"text": "`filter`"
							},
							{
								"kind": "text",
								"text": " - If you need to find all elements that satisfy the provided testing function."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The first element in the array that satisfies the provided testing\nfunction. Otherwise, "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " is returned."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.find(data, predicate)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.find([1, 3, 4, 6], n => n % 2 === 0) // => 4"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "find.ts",
							"line": 34,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/find.ts"
						}
					],
					"typeParameters": [
						{
							"id": 495,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 496,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 497,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items to search in."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 495,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 498,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " to indicate a matching element has been found, and\n"
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise. A type-predicate can also be used to narrow the result."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 499,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "find.ts",
											"line": 36,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/find.ts"
										}
									],
									"signatures": [
										{
											"id": 500,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "find.ts",
													"line": 36,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/find.ts"
												}
											],
											"parameters": [
												{
													"id": 501,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 495,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 502,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 503,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 495,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "value",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"target": 496,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 496,
								"name": "S",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				},
				{
					"id": 513,
					"name": "find",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the first element in the provided array that satisfies the provided\ntesting function. If no values satisfy the testing function, "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": " is\nreturned.\n\nSimilar functions:\n"
							},
							{
								"kind": "code",
								"text": "`findLast`"
							},
							{
								"kind": "text",
								"text": " - If you need the last element that satisfies the provided testing function.\n"
							},
							{
								"kind": "code",
								"text": "`findIndex`"
							},
							{
								"kind": "text",
								"text": " - If you need the index of the found element in the array.\n"
							},
							{
								"kind": "code",
								"text": "`indexOf`"
							},
							{
								"kind": "text",
								"text": " - If you need to find the index of a value.\n"
							},
							{
								"kind": "code",
								"text": "`includes`"
							},
							{
								"kind": "text",
								"text": " - If you need to find if a value exists in an array.\n"
							},
							{
								"kind": "code",
								"text": "`some`"
							},
							{
								"kind": "text",
								"text": " - If you need to find if any element satisfies the provided testing function.\n"
							},
							{
								"kind": "code",
								"text": "`filter`"
							},
							{
								"kind": "text",
								"text": " - If you need to find all elements that satisfy the provided testing function."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The first element in the array that satisfies the provided testing\nfunction. Otherwise, "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " is returned."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.find(predicate)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [1, 3, 4, 6],\n     P.find(n => n % 2 === 0)\n   ) // => 4"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "find.ts",
							"line": 72,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/find.ts"
						}
					],
					"typeParameters": [
						{
							"id": 514,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 515,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 516,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " to indicate a matching element has been found, and\n"
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise. A type-predicate can also be used to narrow the result."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 517,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "find.ts",
											"line": 73,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/find.ts"
										}
									],
									"signatures": [
										{
											"id": 518,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "find.ts",
													"line": 73,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/find.ts"
												}
											],
											"parameters": [
												{
													"id": 519,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 514,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 520,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 521,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 514,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "value",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"target": 515,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 522,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "find.ts",
									"line": 74,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/find.ts"
								}
							],
							"signatures": [
								{
									"id": 523,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 524,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 514,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 515,
												"name": "S",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 536,
			"name": "findIndex",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "find-index.ts",
					"line": 24,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-index.ts"
				},
				{
					"fileName": "find-index.ts",
					"line": 52,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-index.ts"
				},
				{
					"fileName": "find-index.ts",
					"line": 56,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-index.ts"
				}
			],
			"signatures": [
				{
					"id": 537,
					"name": "findIndex",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the index of the first element in an array that satisfies the\nprovided testing function. If no elements satisfy the testing function, -1 is\nreturned.\n\nSee also the "
							},
							{
								"kind": "code",
								"text": "`find`"
							},
							{
								"kind": "text",
								"text": " method, which returns the first element that satisfies\nthe testing function (rather than its index)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The index of the first element in the array that passes the test.\nOtherwise, -1."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.findIndex(data, predicate)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.findIndex([1, 3, 4, 6], n => n % 2 === 0) // => 2"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "find-index.ts",
							"line": 24,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-index.ts"
						}
					],
					"typeParameters": [
						{
							"id": 538,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 539,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items to search in."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 538,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 540,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return a "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " to indicate a matching element has been found, and a\n"
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 541,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "find-index.ts",
											"line": 26,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-index.ts"
										}
									],
									"signatures": [
										{
											"id": 542,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "find-index.ts",
													"line": 26,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-index.ts"
												}
											],
											"parameters": [
												{
													"id": 543,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 538,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 544,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 545,
													"name": "obj",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 538,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 546,
					"name": "findIndex",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the index of the first element in an array that satisfies the\nprovided testing function. If no elements satisfy the testing function, -1 is\nreturned.\n\nSee also the "
							},
							{
								"kind": "code",
								"text": "`find`"
							},
							{
								"kind": "text",
								"text": " method, which returns the first element that satisfies\nthe testing function (rather than its index)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The index of the first element in the array that passes the test.\nOtherwise, -1."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.findIndex(predicate)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [1, 3, 4, 6],\n     P.findIndex(n => n % 2 === 0)\n   ); // => 2"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "find-index.ts",
							"line": 52,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-index.ts"
						}
					],
					"typeParameters": [
						{
							"id": 547,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 548,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return a "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " to indicate a matching element has been found, and a\n"
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 549,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "find-index.ts",
											"line": 53,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-index.ts"
										}
									],
									"signatures": [
										{
											"id": 550,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "find-index.ts",
													"line": 53,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-index.ts"
												}
											],
											"parameters": [
												{
													"id": 551,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 547,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 552,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 553,
													"name": "obj",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 547,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 554,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "find-index.ts",
									"line": 54,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-index.ts"
								}
							],
							"signatures": [
								{
									"id": 555,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 556,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 547,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 557,
			"name": "findLast",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "find-last.ts",
					"line": 29,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last.ts"
				},
				{
					"fileName": "find-last.ts",
					"line": 66,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last.ts"
				}
			],
			"signatures": [
				{
					"id": 558,
					"name": "findLast",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Iterates the array in reverse order and returns the value of the first\nelement that satisfies the provided testing function. If no elements satisfy\nthe testing function, undefined is returned.\n\nSimilar functions:\n"
							},
							{
								"kind": "code",
								"text": "`find`"
							},
							{
								"kind": "text",
								"text": " - If you need the first element that satisfies the provided testing function.\n"
							},
							{
								"kind": "code",
								"text": "`findLastIndex`"
							},
							{
								"kind": "text",
								"text": " - If you need the index of the found element in the array.\n"
							},
							{
								"kind": "code",
								"text": "`lastIndexOf`"
							},
							{
								"kind": "text",
								"text": " - If you need to find the index of a value.\n"
							},
							{
								"kind": "code",
								"text": "`includes`"
							},
							{
								"kind": "text",
								"text": " - If you need to find if a value exists in an array.\n"
							},
							{
								"kind": "code",
								"text": "`some`"
							},
							{
								"kind": "text",
								"text": " - If you need to find if any element satisfies the provided testing function.\n"
							},
							{
								"kind": "code",
								"text": "`filter`"
							},
							{
								"kind": "text",
								"text": " - If you need to find all elements that satisfy the provided testing function."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The last (highest-index) element in the array that satisfies the\nprovided testing function; undefined if no matching element is found."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.findLast(data, predicate)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.findLast([1, 3, 4, 6], n => n % 2 === 1) // => 3"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "find-last.ts",
							"line": 29,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last.ts"
						}
					],
					"typeParameters": [
						{
							"id": 559,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 560,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 561,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items to search in."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 559,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 562,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " to indicate a matching element has been found, and\n"
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise. A type-predicate can also be used to narrow the result."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 563,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "find-last.ts",
											"line": 31,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last.ts"
										}
									],
									"signatures": [
										{
											"id": 564,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "find-last.ts",
													"line": 31,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last.ts"
												}
											],
											"parameters": [
												{
													"id": 565,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 559,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 566,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 567,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 559,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "value",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"target": 560,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 560,
								"name": "S",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				},
				{
					"id": 577,
					"name": "findLast",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Iterates the array in reverse order and returns the value of the first\nelement that satisfies the provided testing function. If no elements satisfy\nthe testing function, undefined is returned.\n\nSimilar functions:\n"
							},
							{
								"kind": "code",
								"text": "`find`"
							},
							{
								"kind": "text",
								"text": " - If you need the first element that satisfies the provided testing function.\n"
							},
							{
								"kind": "code",
								"text": "`findLastIndex`"
							},
							{
								"kind": "text",
								"text": " - If you need the index of the found element in the array.\n"
							},
							{
								"kind": "code",
								"text": "`lastIndexOf`"
							},
							{
								"kind": "text",
								"text": " - If you need to find the index of a value.\n"
							},
							{
								"kind": "code",
								"text": "`includes`"
							},
							{
								"kind": "text",
								"text": " - If you need to find if a value exists in an array.\n"
							},
							{
								"kind": "code",
								"text": "`some`"
							},
							{
								"kind": "text",
								"text": " - If you need to find if any element satisfies the provided testing function.\n"
							},
							{
								"kind": "code",
								"text": "`filter`"
							},
							{
								"kind": "text",
								"text": " - If you need to find all elements that satisfy the provided testing function."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The last (highest-index) element in the array that satisfies the\nprovided testing function; undefined if no matching element is found."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.findLast(predicate)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [1, 3, 4, 6],\n     P.findLast(n => n % 2 === 1)\n   ) // => 3"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "find-last.ts",
							"line": 66,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last.ts"
						}
					],
					"typeParameters": [
						{
							"id": 578,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 579,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 580,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " to indicate a matching element has been found, and\n"
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise. A type-predicate can also be used to narrow the result."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 581,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "find-last.ts",
											"line": 67,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last.ts"
										}
									],
									"signatures": [
										{
											"id": 582,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "find-last.ts",
													"line": 67,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last.ts"
												}
											],
											"parameters": [
												{
													"id": 583,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 578,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 584,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 585,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 578,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "value",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"target": 579,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 586,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "find-last.ts",
									"line": 68,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last.ts"
								}
							],
							"signatures": [
								{
									"id": 587,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 588,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 578,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": 579,
												"name": "S",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 600,
			"name": "findLastIndex",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "find-last-index.ts",
					"line": 24,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last-index.ts"
				},
				{
					"fileName": "find-last-index.ts",
					"line": 52,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last-index.ts"
				},
				{
					"fileName": "find-last-index.ts",
					"line": 56,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last-index.ts"
				}
			],
			"signatures": [
				{
					"id": 601,
					"name": "findLastIndex",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Iterates the array in reverse order and returns the index of the first\nelement that satisfies the provided testing function. If no elements satisfy\nthe testing function, -1 is returned.\n\nSee also "
							},
							{
								"kind": "code",
								"text": "`findLast`"
							},
							{
								"kind": "text",
								"text": " which returns the value of last element that satisfies\nthe testing function (rather than its index)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The index of the last (highest-index) element in the array that\npasses the test. Otherwise -1 if no matching element is found."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.findLastIndex(data, predicate)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.findLastIndex([1, 3, 4, 6], n => n % 2 === 1) // => 1"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "find-last-index.ts",
							"line": 24,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last-index.ts"
						}
					],
					"typeParameters": [
						{
							"id": 602,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 603,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items to search in."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 602,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 604,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " to indicate a matching element has been found, and\n"
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 605,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "find-last-index.ts",
											"line": 26,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last-index.ts"
										}
									],
									"signatures": [
										{
											"id": 606,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "find-last-index.ts",
													"line": 26,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last-index.ts"
												}
											],
											"parameters": [
												{
													"id": 607,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 602,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 608,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 609,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 602,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 610,
					"name": "findLastIndex",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Iterates the array in reverse order and returns the index of the first\nelement that satisfies the provided testing function. If no elements satisfy\nthe testing function, -1 is returned.\n\nSee also "
							},
							{
								"kind": "code",
								"text": "`findLast`"
							},
							{
								"kind": "text",
								"text": " which returns the value of last element that satisfies\nthe testing function (rather than its index)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The index of the last (highest-index) element in the array that\npasses the test. Otherwise -1 if no matching element is found."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.findLastIndex(fn)(items)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [1, 3, 4, 6],\n     P.findLastIndex(n => n % 2 === 1)\n   ) // => 1"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "find-last-index.ts",
							"line": 52,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last-index.ts"
						}
					],
					"typeParameters": [
						{
							"id": 611,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 612,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " to indicate a matching element has been found, and\n"
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 613,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "find-last-index.ts",
											"line": 53,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last-index.ts"
										}
									],
									"signatures": [
										{
											"id": 614,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "find-last-index.ts",
													"line": 53,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last-index.ts"
												}
											],
											"parameters": [
												{
													"id": 615,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 611,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 616,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 617,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 611,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 618,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "find-last-index.ts",
									"line": 54,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/find-last-index.ts"
								}
							],
							"signatures": [
								{
									"id": 619,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 620,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 611,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 621,
			"name": "first",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "first.ts",
					"line": 29,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/first.ts"
				},
				{
					"fileName": "first.ts",
					"line": 48,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/first.ts"
				},
				{
					"fileName": "first.ts",
					"line": 50,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/first.ts"
				}
			],
			"signatures": [
				{
					"id": 622,
					"name": "first",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Gets the first element of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The first element of the array."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.first(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.first([1, 2, 3]) // => 1\n   P.first([]) // => undefined"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "first.ts",
							"line": 29,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/first.ts"
						}
					],
					"typeParameters": [
						{
							"id": 623,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 624,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 623,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/first.ts",
							"qualifiedName": "First"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 623,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "First",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 625,
					"name": "first",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Gets the first element of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The first element of the array."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.first()(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [1, 2, 4, 8, 16],\n     P.filter(x => x > 3),\n     P.first(),\n     x => x + 1\n   ); // => 5"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "first.ts",
							"line": 48,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/first.ts"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 626,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "first.ts",
									"line": 48,
									"character": 25,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/first.ts"
								}
							],
							"signatures": [
								{
									"id": 627,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 629,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 628,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 629,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/first.ts",
											"qualifiedName": "First"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 629,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "First",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 630,
			"name": "firstBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "first-by.ts",
					"line": 42,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/first-by.ts"
				},
				{
					"fileName": "first-by.ts",
					"line": 71,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/first-by.ts"
				},
				{
					"fileName": "first-by.ts",
					"line": 76,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/first-by.ts"
				}
			],
			"signatures": [
				{
					"id": 631,
					"name": "firstBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Find the first element in the array that adheres to the order rules provided. This is a superset of what a typical "
							},
							{
								"kind": "code",
								"text": "`maxBy`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`minBy`"
							},
							{
								"kind": "text",
								"text": " function would do as it allows defining \"tie-breaker\" rules when values are equal, and allows comparing items using any logic. This function is equivalent to calling "
							},
							{
								"kind": "code",
								"text": "`P.first(P.sortBy(...))`"
							},
							{
								"kind": "text",
								"text": " but runs at *O(n)* instead of *O(nlogn)*.\n\nUse "
							},
							{
								"kind": "code",
								"text": "`nthBy`"
							},
							{
								"kind": "text",
								"text": " if you need an element other that the first, or "
							},
							{
								"kind": "code",
								"text": "`takeFirstBy`"
							},
							{
								"kind": "text",
								"text": " if you more than just the first element."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The first element by the order criteria, or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " if the array\nis empty. (The function provides strong typing if the input type assures the\narray isn't empty)."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.firstBy(...rules)(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const max = P.pipe([1,2,3], P.firstBy([P.identity(), \"desc\"])); // => 3;\n  const min = P.pipe([1,2,3], P.firstBy(P.identity())); // => 1;\n\n  const data = [{ a: \"a\" }, { a: \"aa\" }, { a: \"aaa\" }] as const;\n  const maxBy = P.pipe(data, P.firstBy([(item) => item.a.length, \"desc\"])); // => { a: \"aaa\" };\n  const minBy = P.pipe(data, P.firstBy((item) => item.a.length)); // => { a: \"a\" };\n\n  const data = [{type: \"cat\", size: 1}, {type: \"cat\", size: 2}, {type: \"dog\", size: 3}] as const;\n  const multi = P.pipe(data, P.firstBy(P.prop('type'), [P.prop('size'), 'desc'])); // => {type: \"cat\", size: 2}"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "first-by.ts",
							"line": 42,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/first-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 632,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 633,
							"name": "rules",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
									},
									{
										"kind": "code",
										"text": "`<`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`>`"
									},
									{
										"kind": "text",
										"text": " operators. Earlier rules take precedence over later ones. Use the syntax "
									},
									{
										"kind": "code",
										"text": "`[projection, \"desc\"]`"
									},
									{
										"kind": "text",
										"text": " for descending order."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "number"
													},
													"objectType": {
														"type": "reference",
														"target": 632,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "number"
													},
													"objectType": {
														"type": "reference",
														"target": 632,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 634,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "first-by.ts",
									"line": 44,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/first-by.ts"
								}
							],
							"signatures": [
								{
									"id": 635,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 636,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 632,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/first-by.ts",
											"qualifiedName": "FirstBy"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 632,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "FirstBy",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				},
				{
					"id": 637,
					"name": "firstBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Find the first element in the array that adheres to the order rules provided. This is a superset of what a typical "
							},
							{
								"kind": "code",
								"text": "`maxBy`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`minBy`"
							},
							{
								"kind": "text",
								"text": " function would do as it allows defining \"tie-breaker\" rules when values are equal, and allows comparing items using any logic. This function is equivalent to calling "
							},
							{
								"kind": "code",
								"text": "`P.first(P.sortBy(...))`"
							},
							{
								"kind": "text",
								"text": " but runs at *O(n)* instead of *O(nlogn)*.\n\nUse "
							},
							{
								"kind": "code",
								"text": "`nthBy`"
							},
							{
								"kind": "text",
								"text": " if you need an element other that the first, or "
							},
							{
								"kind": "code",
								"text": "`takeFirstBy`"
							},
							{
								"kind": "text",
								"text": " if you more than just the first element."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The first element by the order criteria, or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " if the array\nis empty. (The function provides strong typing if the input type assures the\narray isn't empty)."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.firstBy(data, ...rules);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const max = P.firstBy([1,2,3], [P.identity(), \"desc\"]); // => 3;\n  const min = P.firstBy([1,2,3], P.identity()); // => 1;\n\n  const data = [{ a: \"a\" }, { a: \"aa\" }, { a: \"aaa\" }] as const;\n  const maxBy = P.firstBy(data, [(item) => item.a.length, \"desc\"]); // => { a: \"aaa\" };\n  const minBy = P.firstBy(data, (item) => item.a.length); // => { a: \"a\" };\n\n  const data = [{type: \"cat\", size: 1}, {type: \"cat\", size: 2}, {type: \"dog\", size: 3}] as const;\n  const multi = P.firstBy(data, P.prop('type'), [P.prop('size'), 'desc']); // => {type: \"cat\", size: 2}"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "first-by.ts",
							"line": 71,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/first-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 638,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 639,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An array of items."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 638,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 640,
							"name": "rules",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
									},
									{
										"kind": "code",
										"text": "`<`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`>`"
									},
									{
										"kind": "text",
										"text": " operators. Earlier rules take precedence over later ones. Use the syntax "
									},
									{
										"kind": "code",
										"text": "`[projection, \"desc\"]`"
									},
									{
										"kind": "text",
										"text": " for descending order."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "number"
													},
													"objectType": {
														"type": "reference",
														"target": 638,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "number"
													},
													"objectType": {
														"type": "reference",
														"target": 638,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/first-by.ts",
							"qualifiedName": "FirstBy"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 638,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "FirstBy",
						"package": "@vinicunca/perkakas"
					}
				}
			]
		},
		{
			"id": 641,
			"name": "flat",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "flat.ts",
					"line": 85,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat.ts"
				},
				{
					"fileName": "flat.ts",
					"line": 110,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat.ts"
				},
				{
					"fileName": "flat.ts",
					"line": 114,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat.ts"
				}
			],
			"signatures": [
				{
					"id": 642,
					"name": "flat",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a new array with all sub-array elements concatenated into it\nrecursively up to the specified depth. Equivalent to the built-in\n"
							},
							{
								"kind": "code",
								"text": "`Array.prototype.flat`"
							},
							{
								"kind": "text",
								"text": " method."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.flat(data)\n  P.flat(data, depth)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.flat([[1, 2], [3, 4], [5], [[6]]]); // => [1, 2, 3, 4, 5, [6]]\n  P.flat([[[1]], [[2]]], 2); // => [1, 2]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "flat.ts",
							"line": 85,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat.ts"
						}
					],
					"typeParameters": [
						{
							"id": 643,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 644,
							"name": "Depth",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"default": {
								"type": "literal",
								"value": 1
							}
						}
					],
					"parameters": [
						{
							"id": 645,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items to flatten."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 643,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 646,
							"name": "depth",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The depth level specifying how deep a nested array structure\nshould be flattened. Defaults to 1. Non literal values (those typed as\n"
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": "cannot be used. "
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`Number.POSITIVE_INFINITY`"
									},
									{
										"kind": "text",
										"text": " and\n"
									},
									{
										"kind": "code",
										"text": "`Number.MAX_VALUE`"
									},
									{
										"kind": "text",
										"text": " are all typed as "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " and can't be used either. For\n\"unlimited\" depth use a literal value that would exceed your expected\npractical maximum nesting level."
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/is-literal.d.ts",
										"qualifiedName": "IsNumericLiteral"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": 644,
											"name": "Depth",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									],
									"name": "IsNumericLiteral",
									"package": "type-fest"
								},
								"extendsType": {
									"type": "literal",
									"value": true
								},
								"trueType": {
									"type": "reference",
									"target": 644,
									"name": "Depth",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "intrinsic",
									"name": "never"
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/flat.ts",
							"qualifiedName": "FlatArray"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 643,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 644,
								"name": "Depth",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "FlatArray",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 647,
					"name": "flat",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a new array with all sub-array elements concatenated into it\nrecursively up to the specified depth. Equivalent to the built-in\n"
							},
							{
								"kind": "code",
								"text": "`Array.prototype.flat`"
							},
							{
								"kind": "text",
								"text": " method."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.flat()(data)\n  P.flat(depth)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([[1, 2], [3, 4], [5], [[6]]], P.flat()); // => [1, 2, 3, 4, 5, [6]]\n  P.pipe([[[1]], [[2]]], P.flat(2)); // => [1, 2]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "flat.ts",
							"line": 110,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat.ts"
						}
					],
					"typeParameters": [
						{
							"id": 648,
							"name": "Depth",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"default": {
								"type": "literal",
								"value": 1
							}
						}
					],
					"parameters": [
						{
							"id": 649,
							"name": "depth",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The depth level specifying how deep a nested array structure\nshould be flattened. Defaults to 1."
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/is-literal.d.ts",
										"qualifiedName": "IsNumericLiteral"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": 648,
											"name": "Depth",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									],
									"name": "IsNumericLiteral",
									"package": "type-fest"
								},
								"extendsType": {
									"type": "literal",
									"value": true
								},
								"trueType": {
									"type": "reference",
									"target": 648,
									"name": "Depth",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "intrinsic",
									"name": "never"
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 650,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "flat.ts",
									"line": 112,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat.ts"
								}
							],
							"signatures": [
								{
									"id": 651,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 653,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 652,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 653,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/flat.ts",
											"qualifiedName": "FlatArray"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 653,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 648,
												"name": "Depth",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "FlatArray",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 654,
			"name": "flatMap",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "flat-map.ts",
					"line": 26,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat-map.ts"
				},
				{
					"fileName": "flat-map.ts",
					"line": 55,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat-map.ts"
				},
				{
					"fileName": "flat-map.ts",
					"line": 63,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat-map.ts"
				}
			],
			"signatures": [
				{
					"id": 655,
					"name": "flatMap",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a new array formed by applying a given callback function to each\nelement of the array, and then flattening the result by one level. It is\nidentical to a "
							},
							{
								"kind": "code",
								"text": "`map`"
							},
							{
								"kind": "text",
								"text": " followed by a "
							},
							{
								"kind": "code",
								"text": "`flat`"
							},
							{
								"kind": "text",
								"text": " of depth 1\n("
							},
							{
								"kind": "code",
								"text": "`flat(map(data, ...args))`"
							},
							{
								"kind": "text",
								"text": "), but slightly more efficient than calling those\ntwo methods separately. Equivalent to "
							},
							{
								"kind": "code",
								"text": "`Array.prototype.flatMap`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A new array with each element being the result of the callback\nfunction and flattened by a depth of 1."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.flatMap(data, callbackfn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.flatMap([1, 2, 3], x => [x, x * 10]) // => [1, 10, 2, 20, 3, 30]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "flat-map.ts",
							"line": 26,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat-map.ts"
						}
					],
					"typeParameters": [
						{
							"id": 656,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 657,
							"name": "U",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 658,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items to map and flatten."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 656,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 659,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return an array containing new elements of the new array, or a single\nnon-array value to be added to the new array."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 660,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "flat-map.ts",
											"line": 28,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat-map.ts"
										}
									],
									"signatures": [
										{
											"id": 661,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "flat-map.ts",
													"line": 28,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat-map.ts"
												}
											],
											"parameters": [
												{
													"id": 662,
													"name": "input",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 656,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 663,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 664,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 656,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 657,
														"name": "U",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 657,
																"name": "U",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												]
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 657,
							"name": "U",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 665,
					"name": "flatMap",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a new array formed by applying a given callback function to each\nelement of the array, and then flattening the result by one level. It is\nidentical to a "
							},
							{
								"kind": "code",
								"text": "`map`"
							},
							{
								"kind": "text",
								"text": " followed by a "
							},
							{
								"kind": "code",
								"text": "`flat`"
							},
							{
								"kind": "text",
								"text": " of depth 1\n("
							},
							{
								"kind": "code",
								"text": "`flat(map(data, ...args))`"
							},
							{
								"kind": "text",
								"text": "), but slightly more efficient than calling those\ntwo methods separately. Equivalent to "
							},
							{
								"kind": "code",
								"text": "`Array.prototype.flatMap`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A new array with each element being the result of the callback\nfunction and flattened by a depth of 1."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.flatMap(callbackfn)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 3], P.flatMap(x => [x, x * 10])) // => [1, 10, 2, 20, 3, 30]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "flat-map.ts",
							"line": 55,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat-map.ts"
						}
					],
					"typeParameters": [
						{
							"id": 666,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 667,
							"name": "U",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 668,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return an array containing new elements of the new array, or a single\nnon-array value to be added to the new array."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 669,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "flat-map.ts",
											"line": 56,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat-map.ts"
										}
									],
									"signatures": [
										{
											"id": 670,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "flat-map.ts",
													"line": 56,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat-map.ts"
												}
											],
											"parameters": [
												{
													"id": 671,
													"name": "input",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 666,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 672,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 673,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 666,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 667,
														"name": "U",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 667,
																"name": "U",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												]
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 674,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "flat-map.ts",
									"line": 61,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/flat-map.ts"
								}
							],
							"signatures": [
								{
									"id": 675,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 676,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 666,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 667,
											"name": "U",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 677,
			"name": "floor",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "floor.ts",
					"line": 21,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/floor.ts"
				},
				{
					"fileName": "floor.ts",
					"line": 39,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/floor.ts"
				},
				{
					"fileName": "floor.ts",
					"line": 41,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/floor.ts"
				}
			],
			"signatures": [
				{
					"id": 678,
					"name": "floor",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Rounds down a given number to a specific precision.\nIf you'd like to round down to an integer (i.e. use this function with constant "
							},
							{
								"kind": "code",
								"text": "`precision === 0`"
							},
							{
								"kind": "text",
								"text": "),\nuse "
							},
							{
								"kind": "code",
								"text": "`Math.floor`"
							},
							{
								"kind": "text",
								"text": " instead, as it won't incur the additional library overhead."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.floor(value, precision);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.floor(123.9876, 3) // => 123.987\n   P.floor(483.22243, 1) // => 483.2\n   P.floor(8541, -1) // => 8540\n   P.floor(456789, -3) // => 456000"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "floor.ts",
							"line": 21,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/floor.ts"
						}
					],
					"parameters": [
						{
							"id": 679,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number to round down."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 680,
							"name": "precision",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The precision to round down to. Must be an integer between -15 and 15."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 681,
					"name": "floor",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Rounds down a given number to a specific precision.\nIf you'd like to round down to an integer (i.e. use this function with constant "
							},
							{
								"kind": "code",
								"text": "`precision === 0`"
							},
							{
								"kind": "text",
								"text": "),\nuse "
							},
							{
								"kind": "code",
								"text": "`Math.floor`"
							},
							{
								"kind": "text",
								"text": " instead, as it won't incur the additional library overhead."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.floor(precision)(value);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.floor(3)(123.9876) // => 123.987\n   P.floor(1)(483.22243) // => 483.2\n   P.floor(-1)(8541) // => 8540\n   P.floor(-3)(456789) // => 456000"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "floor.ts",
							"line": 39,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/floor.ts"
						}
					],
					"parameters": [
						{
							"id": 682,
							"name": "precision",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The precision to round down to. Must be an integer between -15 and 15."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 683,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "floor.ts",
									"line": 39,
									"character": 42,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/floor.ts"
								}
							],
							"signatures": [
								{
									"id": 684,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 685,
											"name": "value",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 686,
			"name": "forEach",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "for-each.ts",
					"line": 29,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each.ts"
				},
				{
					"fileName": "for-each.ts",
					"line": 57,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each.ts"
				},
				{
					"fileName": "for-each.ts",
					"line": 61,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each.ts"
				}
			],
			"signatures": [
				{
					"id": 687,
					"name": "forEach",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Executes a provided function once for each array element. Equivalent to\n"
							},
							{
								"kind": "code",
								"text": "`Array.prototype.forEach`"
							},
							{
								"kind": "text",
								"text": ".\n\nThe dataLast version returns the original array (instead of not returning\nanything ("
							},
							{
								"kind": "code",
								"text": "`void`"
							},
							{
								"kind": "text",
								"text": ")) to allow using it in a pipe. When not used in a "
							},
							{
								"kind": "code",
								"text": "`pipe`"
							},
							{
								"kind": "text",
								"text": " the\nreturned array is equal to the input array (by reference), and not a shallow\ncopy of it!"
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.forEach(data, callbackfn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.forEach([1, 2, 3], x => {\n     console.log(x)\n   });"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "for-each.ts",
							"line": 29,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each.ts"
						}
					],
					"typeParameters": [
						{
							"id": 688,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 689,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The values that would be iterated on."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 688,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 690,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 691,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "for-each.ts",
											"line": 31,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each.ts"
										}
									],
									"signatures": [
										{
											"id": 692,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "for-each.ts",
													"line": 31,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each.ts"
												}
											],
											"parameters": [
												{
													"id": 693,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 688,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 694,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 695,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 688,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				},
				{
					"id": 696,
					"name": "forEach",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Executes a provided function once for each array element. Equivalent to\n"
							},
							{
								"kind": "code",
								"text": "`Array.prototype.forEach`"
							},
							{
								"kind": "text",
								"text": ".\n\nThe dataLast version returns the original array (instead of not returning\nanything ("
							},
							{
								"kind": "code",
								"text": "`void`"
							},
							{
								"kind": "text",
								"text": ")) to allow using it in a pipe. The returned array is the\nsame reference as the input array, and not a shallow copy of it!"
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The original array (the ref itself, not a shallow copy of it)."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.forEach(callbackfn)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [1, 2, 3],\n     P.forEach(x => {\n       console.log(x)\n     })\n   ) // => [1, 2, 3]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "for-each.ts",
							"line": 57,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each.ts"
						}
					],
					"typeParameters": [
						{
							"id": 697,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 698,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 699,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "for-each.ts",
											"line": 58,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each.ts"
										}
									],
									"signatures": [
										{
											"id": 700,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "for-each.ts",
													"line": 58,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each.ts"
												}
											],
											"parameters": [
												{
													"id": 701,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 697,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 702,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 703,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 697,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 704,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "for-each.ts",
									"line": 59,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each.ts"
								}
							],
							"signatures": [
								{
									"id": 705,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 706,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 697,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/writable.d.ts",
											"qualifiedName": "Writable"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 697,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Writable",
										"package": "type-fest"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 707,
			"name": "forEachObj",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "for-each-obj.ts",
					"line": 26,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each-obj.ts"
				},
				{
					"fileName": "for-each-obj.ts",
					"line": 54,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each-obj.ts"
				},
				{
					"fileName": "for-each-obj.ts",
					"line": 62,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each-obj.ts"
				}
			],
			"signatures": [
				{
					"id": 708,
					"name": "forEachObj",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Iterate an object using a defined callback function.\n\nThe dataLast version returns the original object (instead of not returning\nanything ("
							},
							{
								"kind": "code",
								"text": "`void`"
							},
							{
								"kind": "text",
								"text": ")) to allow using it in a pipe. The returned object is the\nsame reference as the input object, and not a shallow copy of it!"
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.forEachObj(object, fn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.forEachObj({a: 1}, (val, key, obj) => {\n     console.log("
									},
									{
										"kind": "code",
										"text": "`${key}: ${val}`"
									},
									{
										"kind": "text",
										"text": ")\n   }) // \"a: 1\""
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "for-each-obj.ts",
							"line": 26,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each-obj.ts"
						}
					],
					"typeParameters": [
						{
							"id": 709,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"parameters": [
						{
							"id": 710,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The object who'se entries would be iterated on."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 709,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 711,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 712,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "for-each-obj.ts",
											"line": 28,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each-obj.ts"
										}
									],
									"signatures": [
										{
											"id": 713,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "for-each-obj.ts",
													"line": 28,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each-obj.ts"
												}
											],
											"parameters": [
												{
													"id": 714,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyedValueOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 709,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyedValueOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 715,
													"name": "key",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 709,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 716,
													"name": "obj",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 709,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				},
				{
					"id": 717,
					"name": "forEachObj",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Iterate an object using a defined callback function.\n\nThe dataLast version returns the original object (instead of not returning\nanything ("
							},
							{
								"kind": "code",
								"text": "`void`"
							},
							{
								"kind": "text",
								"text": ")) to allow using it in a pipe. The returned object is the\nsame reference as the input object, and not a shallow copy of it!"
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The original object (the ref itself, not a shallow copy of it)."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.forEachObj(fn)(object)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     {a: 1},\n     P.forEachObj((val, key) => console.log("
									},
									{
										"kind": "code",
										"text": "`${key}: ${val}`"
									},
									{
										"kind": "text",
										"text": "))\n   ) // \"a: 1\""
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "for-each-obj.ts",
							"line": 54,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each-obj.ts"
						}
					],
					"typeParameters": [
						{
							"id": 718,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"parameters": [
						{
							"id": 719,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 720,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "for-each-obj.ts",
											"line": 55,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each-obj.ts"
										}
									],
									"signatures": [
										{
											"id": 721,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "for-each-obj.ts",
													"line": 55,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each-obj.ts"
												}
											],
											"parameters": [
												{
													"id": 722,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyedValueOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 718,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyedValueOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 723,
													"name": "key",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 718,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 724,
													"name": "obj",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 718,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 725,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "for-each-obj.ts",
									"line": 60,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/for-each-obj.ts"
								}
							],
							"signatures": [
								{
									"id": 726,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 727,
											"name": "object",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 718,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 718,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 728,
			"name": "fromEntries",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "from-entries.ts",
					"line": 108,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-entries.ts"
				},
				{
					"fileName": "from-entries.ts",
					"line": 138,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-entries.ts"
				},
				{
					"fileName": "from-entries.ts",
					"line": 142,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-entries.ts"
				}
			],
			"signatures": [
				{
					"id": 729,
					"name": "fromEntries",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a new object from an array of tuples by pairing up first and second elements as {[key]: value}.\nIf a tuple is not supplied for any element in the array, the element will be ignored\nIf duplicate keys exist, the tuple with the greatest index in the input array will be preferred.\n\nThe strict option supports more sophisticated use-cases like those that would\nresult when calling the strict "
							},
							{
								"kind": "code",
								"text": "`toPairs`"
							},
							{
								"kind": "text",
								"text": " function.\n\nThere are several other functions that could be used to build an object from\nan array:\n- "
							},
							{
								"kind": "code",
								"text": "`fromKeys`"
							},
							{
								"kind": "text",
								"text": ": Builds an object from an array of *keys* and a mapper for values.\n- "
							},
							{
								"kind": "code",
								"text": "`indexBy`"
							},
							{
								"kind": "text",
								"text": ": Builds an object from an array of *values* and a mapper for keys.\n- "
							},
							{
								"kind": "code",
								"text": "`pullObject`"
							},
							{
								"kind": "text",
								"text": ": Builds an object from an array of items with mappers for *both* keys and values.\n- "
							},
							{
								"kind": "code",
								"text": "`mapToObj`"
							},
							{
								"kind": "text",
								"text": ": Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.fromEntries(tuples)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.fromEntries([['a', 'b'], ['c', 'd']]); // => {a: 'b', c: 'd'}"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "from-entries.ts",
							"line": 108,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-entries.ts"
						}
					],
					"typeParameters": [
						{
							"id": 730,
							"name": "Entries",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "src/from-entries.ts",
											"qualifiedName": "Entry"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "PropertyKey"
												},
												"name": "PropertyKey",
												"package": "typescript"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Entry",
										"package": "@vinicunca/perkakas"
									}
								],
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 731,
							"name": "entries",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An array of key-value pairs."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 730,
								"name": "Entries",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/simplify.d.ts",
							"qualifiedName": "Simplify"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "src/from-entries.ts",
									"qualifiedName": "FromEntries"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 730,
										"name": "Entries",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "FromEntries",
								"package": "@vinicunca/perkakas"
							}
						],
						"name": "Simplify",
						"package": "type-fest"
					}
				},
				{
					"id": 732,
					"name": "fromEntries",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a new object from an array of tuples by pairing up first and second elements as {[key]: value}.\nIf a tuple is not supplied for any element in the array, the element will be ignored\nIf duplicate keys exist, the tuple with the greatest index in the input array will be preferred.\n\nThe strict option supports more sophisticated use-cases like those that would\nresult when calling the strict "
							},
							{
								"kind": "code",
								"text": "`toPairs`"
							},
							{
								"kind": "text",
								"text": " function.\n\nThere are several other functions that could be used to build an object from\nan array:\n"
							},
							{
								"kind": "code",
								"text": "`fromKeys`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *keys* and a mapper for values.\n"
							},
							{
								"kind": "code",
								"text": "`indexBy`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *values* and a mapper for keys.\n"
							},
							{
								"kind": "code",
								"text": "`pullObject`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items with mappers for *both* keys and values.\n"
							},
							{
								"kind": "code",
								"text": "`mapToObj`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.fromEntries()(tuples)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n    [['a', 'b'], ['c', 'd']] as const,\n    P.fromEntries(),\n  ); // => {a: 'b', c: 'd'}"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "from-entries.ts",
							"line": 138,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-entries.ts"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 733,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "from-entries.ts",
									"line": 138,
									"character": 31,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-entries.ts"
								}
							],
							"signatures": [
								{
									"id": 734,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 736,
											"name": "Entries",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "src/from-entries.ts",
															"qualifiedName": "Entry"
														},
														"name": "Entry",
														"package": "@vinicunca/perkakas"
													}
												],
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 735,
											"name": "entries",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 736,
												"name": "Entries",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/simplify.d.ts",
											"qualifiedName": "Simplify"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "src/from-entries.ts",
													"qualifiedName": "FromEntries"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 736,
														"name": "Entries",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "FromEntries",
												"package": "@vinicunca/perkakas"
											}
										],
										"name": "Simplify",
										"package": "type-fest"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 737,
			"name": "fromKeys",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "from-keys.ts",
					"line": 46,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-keys.ts"
				},
				{
					"fileName": "from-keys.ts",
					"line": 74,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-keys.ts"
				},
				{
					"fileName": "from-keys.ts",
					"line": 78,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-keys.ts"
				}
			],
			"signatures": [
				{
					"id": 738,
					"name": "fromKeys",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an object that maps each key in "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " to the result of "
							},
							{
								"kind": "code",
								"text": "`mapper`"
							},
							{
								"kind": "text",
								"text": " for\nthat key. Duplicate keys are overwritten, guaranteeing that "
							},
							{
								"kind": "code",
								"text": "`mapper`"
							},
							{
								"kind": "text",
								"text": " is run\nfor each item in "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n"
							},
							{
								"kind": "code",
								"text": "`indexBy`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *values* and a mapper for keys.\n"
							},
							{
								"kind": "code",
								"text": "`pullObject`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items with mappers for *both* keys and values.\n"
							},
							{
								"kind": "code",
								"text": "`fromEntries`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of key-value pairs.\n"
							},
							{
								"kind": "code",
								"text": "`mapToObj`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.fromKeys(data, mapper);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.fromKeys([\"cat\", \"dog\"], P.length()); // { cat: 3, dog: 3 } (typed as Partial<Record<\"cat\" | \"dog\", number>>)\n  P.fromKeys([1, 2], P.add(1)); // { 1: 2, 2: 3 } (typed as Partial<Record<1 | 2, number>>)"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "from-keys.ts",
							"line": 46,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-keys.ts"
						}
					],
					"typeParameters": [
						{
							"id": 739,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "PropertyKey"
										},
										"name": "PropertyKey",
										"package": "typescript"
									}
								],
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 740,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 741,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An array of keys of the output object. All items in the array\nwould be keys in the output array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 739,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 742,
							"name": "mapper",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Takes a key and returns the value that would be associated\nwith that key."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 743,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "from-keys.ts",
											"line": 48,
											"character": 10,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-keys.ts"
										}
									],
									"signatures": [
										{
											"id": 744,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "from-keys.ts",
													"line": 48,
													"character": 10,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-keys.ts"
												}
											],
											"parameters": [
												{
													"id": 745,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 739,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 746,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 747,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 739,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 740,
												"name": "V",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/simplify.d.ts",
							"qualifiedName": "Simplify"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "src/from-keys.ts",
									"qualifiedName": "FromKeys"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 739,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 740,
										"name": "V",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "FromKeys",
								"package": "@vinicunca/perkakas"
							}
						],
						"name": "Simplify",
						"package": "type-fest"
					}
				},
				{
					"id": 748,
					"name": "fromKeys",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an object that maps each key in "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " to the result of "
							},
							{
								"kind": "code",
								"text": "`mapper`"
							},
							{
								"kind": "text",
								"text": " for\nthat key. Duplicate keys are overwritten, guaranteeing that "
							},
							{
								"kind": "code",
								"text": "`mapper`"
							},
							{
								"kind": "text",
								"text": " is run\nfor each item in "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n"
							},
							{
								"kind": "code",
								"text": "`indexBy`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *values* and a mapper for keys.\n"
							},
							{
								"kind": "code",
								"text": "`pullObject`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items with mappers for *both* keys and values.\n"
							},
							{
								"kind": "code",
								"text": "`fromEntries`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of key-value pairs.\n"
							},
							{
								"kind": "code",
								"text": "`mapToObj`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.fromKeys(mapper)(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([\"cat\", \"dog\"], P.fromKeys(P.length())); // { cat: 3, dog: 3 } (typed as Partial<Record<\"cat\" | \"dog\", number>>)\n  P.pipe([1, 2], P.fromKeys(P.add(1))); // { 1: 2, 2: 3 } (typed as Partial<Record<1 | 2, number>>)"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "from-keys.ts",
							"line": 74,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-keys.ts"
						}
					],
					"typeParameters": [
						{
							"id": 749,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "PropertyKey"
										},
										"name": "PropertyKey",
										"package": "typescript"
									}
								],
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 750,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 751,
							"name": "mapper",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Takes a key and returns the value that would be associated\nwith that key."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 752,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "from-keys.ts",
											"line": 75,
											"character": 10,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-keys.ts"
										}
									],
									"signatures": [
										{
											"id": 753,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "from-keys.ts",
													"line": 75,
													"character": 10,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-keys.ts"
												}
											],
											"parameters": [
												{
													"id": 754,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 749,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 755,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 756,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 749,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 750,
												"name": "V",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 757,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "from-keys.ts",
									"line": 76,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/from-keys.ts"
								}
							],
							"signatures": [
								{
									"id": 758,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 759,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 749,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/simplify.d.ts",
											"qualifiedName": "Simplify"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "src/from-keys.ts",
													"qualifiedName": "FromKeys"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 749,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													},
													{
														"type": "reference",
														"target": 750,
														"name": "V",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "FromKeys",
												"package": "@vinicunca/perkakas"
											}
										],
										"name": "Simplify",
										"package": "type-fest"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 760,
			"name": "groupBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "group-by.ts",
					"line": 27,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/group-by.ts"
				},
				{
					"fileName": "group-by.ts",
					"line": 63,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/group-by.ts"
				},
				{
					"fileName": "group-by.ts",
					"line": 71,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/group-by.ts"
				}
			],
			"signatures": [
				{
					"id": 761,
					"name": "groupBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Groups the elements of a given iterable according to the string values\nreturned by a provided callback function. The returned object has separate\nproperties for each group, containing arrays with the elements in the group.\nUnlike the built in "
							},
							{
								"kind": "code",
								"text": "`Object.groupBy`"
							},
							{
								"kind": "text",
								"text": " this function also allows the callback to\nreturn "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": " in order to exclude the item from being added to any\ngroup."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "An object with properties for all groups, each assigned to an array\ncontaining the elements of the associated group."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.groupBy(data, callbackfn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.groupBy([{a: 'cat'}, {a: 'dog'}] as const, P.prop('a')) // => {cat: [{a: 'cat'}], dog: [{a: 'dog'}]}\n   P.groupBy([0, 1], x => x % 2 === 0 ? 'even' : undefined) // => {even: [0]}"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "group-by.ts",
							"line": 27,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/group-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 762,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 763,
							"name": "Key",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							},
							"default": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							}
						}
					],
					"parameters": [
						{
							"id": 764,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items to group."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 762,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 765,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the iterable.\nIt should return a value indicating the group of the current element, or\n"
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " when the item should be excluded from any group."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 766,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "group-by.ts",
											"line": 29,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/group-by.ts"
										}
									],
									"signatures": [
										{
											"id": 767,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "group-by.ts",
													"line": 29,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/group-by.ts"
												}
											],
											"parameters": [
												{
													"id": 768,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 762,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 769,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 770,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 762,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": 763,
														"name": "Key",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												]
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "ExactRecord"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 763,
								"name": "Key",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "NonEmptyArray"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 762,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "NonEmptyArray",
								"package": "@vinicunca/perkakas"
							}
						],
						"name": "ExactRecord",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 771,
					"name": "groupBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Groups the elements of a given iterable according to the string values\nreturned by a provided callback function. The returned object has separate\nproperties for each group, containing arrays with the elements in the group.\nUnlike the built in "
							},
							{
								"kind": "code",
								"text": "`Object.groupBy`"
							},
							{
								"kind": "text",
								"text": " this function also allows the callback to\nreturn "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": " in order to exclude the item from being added to any\ngroup."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "An object with properties for all groups, each assigned to an array\ncontaining the elements of the associated group."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.groupBy(callbackfn)(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [{a: 'cat'}, {a: 'dog'}] as const,\n     P.groupBy(P.prop('a')),\n   ); // => {cat: [{a: 'cat'}], dog: [{a: 'dog'}]}\n   P.pipe(\n     [0, 1],\n     P.groupBy(x => x % 2 === 0 ? 'even' : undefined),\n   ); // => {even: [0]}"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "group-by.ts",
							"line": 63,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/group-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 772,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 773,
							"name": "Key",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							},
							"default": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							}
						}
					],
					"parameters": [
						{
							"id": 774,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the iterable.\nIt should return a value indicating the group of the current element, or\n"
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " when the item should be excluded from any group."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 775,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "group-by.ts",
											"line": 64,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/group-by.ts"
										}
									],
									"signatures": [
										{
											"id": 776,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "group-by.ts",
													"line": 64,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/group-by.ts"
												}
											],
											"parameters": [
												{
													"id": 777,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 772,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 778,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 779,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 772,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": 773,
														"name": "Key",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												]
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 780,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "group-by.ts",
									"line": 69,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/group-by.ts"
								}
							],
							"signatures": [
								{
									"id": 781,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 782,
											"name": "items",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 772,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "ExactRecord"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 773,
												"name": "Key",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "NonEmptyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 772,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "NonEmptyArray",
												"package": "@vinicunca/perkakas"
											}
										],
										"name": "ExactRecord",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 783,
			"name": "hasAtLeast",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "has-at-least.ts",
					"line": 69,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/has-at-least.ts"
				},
				{
					"fileName": "has-at-least.ts",
					"line": 99,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/has-at-least.ts"
				}
			],
			"signatures": [
				{
					"id": 784,
					"name": "hasAtLeast",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Checks if the given array has at least the defined number of elements. When\nthe minimum used is a literal (e.g. "
							},
							{
								"kind": "code",
								"text": "`3`"
							},
							{
								"kind": "text",
								"text": ") the output is refined accordingly so\nthat those indices are defined when accessing the array even when using\ntypescript's 'noUncheckedIndexAccess'."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the array's length is *at least* "
									},
									{
										"kind": "code",
										"text": "`minimum`"
									},
									{
										"kind": "text",
										"text": ". When "
									},
									{
										"kind": "code",
										"text": "`minimum`"
									},
									{
										"kind": "text",
										"text": "\nis a literal value, the output is narrowed to ensure the first items are\nguaranteed."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.hasAtLeast(data, minimum)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.hasAtLeast([], 4); // => false\n\n  const data: number[] = [1,2,3,4];\n  P.hasAtLeast(data, 1); // => true\n  data[0]; // 1, with type "
									},
									{
										"kind": "code",
										"text": "`number`"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "has-at-least.ts",
							"line": 69,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/has-at-least.ts"
						}
					],
					"typeParameters": [
						{
							"id": 785,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 786,
							"name": "N",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"parameters": [
						{
							"id": 787,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The input array."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "IterableContainer"
										},
										"name": "IterableContainer",
										"package": "@vinicunca/perkakas"
									},
									{
										"type": "reference",
										"target": 785,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						},
						{
							"id": 788,
							"name": "minimum",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The minimum number of elements the array must have."
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/is-literal.d.ts",
										"qualifiedName": "IsNumericLiteral"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": 786,
											"name": "N",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									],
									"name": "IsNumericLiteral",
									"package": "type-fest"
								},
								"extendsType": {
									"type": "literal",
									"value": true
								},
								"trueType": {
									"type": "reference",
									"target": 786,
									"name": "N",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "intrinsic",
									"name": "never"
								}
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/has-at-least.ts",
								"qualifiedName": "ArraySetRequired"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 785,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								{
									"type": "reference",
									"target": 786,
									"name": "N",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								{
									"type": "tuple"
								}
							],
							"name": "ArraySetRequired",
							"package": "@vinicunca/perkakas"
						}
					}
				},
				{
					"id": 792,
					"name": "hasAtLeast",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Checks if the given array has at least the defined number of elements. When\nthe minimum used is a literal (e.g. "
							},
							{
								"kind": "code",
								"text": "`3`"
							},
							{
								"kind": "text",
								"text": ") the output is refined accordingly so\nthat those indices are defined when accessing the array even when using\ntypescript's 'noUncheckedIndexAccess'."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the array's length is *at least* "
									},
									{
										"kind": "code",
										"text": "`minimum`"
									},
									{
										"kind": "text",
										"text": ". When "
									},
									{
										"kind": "code",
										"text": "`minimum`"
									},
									{
										"kind": "text",
										"text": "\nis a literal value, the output is narrowed to ensure the first items are\nguaranteed."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.hasAtLeast(minimum)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([], P.hasAtLeast(4)); // => false\n\n  const data = [[1,2], [3], [4,5]];\n  P.pipe(\n    data,\n    P.filter(P.hasAtLeast(2)),\n    P.map(([, second]) => second),\n  ); // => [2,5], with type "
									},
									{
										"kind": "code",
										"text": "`number[]`"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "has-at-least.ts",
							"line": 99,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/has-at-least.ts"
						}
					],
					"typeParameters": [
						{
							"id": 793,
							"name": "N",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"parameters": [
						{
							"id": 794,
							"name": "minimum",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The minimum number of elements the array must have."
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/is-literal.d.ts",
										"qualifiedName": "IsNumericLiteral"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": 793,
											"name": "N",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									],
									"name": "IsNumericLiteral",
									"package": "type-fest"
								},
								"extendsType": {
									"type": "literal",
									"value": true
								},
								"trueType": {
									"type": "reference",
									"target": 793,
									"name": "N",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "intrinsic",
									"name": "never"
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 795,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "has-at-least.ts",
									"line": 101,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/has-at-least.ts"
								}
							],
							"signatures": [
								{
									"id": 796,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 798,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 797,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "IterableContainer"
														},
														"name": "IterableContainer",
														"package": "@vinicunca/perkakas"
													},
													{
														"type": "reference",
														"target": 798,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												]
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "data",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": {
												"sourceFileName": "src/has-at-least.ts",
												"qualifiedName": "ArraySetRequired"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 798,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												},
												{
													"type": "reference",
													"target": 793,
													"name": "N",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "ArraySetRequired",
											"package": "@vinicunca/perkakas"
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 804,
			"name": "hasSubObject",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "has-sub-object.ts",
					"line": 80,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/has-sub-object.ts"
				},
				{
					"fileName": "has-sub-object.ts",
					"line": 100,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/has-sub-object.ts"
				},
				{
					"fileName": "has-sub-object.ts",
					"line": 106,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/has-sub-object.ts"
				}
			],
			"signatures": [
				{
					"id": 805,
					"name": "hasSubObject",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Checks if "
							},
							{
								"kind": "code",
								"text": "`subObject`"
							},
							{
								"kind": "text",
								"text": " is a sub-object of "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": ", which means for every\nproperty and value in "
							},
							{
								"kind": "code",
								"text": "`subObject`"
							},
							{
								"kind": "text",
								"text": ", there's the same property in "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": "\nwith an equal value. Equality is checked with "
							},
							{
								"kind": "code",
								"text": "`isDeepEqual`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.hasSubObject(data, subObject)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.hasSubObject({ a: 1, b: 2, c: 3 }, { a: 1, c: 3 }) //=> true\n   P.hasSubObject({ a: 1, b: 2, c: 3 }, { b: 4 }) //=> false\n   P.hasSubObject({ a: 1, b: 2, c: 3 }, {}) //=> true"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "has-sub-object.ts",
							"line": 80,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/has-sub-object.ts"
						}
					],
					"typeParameters": [
						{
							"id": 806,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "PropertyKey"
										},
										"name": "PropertyKey",
										"package": "typescript"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						},
						{
							"id": 807,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/has-sub-object.ts",
									"qualifiedName": "HasSubObjectSubObject"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 807,
										"name": "S",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 806,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Required"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 807,
												"name": "S",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Required",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Required"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 806,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Required",
										"package": "typescript"
									}
								],
								"name": "HasSubObjectSubObject",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 808,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The object to test."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 806,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 809,
							"name": "subObject",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The sub-object to test against."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 807,
								"name": "S",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "mapped",
							"parameter": "KeyType",
							"parameterType": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							},
							"templateType": {
								"type": "indexedAccess",
								"indexType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/simplify.d.ts",
										"qualifiedName": "KeyType"
									},
									"name": "KeyType",
									"package": "type-fest",
									"refersToTypeParameter": true
								},
								"objectType": {
									"type": "reference",
									"target": {
										"sourceFileName": "src/helpers/types.ts",
										"qualifiedName": "Branded"
									},
									"typeArguments": [
										{
											"type": "intersection",
											"types": [
												{
													"type": "reference",
													"target": 807,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												},
												{
													"type": "reference",
													"target": 806,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											]
										},
										{
											"type": "query",
											"queryType": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/has-sub-object.ts",
													"qualifiedName": "HAS_SUB_OBJECT_BRAND"
												},
												"name": "HAS_SUB_OBJECT_BRAND",
												"package": "@vinicunca/perkakas",
												"preferValues": true
											}
										}
									],
									"name": "Branded",
									"package": "@vinicunca/perkakas"
								}
							}
						}
					}
				},
				{
					"id": 810,
					"name": "hasSubObject",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Checks if "
							},
							{
								"kind": "code",
								"text": "`subObject`"
							},
							{
								"kind": "text",
								"text": " is a sub-object of "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": ", which means for every\nproperty and value in "
							},
							{
								"kind": "code",
								"text": "`subObject`"
							},
							{
								"kind": "text",
								"text": ", there's the same property in "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": "\nwith an equal value. Equality is checked with "
							},
							{
								"kind": "code",
								"text": "`isDeepEqual`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.hasSubObject(subObject)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.hasSubObject({ a: 1, c: 3 })({ a: 1, b: 2, c: 3 }) //=> true\n   P.hasSubObject({ b: 4 })({ a: 1, b: 2, c: 3 }) //=> false\n   P.hasSubObject({})({ a: 1, b: 2, c: 3 }) //=> true"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "has-sub-object.ts",
							"line": 100,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/has-sub-object.ts"
						}
					],
					"typeParameters": [
						{
							"id": 811,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "PropertyKey"
										},
										"name": "PropertyKey",
										"package": "typescript"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					],
					"parameters": [
						{
							"id": 812,
							"name": "subObject",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The sub-object to test against."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 811,
								"name": "S",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 813,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "has-sub-object.ts",
									"line": 102,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/has-sub-object.ts"
								}
							],
							"signatures": [
								{
									"id": 814,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 816,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/has-sub-object.ts",
													"qualifiedName": "HasSubObjectData"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 816,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													},
													{
														"type": "reference",
														"target": 811,
														"name": "S",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "HasSubObjectData",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 815,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 816,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "data",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": {
												"sourceFileName": "src/has-sub-object.ts",
												"qualifiedName": "HasSubObjectGuard"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 816,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												},
												{
													"type": "reference",
													"target": 811,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "HasSubObjectGuard",
											"package": "@vinicunca/perkakas"
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 817,
			"name": "humanReadableFileSize",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "human-readable-file-size.ts",
					"line": 13,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/human-readable-file-size.ts"
				}
			],
			"signatures": [
				{
					"id": 818,
					"name": "humanReadableFileSize",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns human readable file size."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.humanReadableFileSize(bytes, base)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.humanReadableFileSize(1000); // => '1.0 kB'\n P.humanReadableFileSize(2097152, 1024); // => '2.0 Mib'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "human-readable-file-size.ts",
							"line": 13,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/human-readable-file-size.ts"
						}
					],
					"parameters": [
						{
							"id": 819,
							"name": "bytes",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the file size in bytes"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 820,
							"name": "base",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the base (1000 or 1024)"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": 1000
									},
									{
										"type": "literal",
										"value": 1024
									}
								]
							},
							"defaultValue": "1000"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 821,
			"name": "identity",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "identity.ts",
					"line": 17,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/identity.ts"
				}
			],
			"signatures": [
				{
					"id": 822,
					"name": "identity",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that returns the first argument passed to it.\n\nNotice that this is a dataLast impl where the function needs to be invoked\nto get the \"do nothing\" function.\n\nSee also:\n"
							},
							{
								"kind": "code",
								"text": "`doNothing`"
							},
							{
								"kind": "text",
								"text": " - A function that doesn't return anything.\n"
							},
							{
								"kind": "code",
								"text": "`constant`"
							},
							{
								"kind": "text",
								"text": " - A function that ignores the input arguments and returns the same value on every invocation."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.identity();"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.map([1,2,3], P.identity()); // => [1,2,3]"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "identity.ts",
							"line": 17,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/identity.ts"
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/identity.ts",
								"qualifiedName": "identityImplementation"
							},
							"name": "identityImplementation",
							"package": "@vinicunca/perkakas",
							"preferValues": true
						}
					}
				}
			]
		},
		{
			"id": 823,
			"name": "indexBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "index-by.ts",
					"line": 26,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/index-by.ts"
				},
				{
					"fileName": "index-by.ts",
					"line": 54,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/index-by.ts"
				},
				{
					"fileName": "index-by.ts",
					"line": 58,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/index-by.ts"
				}
			],
			"signatures": [
				{
					"id": 824,
					"name": "indexBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Converts a list of objects into an object indexing the objects by the given\nkey.\n\nThere are several other functions that could be used to build an object from\nan array:\n"
							},
							{
								"kind": "code",
								"text": "`fromKeys`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *keys* and a mapper for values.\n"
							},
							{
								"kind": "code",
								"text": "`pullObject`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items with mappers for *both* keys and values.\n"
							},
							{
								"kind": "code",
								"text": "`fromEntries`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of key-value pairs.\n"
							},
							{
								"kind": "code",
								"text": "`mapToObj`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.indexBy(array, fn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.indexBy(['one', 'two', 'three'], x => x.length) // => {3: 'two', 5: 'three'}"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "index-by.ts",
							"line": 26,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/index-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 825,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 826,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							}
						}
					],
					"parameters": [
						{
							"id": 827,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 825,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 828,
							"name": "mapper",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The indexing function."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 829,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "index-by.ts",
											"line": 28,
											"character": 10,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/index-by.ts"
										}
									],
									"signatures": [
										{
											"id": 830,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "index-by.ts",
													"line": 28,
													"character": 10,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/index-by.ts"
												}
											],
											"parameters": [
												{
													"id": 831,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 825,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 832,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 833,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 825,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 826,
												"name": "K",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "ExactRecord"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 826,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 825,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "ExactRecord",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 834,
					"name": "indexBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Converts a list of objects into an object indexing the objects by the given\nkey.\n\nThere are several other functions that could be used to build an object from\nan array:\n"
							},
							{
								"kind": "code",
								"text": "`fromKeys`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *keys* and a mapper for values.\n"
							},
							{
								"kind": "code",
								"text": "`pullObject`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items with mappers for *both* keys and values.\n"
							},
							{
								"kind": "code",
								"text": "`fromEntries`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of key-value pairs.\n"
							},
							{
								"kind": "code",
								"text": "`mapToObj`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.indexBy(fn)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     ['one', 'two', 'three'],\n     P.indexBy(x => x.length)\n   ) // => {3: 'two', 5: 'three'}"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "index-by.ts",
							"line": 54,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/index-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 835,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 836,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							}
						}
					],
					"parameters": [
						{
							"id": 837,
							"name": "mapper",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The indexing function."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 838,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "index-by.ts",
											"line": 55,
											"character": 10,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/index-by.ts"
										}
									],
									"signatures": [
										{
											"id": 839,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "index-by.ts",
													"line": 55,
													"character": 10,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/index-by.ts"
												}
											],
											"parameters": [
												{
													"id": 840,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 835,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 841,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 842,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 835,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 836,
												"name": "K",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 843,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "index-by.ts",
									"line": 56,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/index-by.ts"
								}
							],
							"signatures": [
								{
									"id": 844,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 845,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 835,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "ExactRecord"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 836,
												"name": "K",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 835,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "ExactRecord",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 846,
			"name": "intersection",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "intersection.ts",
					"line": 22,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/intersection.ts"
				},
				{
					"fileName": "intersection.ts",
					"line": 42,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/intersection.ts"
				},
				{
					"fileName": "intersection.ts",
					"line": 46,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/intersection.ts"
				}
			],
			"signatures": [
				{
					"id": 847,
					"name": "intersection",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a list of elements that exist in both array. The output maintains the\nsame order as the input. The inputs are treated as multi-sets/bags (multiple\ncopies of items are treated as unique items)."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.intersection(data, other)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.intersection([1, 2, 3], [2, 3, 5]); // => [2, 3]\n   P.intersection([1, 1, 2, 2], [1]); // => [1]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "intersection.ts",
							"line": 22,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/intersection.ts"
						}
					],
					"typeParameters": [
						{
							"id": 848,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 849,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 850,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The input items."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 848,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 851,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items to compare against."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 849,
										"name": "S",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intersection",
							"types": [
								{
									"type": "reference",
									"target": 849,
									"name": "S",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								{
									"type": "reference",
									"target": 848,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							]
						}
					}
				},
				{
					"id": 852,
					"name": "intersection",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a list of elements that exist in both array. The output maintains the\nsame order as the input. The inputs are treated as multi-sets/bags (multiple\ncopies of items are treated as unique items)."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.intersection(other)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 3], P.intersection([2, 3, 5])); // => [2, 3]\n   P.pipe([1, 1, 2, 2], P.intersection([1])); // => [1]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "intersection.ts",
							"line": 42,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/intersection.ts"
						}
					],
					"typeParameters": [
						{
							"id": 853,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 854,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items to compare against."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 853,
										"name": "S",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 855,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "intersection.ts",
									"line": 44,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/intersection.ts"
								}
							],
							"signatures": [
								{
									"id": 856,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 858,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 857,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 858,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intersection",
											"types": [
												{
													"type": "reference",
													"target": 853,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												},
												{
													"type": "reference",
													"target": 858,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											]
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 859,
			"name": "intersectionWith",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "intersection-with.ts",
					"line": 30,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/intersection-with.ts"
				},
				{
					"fileName": "intersection-with.ts",
					"line": 56,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/intersection-with.ts"
				},
				{
					"fileName": "intersection-with.ts",
					"line": 65,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/intersection-with.ts"
				}
			],
			"signatures": [
				{
					"id": 860,
					"name": "intersectionWith",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a list of intersecting values based on a custom\ncomparator function that compares elements of both arrays."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.intersectionWith(array, other, comparator)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.intersectionWith(\n     [\n       { id: 1, name: 'Ryan' },\n       { id: 3, name: 'Emma' },\n     ],\n     [3, 5],\n     (a, b) => a.id === b,\n   ) // => [{ id: 3, name: 'Emma' }]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "intersection-with.ts",
							"line": 30,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/intersection-with.ts"
						}
					],
					"typeParameters": [
						{
							"id": 861,
							"name": "TFirst",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 862,
							"name": "TSecond",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 863,
							"name": "array",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The source array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 861,
										"name": "TFirst",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 864,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 862,
										"name": "TSecond",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 865,
							"name": "comparator",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The custom comparator."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/intersection-with.ts",
									"qualifiedName": "Comparator"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 861,
										"name": "TFirst",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 862,
										"name": "TSecond",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Comparator",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 861,
							"name": "TFirst",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 866,
					"name": "intersectionWith",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a list of intersecting values based on a custom\ncomparator function that compares elements of both arrays."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.intersectionWith(other, comparator)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.intersectionWith(\n     [3, 5],\n     (a, b) => a.id === b\n     )([\n       { id: 1, name: 'Ryan' },\n       { id: 3, name: 'Emma' },\n     ]); // => [{ id: 3, name: 'Emma' }]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "intersection-with.ts",
							"line": 56,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/intersection-with.ts"
						}
					],
					"typeParameters": [
						{
							"id": 867,
							"name": "TFirst",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 868,
							"name": "TSecond",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 869,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 868,
										"name": "TSecond",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 870,
							"name": "comparator",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The custom comparator."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/intersection-with.ts",
									"qualifiedName": "Comparator"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 867,
										"name": "TFirst",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 868,
										"name": "TSecond",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Comparator",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 871,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "intersection-with.ts",
									"line": 63,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/intersection-with.ts"
								}
							],
							"signatures": [
								{
									"id": 872,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 873,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 867,
														"name": "TFirst",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 867,
											"name": "TFirst",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 874,
			"name": "invert",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "invert.ts",
					"line": 25,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/invert.ts"
				},
				{
					"fileName": "invert.ts",
					"line": 38,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/invert.ts"
				},
				{
					"fileName": "invert.ts",
					"line": 40,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/invert.ts"
				}
			],
			"signatures": [
				{
					"id": 875,
					"name": "invert",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns an object whose keys and values are swapped. If the object contains duplicate values,\nsubsequent values will overwrite previous values."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.invert(object)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.invert({ a: \"d\", b: \"e\", c: \"f\" }) // => { d: \"a\", e: \"b\", f: \"c\" }"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "invert.ts",
							"line": 25,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/invert.ts"
						}
					],
					"typeParameters": [
						{
							"id": 876,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"parameters": [
						{
							"id": 877,
							"name": "object",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The object."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 876,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/invert.ts",
							"qualifiedName": "Inverted"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 876,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Inverted",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 878,
					"name": "invert",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns an object whose keys and values are swapped. If the object contains duplicate values,\nsubsequent values will overwrite previous values."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.invert()(object)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe({ a: \"d\", b: \"e\", c: \"f\" }, P.invert()); // => { d: \"a\", e: \"b\", f: \"c\" }"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "invert.ts",
							"line": 38,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/invert.ts"
						}
					],
					"typeParameters": [
						{
							"id": 879,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 880,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "invert.ts",
									"line": 38,
									"character": 44,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/invert.ts"
								}
							],
							"signatures": [
								{
									"id": 881,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 882,
											"name": "object",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 879,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/invert.ts",
											"qualifiedName": "Inverted"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 879,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Inverted",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 883,
			"name": "isArray",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-array.ts",
					"line": 16,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-array.ts"
				}
			],
			"signatures": [
				{
					"id": 884,
					"name": "isArray",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is an Array and narrows its type accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is an Array, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isArray(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isArray([5]) //=> true\n   P.isArray([]) //=> true\n   P.isArray('somethingElse') //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-array.ts",
							"line": 16,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-array.ts"
						}
					],
					"typeParameters": [
						{
							"id": 885,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 886,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "ArrayLike"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "ArrayLike",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": 885,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/helpers/types.ts",
								"qualifiedName": "NarrowedTo"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 885,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								{
									"type": "typeOperator",
									"operator": "readonly",
									"target": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "unknown"
										}
									}
								}
							],
							"name": "NarrowedTo",
							"package": "@vinicunca/perkakas"
						}
					}
				}
			]
		},
		{
			"id": 887,
			"name": "isBigInt",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-big-int.ts",
					"line": 17,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-big-int.ts"
				}
			],
			"signatures": [
				{
					"id": 888,
					"name": "isBigInt",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is a bigint and narrows its\ntype accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is a number, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isBigInt(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isBigInt(1n); // => true\n   P.isBigInt(1); // => false\n   P.isBigInt('notANumber'); // => false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-big-int.ts",
							"line": 17,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-big-int.ts"
						}
					],
					"typeParameters": [
						{
							"id": 889,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 890,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "bigint"
									},
									{
										"type": "reference",
										"target": 889,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/helpers/types.ts",
								"qualifiedName": "NarrowedTo"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 889,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								{
									"type": "intrinsic",
									"name": "bigint"
								}
							],
							"name": "NarrowedTo",
							"package": "@vinicunca/perkakas"
						}
					}
				}
			]
		},
		{
			"id": 891,
			"name": "isBoolean",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-boolean.ts",
					"line": 16,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-boolean.ts"
				}
			],
			"signatures": [
				{
					"id": 892,
					"name": "isBoolean",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is a boolean and narrows its type accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is a boolean, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isBoolean(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isBoolean(true) //=> true\n   P.isBoolean(false) //=> true\n   P.isBoolean('somethingElse') //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-boolean.ts",
							"line": 16,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-boolean.ts"
						}
					],
					"typeParameters": [
						{
							"id": 893,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 894,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"target": 893,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/helpers/types.ts",
								"qualifiedName": "NarrowedTo"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 893,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								{
									"type": "intrinsic",
									"name": "boolean"
								}
							],
							"name": "NarrowedTo",
							"package": "@vinicunca/perkakas"
						}
					}
				}
			]
		},
		{
			"id": 895,
			"name": "isDate",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-date.ts",
					"line": 13,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-date.ts"
				}
			],
			"signatures": [
				{
					"id": 896,
					"name": "isDate",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is a Date and narrows its type accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is a Date, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isDate(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isDate(new Date()) //=> true\n   P.isDate('somethingElse') //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-date.ts",
							"line": 13,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-date.ts"
						}
					],
					"parameters": [
						{
							"id": 897,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "unknown"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
								"qualifiedName": "Date"
							},
							"name": "Date",
							"package": "typescript"
						}
					}
				}
			]
		},
		{
			"id": 898,
			"name": "isDeepEqual",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-deep-equal.ts",
					"line": 35,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-deep-equal.ts"
				},
				{
					"fileName": "is-deep-equal.ts",
					"line": 72,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-deep-equal.ts"
				}
			],
			"signatures": [
				{
					"id": 899,
					"name": "isDeepEqual",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Performs a *deep structural* comparison between two values to determine if\nthey are equivalent. For primitive values this is equivalent to "
							},
							{
								"kind": "code",
								"text": "`===`"
							},
							{
								"kind": "text",
								"text": ", for\narrays the check would be performed on every item recursively, in order, and\nfor objects all props will be compared recursively.\n\nThe built-in Date and RegExp are special-cased and will be compared by their\nvalues.\n\n!IMPORTANT: TypedArrays and symbol properties of objects are not supported\nright now and might result in unexpected behavior.\n\nThe result would be narrowed to the second value so that the function can be\nused as a type guard.\n\nSee:\n- "
							},
							{
								"kind": "code",
								"text": "`isStrictEqual`"
							},
							{
								"kind": "text",
								"text": " if you don't need a deep comparison and just want to\ncheck for simple ("
							},
							{
								"kind": "code",
								"text": "`===`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`Object.is`"
							},
							{
								"kind": "text",
								"text": ") equality.\n- "
							},
							{
								"kind": "code",
								"text": "`isShallowEqual`"
							},
							{
								"kind": "text",
								"text": " if you need to compare arrays and objects \"by-value\" but\ndon't want to recurse into their values."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isDeepEqual(data, other)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isDeepEqual(1, 1) //=> true\n   P.isDeepEqual(1, '1') //=> false\n   P.isDeepEqual([1, 2, 3], [1, 2, 3]) //=> true"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "is-deep-equal.ts",
							"line": 35,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-deep-equal.ts"
						}
					],
					"typeParameters": [
						{
							"id": 900,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 901,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 902,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The first value to compare."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 900,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 903,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second value to compare."
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 900,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Exclude"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": 900,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										},
										{
											"type": "reference",
											"target": 901,
											"name": "S",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									],
									"name": "Exclude",
									"package": "typescript"
								},
								"trueType": {
									"type": "reference",
									"target": 901,
									"name": "S",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "intrinsic",
									"name": "never"
								}
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": 901,
							"name": "S",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 909,
					"name": "isDeepEqual",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Performs a *deep structural* comparison between two values to determine if\nthey are equivalent. For primitive values this is equivalent to "
							},
							{
								"kind": "code",
								"text": "`===`"
							},
							{
								"kind": "text",
								"text": ", for\narrays the check would be performed on every item recursively, in order, and\nfor objects all props will be compared recursively.\n\nThe built-in Date and RegExp are special-cased and will be compared by their\nvalues.\n\n!IMPORTANT: TypedArrays and symbol properties of objects are not supported\nright now and might result in unexpected behavior.\n\nThe result would be narrowed to the second value so that the function can be\nused as a type guard.\n\nSee:\n- "
							},
							{
								"kind": "code",
								"text": "`isStrictEqual`"
							},
							{
								"kind": "text",
								"text": " if you don't need a deep comparison and just want to\ncheck for simple ("
							},
							{
								"kind": "code",
								"text": "`===`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`Object.is`"
							},
							{
								"kind": "text",
								"text": ") equality.\n- "
							},
							{
								"kind": "code",
								"text": "`isShallowEqual`"
							},
							{
								"kind": "text",
								"text": " if you need to compare arrays and objects \"by-value\" but\ndon't want to recurse into their values."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isDeepEqual(other)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(1, P.isDeepEqual(1)); //=> true\n   P.pipe(1, P.isDeepEqual('1')); //=> false\n   P.pipe([1, 2, 3], P.isDeepEqual([1, 2, 3])); //=> true"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "is-deep-equal.ts",
							"line": 72,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-deep-equal.ts"
						}
					],
					"typeParameters": [
						{
							"id": 910,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 911,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 912,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second value to compare."
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 910,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Exclude"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": 910,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										},
										{
											"type": "reference",
											"target": 911,
											"name": "S",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									],
									"name": "Exclude",
									"package": "typescript"
								},
								"trueType": {
									"type": "reference",
									"target": 911,
									"name": "S",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "intrinsic",
									"name": "never"
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 913,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "is-deep-equal.ts",
									"line": 74,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-deep-equal.ts"
								}
							],
							"signatures": [
								{
									"id": 914,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 915,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 910,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "data",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": 911,
											"name": "S",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 923,
			"name": "isDefined",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-defined.ts",
					"line": 15,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-defined.ts"
				}
			],
			"signatures": [
				{
					"id": 924,
					"name": "isDefined",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is defined ("
							},
							{
								"kind": "code",
								"text": "`!== undefined`"
							},
							{
								"kind": "text",
								"text": ")\nand narrows its type accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is defined, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isDefined(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isDefined('string') //=> true\n   P.isDefined(null) //=> true\n   P.isDefined(undefined) //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-defined.ts",
							"line": 15,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-defined.ts"
						}
					],
					"typeParameters": [
						{
							"id": 925,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 926,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"target": 925,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": 925,
							"name": "T",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				}
			]
		},
		{
			"id": 927,
			"name": "isEmpty",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-empty.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-empty.ts"
				}
			],
			"signatures": [
				{
					"id": 928,
					"name": "isEmpty",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is empty.\n\n"
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": " is also considered empty, but only when it's in a union with a\n"
							},
							{
								"kind": "code",
								"text": "`string`"
							},
							{
								"kind": "text",
								"text": " or string-like type.\n\nThis guard doesn't work negated because of typescript limitations! If you\nneed to check that an array is *not* empty, use "
							},
							{
								"kind": "code",
								"text": "`P.hasAtLeast(data, 1)`"
							},
							{
								"kind": "text",
								"text": "\nand not "
							},
							{
								"kind": "code",
								"text": "`!P.isEmpty(data)`"
							},
							{
								"kind": "text",
								"text": ". For strings and objects there's no way in\ntypescript to narrow the result to a non-empty type."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is empty, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isEmpty(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isEmpty(undefined) //=>true\n   P.isEmpty('') //=> true\n   P.isEmpty([]) //=> true\n   P.isEmpty({}) //=> true\n   P.isEmpty('test') //=> false\n   P.isEmpty([1, 2, 3]) //=> false\n   P.isEmpty({ length: 0 }) //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-empty.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-empty.ts"
						}
					],
					"typeParameters": [
						{
							"id": 929,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 930,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 929,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "union",
							"types": [
								{
									"type": "conditional",
									"checkType": {
										"type": "literal",
										"value": ""
									},
									"extendsType": {
										"type": "reference",
										"target": 929,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									"trueType": {
										"type": "literal",
										"value": ""
									},
									"falseType": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"type": "conditional",
									"checkType": {
										"type": "intrinsic",
										"name": "undefined"
									},
									"extendsType": {
										"type": "reference",
										"target": 929,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									"trueType": {
										"type": "intrinsic",
										"name": "undefined"
									},
									"falseType": {
										"type": "intrinsic",
										"name": "never"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 936,
			"name": "isError",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-error.ts",
					"line": 15,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-error.ts"
				}
			],
			"signatures": [
				{
					"id": 937,
					"name": "isError",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is an Error and narrows its type accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is an Error, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isError(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isError(new Error('message')) //=> true\n   P.isError('somethingElse') //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-error.ts",
							"line": 15,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-error.ts"
						}
					],
					"typeParameters": [
						{
							"id": 938,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 939,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Error"
										},
										"name": "Error",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": 938,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/is-error.ts",
								"qualifiedName": "DefinitelyError"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 938,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							],
							"name": "DefinitelyError",
							"package": "@vinicunca/perkakas"
						}
					}
				}
			]
		},
		{
			"id": 940,
			"name": "isFunction",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-function.ts",
					"line": 19,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-function.ts"
				}
			],
			"signatures": [
				{
					"id": 941,
					"name": "isFunction",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is a Function and narrows its type accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is a Function, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isFunction(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isFunction(() => {}) //=> true\n   P.isFunction('somethingElse') //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-function.ts",
							"line": 19,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-function.ts"
						}
					],
					"typeParameters": [
						{
							"id": 942,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 943,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": 942,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/is-function.ts",
								"qualifiedName": "DefinitelyFunction"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 942,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							],
							"name": "DefinitelyFunction",
							"package": "@vinicunca/perkakas"
						}
					}
				}
			]
		},
		{
			"id": 944,
			"name": "isIncludedIn",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-included-in.ts",
					"line": 96,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-included-in.ts"
				},
				{
					"fileName": "is-included-in.ts",
					"line": 132,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-included-in.ts"
				}
			],
			"signatures": [
				{
					"id": 945,
					"name": "isIncludedIn",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Checks if the item is included in the container. This is a wrapper around\n"
							},
							{
								"kind": "code",
								"text": "`Array.prototype.includes`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`Set.prototype.has`"
							},
							{
								"kind": "text",
								"text": " and thus relies on the\nsame equality checks that those functions do (which is reference equality,\ne.g. "
							},
							{
								"kind": "code",
								"text": "`===`"
							},
							{
								"kind": "text",
								"text": "). In some cases the input's type is also narrowed to the\ncontainer's item types.\n\nNotice that unlike most functions, this function takes a generic item as it's\ndata and **an array** as it's parameter."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the item is in the container, or "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise. In\ncases the type of "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " is also narrowed down."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isIncludedIn(data, container);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isIncludedIn(2, [1, 2, 3]); // => true\n  P.isIncludedIn(4, [1, 2, 3]); // => false\n\n  const data = \"cat\" as \"cat\" | \"dog\" | \"mouse\";\n  P.isIncludedIn(data, [\"cat\", \"dog\"] as const); // true (typed \"cat\" | \"dog\");"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "is-included-in.ts",
							"line": 96,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-included-in.ts"
						}
					],
					"typeParameters": [
						{
							"id": 946,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 947,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 946,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 948,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The item that is checked."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 946,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 949,
							"name": "container",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items that are checked against."
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": {
										"sourceFileName": "src/is-included-in.ts",
										"qualifiedName": "IsNarrowable"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": 946,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										},
										{
											"type": "reference",
											"target": 947,
											"name": "S",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									],
									"name": "IsNarrowable",
									"package": "@vinicunca/perkakas"
								},
								"extendsType": {
									"type": "literal",
									"value": true
								},
								"trueType": {
									"type": "reference",
									"target": 947,
									"name": "S",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "intrinsic",
									"name": "never"
								}
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "intrinsic",
								"name": "number"
							},
							"objectType": {
								"type": "reference",
								"target": 947,
								"name": "S",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					}
				},
				{
					"id": 955,
					"name": "isIncludedIn",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Checks if the item is included in the container. This is a wrapper around\n"
							},
							{
								"kind": "code",
								"text": "`Array.prototype.includes`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`Set.prototype.has`"
							},
							{
								"kind": "text",
								"text": " and thus relies on the\nsame equality checks that those functions do (which is reference equality,\ne.g. "
							},
							{
								"kind": "code",
								"text": "`===`"
							},
							{
								"kind": "text",
								"text": "). In some cases the input's type is also narrowed to the\ncontainer's item types.\n\nNotice that unlike most functions, this function takes a generic item as it's\ndata and **an array** as it's parameter."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the item is in the container, or "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise. In\ncases the type of "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " is also narrowed down."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isIncludedIn(container)(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(2, P.isIncludedIn([1, 2, 3])); // => true\n  P.pipe(4, P.isIncludedIn([1, 2, 3])); // => false\n\n  const data = \"cat\" as \"cat\" | \"dog\" | \"mouse\";\n  P.pipe(\n    data,\n    P.isIncludedIn([\"cat\", \"dog\"] as const),\n  ); // => true (typed \"cat\" | \"dog\");"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "is-included-in.ts",
							"line": 132,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-included-in.ts"
						}
					],
					"typeParameters": [
						{
							"id": 956,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 957,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 956,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 958,
							"name": "container",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items that are checked against."
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": {
										"sourceFileName": "src/is-included-in.ts",
										"qualifiedName": "IsNarrowable"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": 956,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										},
										{
											"type": "reference",
											"target": 957,
											"name": "S",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									],
									"name": "IsNarrowable",
									"package": "@vinicunca/perkakas"
								},
								"extendsType": {
									"type": "literal",
									"value": true
								},
								"trueType": {
									"type": "reference",
									"target": 957,
									"name": "S",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "intrinsic",
									"name": "never"
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 959,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "is-included-in.ts",
									"line": 134,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-included-in.ts"
								}
							],
							"signatures": [
								{
									"id": 960,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 961,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 956,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "data",
										"asserts": false,
										"targetType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "intrinsic",
												"name": "number"
											},
											"objectType": {
												"type": "reference",
												"target": 957,
												"name": "S",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 969,
			"name": "isNonNull",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-non-null.ts",
					"line": 15,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-non-null.ts"
				}
			],
			"signatures": [
				{
					"id": 970,
					"name": "isNonNull",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is not "
							},
							{
								"kind": "code",
								"text": "`null`"
							},
							{
								"kind": "text",
								"text": " and narrows its type accordingly.\nNotice that "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": " is not null!"
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is defined, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isNonNull(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isNonNull('string') //=> true\n   P.isNonNull(null) //=> false\n   P.isNonNull(undefined) //=> true"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-non-null.ts",
							"line": 15,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-non-null.ts"
						}
					],
					"typeParameters": [
						{
							"id": 971,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 972,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": 971,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": 971,
							"name": "T",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				}
			]
		},
		{
			"id": 973,
			"name": "isNonNullish",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-non-nullish.ts",
					"line": 16,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-non-nullish.ts"
				}
			],
			"signatures": [
				{
					"id": 974,
					"name": "isNonNullish",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is defined *AND* isn't "
							},
							{
								"kind": "code",
								"text": "`null`"
							},
							{
								"kind": "text",
								"text": "\nand narrows its type accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is defined and isn't "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": ", false\notherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isNonNullish(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isNonNullish('string') //=> true\n   P.isNonNullish(null) //=> false\n   P.isNonNullish(undefined) //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-non-nullish.ts",
							"line": 16,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-non-nullish.ts"
						}
					],
					"typeParameters": [
						{
							"id": 975,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 976,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 975,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
								"qualifiedName": "NonNullable"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 975,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							],
							"name": "NonNullable",
							"package": "typescript"
						}
					}
				}
			]
		},
		{
			"id": 977,
			"name": "isNot",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-not.ts",
					"line": 14,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-not.ts"
				}
			],
			"signatures": [
				{
					"id": 978,
					"name": "isNot",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that takes a guard function as predicate and returns a guard that negates it."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Function A guard function."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isNot(P.isTruthy)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isNot(P.isTruthy)(false) //=> true\n   P.isNot(P.isTruthy)(true) //=> false"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "is-not.ts",
							"line": 14,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-not.ts"
						}
					],
					"typeParameters": [
						{
							"id": 979,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 980,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 981,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The guard function to negate."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 982,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "is-not.ts",
											"line": 15,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-not.ts"
										}
									],
									"signatures": [
										{
											"id": 983,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "is-not.ts",
													"line": 15,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-not.ts"
												}
											],
											"parameters": [
												{
													"id": 984,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 979,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "data",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"target": 980,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 985,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "is-not.ts",
									"line": 16,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-not.ts"
								}
							],
							"signatures": [
								{
									"id": 986,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 987,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 979,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "data",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Exclude"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 979,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												},
												{
													"type": "reference",
													"target": 980,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "Exclude",
											"package": "typescript"
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 997,
			"name": "isNullish",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-nullish.ts",
					"line": 18,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-nullish.ts"
				}
			],
			"signatures": [
				{
					"id": 998,
					"name": "isNullish",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is either "
							},
							{
								"kind": "code",
								"text": "`null`"
							},
							{
								"kind": "text",
								"text": " or\n"
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": " and narrows its type accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is either "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": ", false\notherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isNullish(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isNullish(undefined) //=> true\n   P.isNullish(null) //=> true\n   P.isNullish('somethingElse') //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-nullish.ts",
							"line": 18,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-nullish.ts"
						}
					],
					"typeParameters": [
						{
							"id": 999,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1000,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": 999,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/helpers/types.ts",
								"qualifiedName": "NarrowedTo"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 999,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								{
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "undefined"
										},
										{
											"type": "literal",
											"value": null
										}
									]
								}
							],
							"name": "NarrowedTo",
							"package": "@vinicunca/perkakas"
						}
					}
				}
			]
		},
		{
			"id": 1001,
			"name": "isNumber",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-number.ts",
					"line": 17,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-number.ts"
				}
			],
			"signatures": [
				{
					"id": 1002,
					"name": "isNumber",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is a number and narrows its\ntype accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is a number, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isNumber(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isNumber(1); // => true\n   P.isNumber(1n); // => false\n   P.isNumber('notANumber'); // => false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-number.ts",
							"line": 17,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-number.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1003,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1004,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "reference",
										"target": 1003,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/helpers/types.ts",
								"qualifiedName": "NarrowedTo"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 1003,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								{
									"type": "intrinsic",
									"name": "number"
								}
							],
							"name": "NarrowedTo",
							"package": "@vinicunca/perkakas"
						}
					}
				}
			]
		},
		{
			"id": 1005,
			"name": "isObjectType",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-object-type.ts",
					"line": 30,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-object-type.ts"
				}
			],
			"signatures": [
				{
					"id": 1006,
					"name": "isObjectType",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Checks if the given parameter is of type "
							},
							{
								"kind": "code",
								"text": "`\"object\"`"
							},
							{
								"kind": "text",
								"text": " via "
							},
							{
								"kind": "code",
								"text": "`typeof`"
							},
							{
								"kind": "text",
								"text": ", excluding "
							},
							{
								"kind": "code",
								"text": "`null`"
							},
							{
								"kind": "text",
								"text": ".\n\nIt's important to note that in JavaScript, many entities are considered objects, like Arrays, Classes, RegExps, Maps, Sets, Dates, URLs, Promise, Errors, and more.\\\nAlthough technically an object too, "
							},
							{
								"kind": "code",
								"text": "`null`"
							},
							{
								"kind": "text",
								"text": " is not considered an object by this function, so that its easier to narrow nullables.\n\nFor a more specific check that is limited to plain objects (simple struct/shape/record-like objects), consider using "
							},
							{
								"kind": "code",
								"text": "`isPlainObject`"
							},
							{
								"kind": "text",
								"text": " instead.\nFor a simpler check that only removes "
							},
							{
								"kind": "code",
								"text": "`null`"
							},
							{
								"kind": "text",
								"text": " from the type prefer "
							},
							{
								"kind": "code",
								"text": "`isNonNull`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`isDefined`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The input type, narrowed to only objects."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isObjectType(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "// true\n   P.isObjectType({}) //=> true\n   P.isObjectType([]) //=> true\n   P.isObjectType(Promise.resolve(\"something\")) //=> true\n   P.isObjectType(new Date()) //=> true\n   P.isObjectType(new Error(\"error\")) //=> true\n\n   // false\n   P.isObjectType('somethingElse') //=> false\n   P.isObjectType(null) //=> false"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "is-object-type.ts",
							"line": 30,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-object-type.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1007,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1008,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to be checked for being an object type."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "object"
									},
									{
										"type": "reference",
										"target": 1007,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/helpers/types.ts",
								"qualifiedName": "NarrowedTo"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 1007,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								{
									"type": "intrinsic",
									"name": "object"
								}
							],
							"name": "NarrowedTo",
							"package": "@vinicunca/perkakas"
						}
					}
				}
			]
		},
		{
			"id": 1009,
			"name": "isPlainObject",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-plain-object.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-plain-object.ts"
				}
			],
			"signatures": [
				{
					"id": 1010,
					"name": "isPlainObject",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Checks if "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " is a \"plain\" object. A plain object is defined as an object with string keys and values of any type, including primitives, other objects, functions, classes, etc (aka struct/shape/record/simple). Technically, a plain object is one whose prototype is either "
							},
							{
								"kind": "code",
								"text": "`Object.prototype`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`null`"
							},
							{
								"kind": "text",
								"text": ", ensuring it does not inherit properties or methods from other object types.\n\nThis function is narrower in scope than "
							},
							{
								"kind": "code",
								"text": "`isObjectType`"
							},
							{
								"kind": "text",
								"text": ", which accepts any entity considered an "
							},
							{
								"kind": "code",
								"text": "`\"object\"`"
							},
							{
								"kind": "text",
								"text": " by JavaScript's "
							},
							{
								"kind": "code",
								"text": "`typeof`"
							},
							{
								"kind": "text",
								"text": ".\n\nNote that Maps, Arrays, and Sets are not considered plain objects and would return "
							},
							{
								"kind": "code",
								"text": "`false`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The input type, narrowed to only plain objects."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isPlainObject(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "// true\n   P.isPlainObject({}) //=> true\n   P.isPlainObject({ a: 123 }) //=> true\n\n   // false\n   P.isPlainObject([]) //=> false\n   P.isPlainObject(Promise.resolve(\"something\")) //=> false\n   P.isPlainObject(new Date()) //=> false\n   P.isPlainObject(new Error(\"error\")) //=> false\n   P.isPlainObject('somethingElse') //=> false\n   P.isPlainObject(null) //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-plain-object.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-plain-object.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1011,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1012,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Readonly"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "PropertyKey"
														},
														"name": "PropertyKey",
														"package": "typescript"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											}
										],
										"name": "Readonly",
										"package": "typescript"
									},
									{
										"type": "reference",
										"target": 1011,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/helpers/types.ts",
								"qualifiedName": "NarrowedTo"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 1011,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								{
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Record"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "PropertyKey"
											},
											"name": "PropertyKey",
											"package": "typescript"
										},
										{
											"type": "intrinsic",
											"name": "unknown"
										}
									],
									"name": "Record",
									"package": "typescript"
								}
							],
							"name": "NarrowedTo",
							"package": "@vinicunca/perkakas"
						}
					}
				}
			]
		},
		{
			"id": 1013,
			"name": "isPromise",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-promise.ts",
					"line": 14,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-promise.ts"
				}
			],
			"signatures": [
				{
					"id": 1014,
					"name": "isPromise",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is a Promise and narrows its type accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is a Promise, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isPromise(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isPromise(Promise.resolve(5)) //=> true\n   P.isPromise(Promise.reject(5)) //=> true\n   P.isPromise('somethingElse') //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-promise.ts",
							"line": 14,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-promise.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1015,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1016,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1017,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": 1016,
										"name": "S",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1015,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
								"qualifiedName": "Promise"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 1015,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							],
							"name": "Promise",
							"package": "typescript"
						}
					}
				}
			]
		},
		{
			"id": 1018,
			"name": "isShallowEqual",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-shallow-equal.ts",
					"line": 35,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-shallow-equal.ts"
				},
				{
					"fileName": "is-shallow-equal.ts",
					"line": 72,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-shallow-equal.ts"
				}
			],
			"signatures": [
				{
					"id": 1019,
					"name": "isShallowEqual",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Performs a *shallow structural* comparison between two values to determine if\nthey are equivalent. For primitive values this is equivalent to "
							},
							{
								"kind": "code",
								"text": "`===`"
							},
							{
								"kind": "text",
								"text": ", for\narrays a **strict equality** check would be performed on every item, in\norder, and for objects props will be matched and checked for **strict\nequality**; Unlike "
							},
							{
								"kind": "code",
								"text": "`isDeepEqual`"
							},
							{
								"kind": "text",
								"text": " where the function also *recurses* into each\nitem and value.\n\n!IMPORTANT: Promise, Date, and RegExp, are shallowly equal, even when they\nare semantically different (e.g. resolved promises); but "
							},
							{
								"kind": "code",
								"text": "`isDeepEqual`"
							},
							{
								"kind": "text",
								"text": " does\ncompare the latter 2 semantically by-value.\n\nThe result would be narrowed to the second value so that the function can be\nused as a type guard.\n\nSee:\n- "
							},
							{
								"kind": "code",
								"text": "`isStrictEqual`"
							},
							{
								"kind": "text",
								"text": " if you don't need a deep comparison and just want to check\nfor simple ("
							},
							{
								"kind": "code",
								"text": "`===`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`Object.is`"
							},
							{
								"kind": "text",
								"text": ") equality.\n- "
							},
							{
								"kind": "code",
								"text": "`isDeepEqual`"
							},
							{
								"kind": "text",
								"text": " for a recursively deep check of arrays and objects."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isShallowEqual(data, other)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isShallowEqual(1, 1) //=> true\n   P.isShallowEqual(1, '1') //=> false\n   P.isShallowEqual([1, 2, 3], [1, 2, 3]) //=> true\n   P.isShallowEqual([[1], [2], [3]], [[1], [2], [3]]) //=> false"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "is-shallow-equal.ts",
							"line": 35,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-shallow-equal.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1020,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1021,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1022,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The first value to compare."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1020,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1023,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second value to compare."
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 1020,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Exclude"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": 1020,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										},
										{
											"type": "reference",
											"target": 1021,
											"name": "S",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									],
									"name": "Exclude",
									"package": "typescript"
								},
								"trueType": {
									"type": "reference",
									"target": 1021,
									"name": "S",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "intrinsic",
									"name": "never"
								}
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": 1021,
							"name": "S",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 1029,
					"name": "isShallowEqual",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Performs a *shallow structural* comparison between two values to determine if\nthey are equivalent. For primitive values this is equivalent to "
							},
							{
								"kind": "code",
								"text": "`===`"
							},
							{
								"kind": "text",
								"text": ", for\narrays a **strict equality** check would be performed on every item, in\norder, and for objects props will be matched and checked for **strict\nequality**; Unlike "
							},
							{
								"kind": "code",
								"text": "`isDeepEqual`"
							},
							{
								"kind": "text",
								"text": " where the function also *recurses* into each\nitem and value.\n\n!IMPORTANT: All built-in objects (Promise, Date, RegExp) are shallowly equal,\neven when they are semantically different (e.g. resolved promises). Use\n"
							},
							{
								"kind": "code",
								"text": "`isDeepEqual`"
							},
							{
								"kind": "text",
								"text": " instead.\n\nThe result would be narrowed to the second value so that the function can be\nused as a type guard.\n\nSee:\n- "
							},
							{
								"kind": "code",
								"text": "`isStrictEqual`"
							},
							{
								"kind": "text",
								"text": " if you don't need a deep comparison and just want to check\nfor simple ("
							},
							{
								"kind": "code",
								"text": "`===`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`Object.is`"
							},
							{
								"kind": "text",
								"text": ") equality.\n- "
							},
							{
								"kind": "code",
								"text": "`isDeepEqual`"
							},
							{
								"kind": "text",
								"text": " for a recursively deep check of arrays and objects."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isShallowEqual(other)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(1, P.isShallowEqual(1)) //=> true\n   P.pipe(1, P.isShallowEqual('1')) //=> false\n   P.pipe([1, 2, 3], P.isShallowEqual([1, 2, 3])) //=> true\n   P.pipe([[1], [2], [3]], P.isShallowEqual([[1], [2], [3]])) //=> false"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "is-shallow-equal.ts",
							"line": 72,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-shallow-equal.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1030,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1031,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1032,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second value to compare."
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 1030,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Exclude"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": 1030,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										},
										{
											"type": "reference",
											"target": 1031,
											"name": "S",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									],
									"name": "Exclude",
									"package": "typescript"
								},
								"trueType": {
									"type": "reference",
									"target": 1031,
									"name": "S",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "intrinsic",
									"name": "never"
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1033,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "is-shallow-equal.ts",
									"line": 74,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-shallow-equal.ts"
								}
							],
							"signatures": [
								{
									"id": 1034,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1035,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1030,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "data",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": 1031,
											"name": "S",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1043,
			"name": "isStrictEqual",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-strict-equal.ts",
					"line": 33,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-strict-equal.ts"
				},
				{
					"fileName": "is-strict-equal.ts",
					"line": 68,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-strict-equal.ts"
				}
			],
			"signatures": [
				{
					"id": 1044,
					"name": "isStrictEqual",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Determines whether two values are *functionally identical* in all contexts.\nFor primitive values (string, number), this is done by-value, and for objects\nit is done by-reference (i.e., they point to the same object in memory).\n\nUnder the hood we use **both** the ["
							},
							{
								"kind": "code",
								"text": "`===`"
							},
							{
								"kind": "text",
								"text": " operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality)\nand ["
							},
							{
								"kind": "code",
								"text": "`Object.is`"
							},
							{
								"kind": "text",
								"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is). This means that "
							},
							{
								"kind": "code",
								"text": "`isStrictEqual(NaN, NaN) === true`"
							},
							{
								"kind": "text",
								"text": "\n(whereas "
							},
							{
								"kind": "code",
								"text": "`NaN !== NaN`"
							},
							{
								"kind": "text",
								"text": "), and "
							},
							{
								"kind": "code",
								"text": "`isStrictEqual(-0, 0) === true`"
							},
							{
								"kind": "text",
								"text": " (whereas\n"
							},
							{
								"kind": "code",
								"text": "`Object.is(-0, 0) === false`"
							},
							{
								"kind": "text",
								"text": ").\n\nThe result would be narrowed to the second value so that the function can be\nused as a type guard.\n\nSee:\n- "
							},
							{
								"kind": "code",
								"text": "`isDeepEqual`"
							},
							{
								"kind": "text",
								"text": " for a semantic comparison that allows comparing arrays and\nobjects \"by-value\", and recurses for every item.\n- "
							},
							{
								"kind": "code",
								"text": "`isShallowEqual`"
							},
							{
								"kind": "text",
								"text": " if you need to compare arrays and objects \"by-value\" but\ndon't want to recurse into their values."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isStrictEqual(data, other)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isStrictEqual(1, 1) //=> true\n   P.isStrictEqual(1, '1') //=> false\n   P.isStrictEqual([1, 2, 3], [1, 2, 3]) //=> false"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "is-strict-equal.ts",
							"line": 33,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-strict-equal.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1045,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1046,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1047,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The first value to compare."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1045,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1048,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second value to compare."
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 1045,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Exclude"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": 1045,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										},
										{
											"type": "reference",
											"target": 1046,
											"name": "S",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									],
									"name": "Exclude",
									"package": "typescript"
								},
								"trueType": {
									"type": "reference",
									"target": 1046,
									"name": "S",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "intrinsic",
									"name": "never"
								}
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": 1046,
							"name": "S",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 1054,
					"name": "isStrictEqual",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Determines whether two values are *functionally identical* in all contexts.\nFor primitive values (string, number), this is done by-value, and for objects\nit is done by-reference (i.e., they point to the same object in memory).\n\nUnder the hood we use **both** the ["
							},
							{
								"kind": "code",
								"text": "`===`"
							},
							{
								"kind": "text",
								"text": " operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality)\nand ["
							},
							{
								"kind": "code",
								"text": "`Object.is`"
							},
							{
								"kind": "text",
								"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is). This means that "
							},
							{
								"kind": "code",
								"text": "`isStrictEqual(NaN, NaN) === true`"
							},
							{
								"kind": "text",
								"text": "\n(whereas "
							},
							{
								"kind": "code",
								"text": "`NaN !== NaN`"
							},
							{
								"kind": "text",
								"text": "), and "
							},
							{
								"kind": "code",
								"text": "`isStrictEqual(-0, 0) === true`"
							},
							{
								"kind": "text",
								"text": " (whereas\n"
							},
							{
								"kind": "code",
								"text": "`Object.is(-0, 0) === false`"
							},
							{
								"kind": "text",
								"text": ").\n\nThe result would be narrowed to the second value so that the function can be\nused as a type guard.\n\nSee:\n- "
							},
							{
								"kind": "code",
								"text": "`isDeepEqual`"
							},
							{
								"kind": "text",
								"text": " for a semantic comparison that allows comparing arrays and\nobjects \"by-value\", and recurses for every item.\n- "
							},
							{
								"kind": "code",
								"text": "`isShallowEqual`"
							},
							{
								"kind": "text",
								"text": " if you need to compare arrays and objects \"by-value\" but\ndon't want to recurse into their values."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isStrictEqual(other)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(1, P.isStrictEqual(1)); //=> true\n   P.pipe(1, P.isStrictEqual('1')); //=> false\n   P.pipe([1, 2, 3], P.isStrictEqual([1, 2, 3])); //=> false"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "is-strict-equal.ts",
							"line": 68,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-strict-equal.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1055,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1056,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1057,
							"name": "other",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second value to compare."
									}
								]
							},
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"target": 1055,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"extendsType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Exclude"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": 1055,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										},
										{
											"type": "reference",
											"target": 1056,
											"name": "S",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									],
									"name": "Exclude",
									"package": "typescript"
								},
								"trueType": {
									"type": "reference",
									"target": 1056,
									"name": "S",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								"falseType": {
									"type": "intrinsic",
									"name": "never"
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1058,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "is-strict-equal.ts",
									"line": 70,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-strict-equal.ts"
								}
							],
							"signatures": [
								{
									"id": 1059,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1060,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1055,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "data",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": 1056,
											"name": "S",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1068,
			"name": "isString",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-string.ts",
					"line": 15,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-string.ts"
				}
			],
			"signatures": [
				{
					"id": 1069,
					"name": "isString",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is a string and narrows its type accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is a string, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isString(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isString('string') //=> true\n   P.isString(1) //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-string.ts",
							"line": 15,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-string.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1070,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1071,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": 1070,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/helpers/types.ts",
								"qualifiedName": "NarrowedTo"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 1070,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								{
									"type": "intrinsic",
									"name": "string"
								}
							],
							"name": "NarrowedTo",
							"package": "@vinicunca/perkakas"
						}
					}
				}
			]
		},
		{
			"id": 1072,
			"name": "isSymbol",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-symbol.ts",
					"line": 15,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-symbol.ts"
				}
			],
			"signatures": [
				{
					"id": 1073,
					"name": "isSymbol",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is a symbol and narrows its type accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is a symbol, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isSymbol(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isSymbol(Symbol('foo')) //=> true\n   P.isSymbol(1) //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-symbol.ts",
							"line": 15,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-symbol.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1074,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1075,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "symbol"
									},
									{
										"type": "reference",
										"target": 1074,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								]
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "src/helpers/types.ts",
								"qualifiedName": "NarrowedTo"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 1074,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								{
									"type": "intrinsic",
									"name": "symbol"
								}
							],
							"name": "NarrowedTo",
							"package": "@vinicunca/perkakas"
						}
					}
				}
			]
		},
		{
			"id": 1076,
			"name": "isTruthy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "is-truthy.ts",
					"line": 18,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-truthy.ts"
				}
			],
			"signatures": [
				{
					"id": 1077,
					"name": "isTruthy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A function that checks if the passed parameter is truthy and narrows its type accordingly."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "True if the passed input is truthy, false otherwise."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.isTruthy(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.isTruthy('somethingElse') //=> true\n   P.isTruthy(null) //=> false\n   P.isTruthy(undefined) //=> false\n   P.isTruthy(false) //=> false\n   P.isTruthy(0) //=> false\n   P.isTruthy('') //=> false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "is-truthy.ts",
							"line": 18,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/is-truthy.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1078,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1079,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The variable to check."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1078,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "data",
						"asserts": false,
						"targetType": {
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
								"qualifiedName": "Exclude"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 1078,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								},
								{
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "undefined"
										},
										{
											"type": "literal",
											"value": null
										},
										{
											"type": "literal",
											"value": false
										},
										{
											"type": "literal",
											"value": ""
										},
										{
											"type": "literal",
											"value": 0
										}
									]
								}
							],
							"name": "Exclude",
							"package": "typescript"
						}
					}
				}
			]
		},
		{
			"id": 1080,
			"name": "join",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "join.ts",
					"line": 27,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/join.ts"
				},
				{
					"fileName": "join.ts",
					"line": 50,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/join.ts"
				},
				{
					"fileName": "join.ts",
					"line": 55,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/join.ts"
				}
			],
			"signatures": [
				{
					"id": 1081,
					"name": "join",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Joins the elements of the array by: casting them to a string and\nconcatenating them one to the other, with the provided glue string in between\nevery two elements.\n\nWhen called on a tuple and with stricter item types (union of literal values,\nthe result is strictly typed to the tuples shape and it's item types)."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.join(data, glue)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.join([1,2,3], \",\") // => \"1,2,3\" (typed "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": ")\n   P.join(['a','b','c'], \"\") // => \"abc\" (typed "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": ")\n   P.join(['hello', 'world'] as const, \" \") // => \"hello world\" (typed "
									},
									{
										"kind": "code",
										"text": "`hello world`"
									},
									{
										"kind": "text",
										"text": ")"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "join.ts",
							"line": 27,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/join.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1082,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "tuple"
									},
									{
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/join.ts",
													"qualifiedName": "JoinableItem"
												},
												"name": "JoinableItem",
												"package": "@vinicunca/perkakas"
											}
										}
									}
								]
							}
						},
						{
							"id": 1083,
							"name": "Glue",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"parameters": [
						{
							"id": 1084,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to join."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1082,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1085,
							"name": "glue",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The string to put in between every two elements."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1083,
								"name": "Glue",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/join.d.ts",
							"qualifiedName": "Join"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1082,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 1083,
								"name": "Glue",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Join",
						"package": "type-fest"
					}
				},
				{
					"id": 1086,
					"name": "join",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Joins the elements of the array by: casting them to a string and\nconcatenating them one to the other, with the provided glue string in between\nevery two elements.\n\nWhen called on a tuple and with stricter item types (union of literal values,\nthe result is strictly typed to the tuples shape and it's item types)."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.join(glue)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1,2,3], P.join(\",\")) // => \"1,2,3\" (typed "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": ")\n   P.pipe(['a','b','c'], P.join(\"\")) // => \"abc\" (typed "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": ")\n   P.pipe(['hello', 'world'] as const, P.join(\" \")) // => \"hello world\" (typed "
									},
									{
										"kind": "code",
										"text": "`hello world`"
									},
									{
										"kind": "text",
										"text": ")"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "join.ts",
							"line": 50,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/join.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1087,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "tuple"
									},
									{
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/join.ts",
													"qualifiedName": "JoinableItem"
												},
												"name": "JoinableItem",
												"package": "@vinicunca/perkakas"
											}
										}
									}
								]
							}
						},
						{
							"id": 1088,
							"name": "Glue",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"parameters": [
						{
							"id": 1089,
							"name": "glue",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The string to put in between every two elements."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1088,
								"name": "Glue",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1090,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "join.ts",
									"line": 53,
									"character": 15,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/join.ts"
								}
							],
							"signatures": [
								{
									"id": 1091,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1092,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1087,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/join.d.ts",
											"qualifiedName": "Join"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1087,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 1088,
												"name": "Glue",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Join",
										"package": "type-fest"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1115,
			"name": "keys",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "keys.ts",
					"line": 68,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/keys.ts"
				},
				{
					"fileName": "keys.ts",
					"line": 81,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/keys.ts"
				},
				{
					"fileName": "keys.ts",
					"line": 83,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/keys.ts"
				}
			],
			"signatures": [
				{
					"id": 1116,
					"name": "keys",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a new array containing the keys of the array or object."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.keys(source)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.keys(['x', 'y', 'z']); // => ['0', '1', '2']\n   P.keys({ a: 'x', b: 'y', 5: 'z' }); // => ['a', 'b', '5']"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "keys.ts",
							"line": 68,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/keys.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1117,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"parameters": [
						{
							"id": 1118,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Either an array or an object."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1117,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/keys.ts",
							"qualifiedName": "Keys"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1117,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Keys",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 1119,
					"name": "keys",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a new array containing the keys of the array or object."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.keys()(source)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.Pipe(['x', 'y', 'z'], keys()); // => ['0', '1', '2']\n   P.pipe({ a: 'x', b: 'y', 5: 'z' } as const, P.keys()) // => ['a', 'b', '5']"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "keys.ts",
							"line": 81,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/keys.ts"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1120,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "keys.ts",
									"line": 81,
									"character": 24,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/keys.ts"
								}
							],
							"signatures": [
								{
									"id": 1121,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 1123,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										}
									],
									"parameters": [
										{
											"id": 1122,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1123,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/keys.ts",
											"qualifiedName": "Keys"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1123,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Keys",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1124,
			"name": "last",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "last.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/last.ts"
				},
				{
					"fileName": "last.ts",
					"line": 45,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/last.ts"
				},
				{
					"fileName": "last.ts",
					"line": 47,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/last.ts"
				}
			],
			"signatures": [
				{
					"id": 1125,
					"name": "last",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Gets the last element of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.last(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.last([1, 2, 3]) // => 3\n   P.last([]) // => undefined"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "last.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/last.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1126,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 1127,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1126,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/last.ts",
							"qualifiedName": "Last"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1126,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Last",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 1128,
					"name": "last",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Gets the last element of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.last()(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [1, 2, 4, 8, 16],\n     P.filter(x => x > 3),\n     P.last(),\n     x => x + 1\n   ); // => 17"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "last.ts",
							"line": 45,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/last.ts"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1129,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "last.ts",
									"line": 45,
									"character": 24,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/last.ts"
								}
							],
							"signatures": [
								{
									"id": 1130,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 1132,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 1131,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1132,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/last.ts",
											"qualifiedName": "Last"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1132,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Last",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1133,
			"name": "length",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "length.ts",
					"line": 16,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/length.ts"
				},
				{
					"fileName": "length.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/length.ts"
				},
				{
					"fileName": "length.ts",
					"line": 30,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/length.ts"
				}
			],
			"signatures": [
				{
					"id": 1134,
					"name": "length",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Counts values of the collection or iterable."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.length(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.length([1, 2, 3]) // => 3"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "length.ts",
							"line": 16,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/length.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1135,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1136,
							"name": "items",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The input data."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/length.ts",
									"qualifiedName": "Enumerable"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1135,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Enumerable",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1137,
					"name": "length",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Counts values of the collection or iterable."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.length()(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 3], P.length()) // => 3"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "length.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/length.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1138,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1139,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "length.ts",
									"line": 28,
									"character": 29,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/length.ts"
								}
							],
							"signatures": [
								{
									"id": 1140,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1141,
											"name": "items",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/length.ts",
													"qualifiedName": "Enumerable"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 1138,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "Enumerable",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1142,
			"name": "map",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "map.ts",
					"line": 25,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map.ts"
				},
				{
					"fileName": "map.ts",
					"line": 48,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map.ts"
				},
				{
					"fileName": "map.ts",
					"line": 52,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map.ts"
				}
			],
			"signatures": [
				{
					"id": 1143,
					"name": "map",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a new array populated with the results of calling a provided function\non every element in the calling array. Equivalent to "
							},
							{
								"kind": "code",
								"text": "`Array.prototype.map`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A new array with each element being the result of the callback\nfunction."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.map(data, callbackfn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.map([1, 2, 3], P.multiply(2)); // => [2, 4, 6]\n   P.map([0, 0], P.add(1)); // => [1, 1]\n   P.map([0, 0], (value, index) => value + index); // => [0, 1]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "map.ts",
							"line": 25,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/map.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1144,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 1145,
							"name": "U",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1146,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to map."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1144,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1147,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. Its\nreturn value is added as a single element in the new array."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1148,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "map.ts",
											"line": 27,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/map.ts"
										}
									],
									"signatures": [
										{
											"id": 1149,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "map.ts",
													"line": 27,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/map.ts"
												}
											],
											"parameters": [
												{
													"id": 1150,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 1144,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 1151,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1152,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1144,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 1145,
												"name": "U",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "Mapped"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1144,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 1145,
								"name": "U",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Mapped",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 1153,
					"name": "map",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a new array populated with the results of calling a provided function\non every element in the calling array. Equivalent to "
							},
							{
								"kind": "code",
								"text": "`Array.prototype.map`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A new array with each element being the result of the callback\nfunction."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.map(callbackfn)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 3], P.map(P.multiply(2))); // => [2, 4, 6]\n   P.pipe([0, 0], P.map(P.add(1))); // => [1, 1]\n   P.pipe([0, 0], P.map((value, index) => value + index)); // => [0, 1]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "map.ts",
							"line": 48,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/map.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1154,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 1155,
							"name": "U",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1156,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. Its\nreturn value is added as a single element in the new array."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1157,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "map.ts",
											"line": 49,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/map.ts"
										}
									],
									"signatures": [
										{
											"id": 1158,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "map.ts",
													"line": 49,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/map.ts"
												}
											],
											"parameters": [
												{
													"id": 1159,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 1154,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 1160,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1161,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1154,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 1155,
												"name": "U",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1162,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "map.ts",
									"line": 50,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/map.ts"
								}
							],
							"signatures": [
								{
									"id": 1163,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1164,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1154,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "Mapped"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1154,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 1155,
												"name": "U",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Mapped",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1165,
			"name": "mapKeys",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "map-keys.ts",
					"line": 26,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-keys.ts"
				},
				{
					"fileName": "map-keys.ts",
					"line": 46,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-keys.ts"
				},
				{
					"fileName": "map-keys.ts",
					"line": 54,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-keys.ts"
				}
			],
			"signatures": [
				{
					"id": 1166,
					"name": "mapKeys",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Maps keys of "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": " and keeps the same values."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.mapKeys(object, fn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.mapKeys({a: 1, b: 2}, (key, value) => key + value) // => { a1: 1, b2: 2 }"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "map-keys.ts",
							"line": 26,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-keys.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1167,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1168,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {}
								}
							}
						},
						{
							"id": 1169,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							}
						}
					],
					"parameters": [
						{
							"id": 1170,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The object to map."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1167,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1171,
							"name": "keyMapper",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The mapping function."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1172,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "map-keys.ts",
											"line": 28,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-keys.ts"
										}
									],
									"signatures": [
										{
											"id": 1173,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "map-keys.ts",
													"line": 28,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-keys.ts"
												}
											],
											"parameters": [
												{
													"id": 1174,
													"name": "key",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1167,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1175,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyedValueOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1167,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyedValueOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1176,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1167,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 1169,
												"name": "S",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "ExactRecord"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1169,
								"name": "S",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "EnumerableStringKeyedValueOf"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1167,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "EnumerableStringKeyedValueOf",
								"package": "@vinicunca/perkakas"
							}
						],
						"name": "ExactRecord",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 1177,
					"name": "mapKeys",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Maps keys of "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": " and keeps the same values."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.mapKeys(fn)(object)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe({a: 1, b: 2}, P.mapKeys((key, value) => key + value)) // => { a1: 1, b2: 2 }"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "map-keys.ts",
							"line": 46,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-keys.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1178,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1179,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {}
								}
							}
						},
						{
							"id": 1180,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							}
						}
					],
					"parameters": [
						{
							"id": 1181,
							"name": "keyMapper",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The mapping function."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1182,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "map-keys.ts",
											"line": 47,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-keys.ts"
										}
									],
									"signatures": [
										{
											"id": 1183,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "map-keys.ts",
													"line": 47,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-keys.ts"
												}
											],
											"parameters": [
												{
													"id": 1184,
													"name": "key",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1178,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1185,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyedValueOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1178,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyedValueOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1186,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1178,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 1180,
												"name": "S",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1187,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "map-keys.ts",
									"line": 52,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-keys.ts"
								}
							],
							"signatures": [
								{
									"id": 1188,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1189,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1178,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "ExactRecord"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1180,
												"name": "S",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "EnumerableStringKeyedValueOf"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 1178,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "EnumerableStringKeyedValueOf",
												"package": "@vinicunca/perkakas"
											}
										],
										"name": "ExactRecord",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1190,
			"name": "mapToObj",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "map-to-obj.ts",
					"line": 24,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-to-obj.ts"
				},
				{
					"fileName": "map-to-obj.ts",
					"line": 52,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-to-obj.ts"
				},
				{
					"fileName": "map-to-obj.ts",
					"line": 56,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-to-obj.ts"
				}
			],
			"signatures": [
				{
					"id": 1191,
					"name": "mapToObj",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Map each element of an array into an object using a defined callback function.\n\nThere are several other functions that could be used to build an object from\nan array:\n"
							},
							{
								"kind": "code",
								"text": "`fromKeys`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *keys* and a mapper for values.\n"
							},
							{
								"kind": "code",
								"text": "`indexBy`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *values* and a mapper for keys.\n"
							},
							{
								"kind": "code",
								"text": "`pullObject`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items with mappers for *both* keys and values.\n"
							},
							{
								"kind": "code",
								"text": "`fromEntries`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of key-value pairs.\nRefer to the docs for more details."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The new mapped object."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.mapToObj(array, fn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.mapToObj([1, 2, 3], x => [String(x), x * 2]) // => {1: 2, 2: 4, 3: 6}"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "map-to-obj.ts",
							"line": 24,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-to-obj.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1192,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1193,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							}
						},
						{
							"id": 1194,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1195,
							"name": "array",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to map."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 1192,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 1196,
							"name": "fn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The mapping function, which should return a tuple of [key, value], similar to Object.fromEntries."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1197,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "map-to-obj.ts",
											"line": 26,
											"character": 6,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-to-obj.ts"
										}
									],
									"signatures": [
										{
											"id": 1198,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "map-to-obj.ts",
													"line": 26,
													"character": 6,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-to-obj.ts"
												}
											],
											"parameters": [
												{
													"id": 1199,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1192,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 1200,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1201,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 1192,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "reference",
														"target": 1193,
														"name": "K",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													},
													{
														"type": "reference",
														"target": 1194,
														"name": "V",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												]
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1193,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 1194,
								"name": "V",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 1202,
					"name": "mapToObj",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Map each element of an array into an object using a defined callback function.\n\nThere are several other functions that could be used to build an object from\nan array:\n"
							},
							{
								"kind": "code",
								"text": "`fromKeys`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *keys* and a mapper for values.\n"
							},
							{
								"kind": "code",
								"text": "`indexBy`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *values* and a mapper for keys.\n"
							},
							{
								"kind": "code",
								"text": "`pullObject`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items with mappers for *both* keys and values.\n"
							},
							{
								"kind": "code",
								"text": "`fromEntries`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of key-value pairs.\nRefer to the docs for more details."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The new mapped object."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.mapToObj(fn)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [1, 2, 3],\n     P.mapToObj(x => [String(x), x * 2])\n   ) // => {1: 2, 2: 4, 3: 6}"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "map-to-obj.ts",
							"line": 52,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-to-obj.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1203,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1204,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							}
						},
						{
							"id": 1205,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1206,
							"name": "fn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The mapping function, which should return a tuple of [key, value], similar to Object.fromEntries."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1207,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "map-to-obj.ts",
											"line": 53,
											"character": 6,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-to-obj.ts"
										}
									],
									"signatures": [
										{
											"id": 1208,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "map-to-obj.ts",
													"line": 53,
													"character": 6,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-to-obj.ts"
												}
											],
											"parameters": [
												{
													"id": 1209,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1203,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 1210,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1211,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 1203,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "reference",
														"target": 1204,
														"name": "K",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													},
													{
														"type": "reference",
														"target": 1205,
														"name": "V",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												]
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1212,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "map-to-obj.ts",
									"line": 54,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-to-obj.ts"
								}
							],
							"signatures": [
								{
									"id": 1213,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1214,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 1203,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1204,
												"name": "K",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 1205,
												"name": "V",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1215,
			"name": "mapValues",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "map-values.ts",
					"line": 30,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-values.ts"
				},
				{
					"fileName": "map-values.ts",
					"line": 54,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-values.ts"
				},
				{
					"fileName": "map-values.ts",
					"line": 62,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-values.ts"
				}
			],
			"signatures": [
				{
					"id": 1216,
					"name": "mapValues",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Maps values of "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": " and keeps the same keys. Symbol keys are not passed\nto the mapper and will be removed from the output object.\n\nTo also copy the symbol keys to the output use merge:\n"
							},
							{
								"kind": "code",
								"text": "`merge(data, mapValues(data, mapper))`"
							},
							{
								"kind": "text",
								"text": ")."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.mapValues(data, mapper)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.mapValues({a: 1, b: 2}, (value, key) => value + key) // => {a: '1a', b: '2b'}"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "map-values.ts",
							"line": 30,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-values.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1217,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 1218,
							"name": "Value",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1219,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The object to map."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1217,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1220,
							"name": "valueMapper",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The mapping function."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1221,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "map-values.ts",
											"line": 32,
											"character": 15,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-values.ts"
										}
									],
									"signatures": [
										{
											"id": 1222,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "map-values.ts",
													"line": 32,
													"character": 15,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-values.ts"
												}
											],
											"parameters": [
												{
													"id": 1223,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyedValueOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1217,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyedValueOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1224,
													"name": "key",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1217,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1225,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1217,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 1218,
												"name": "Value",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/map-values.ts",
							"qualifiedName": "MappedValues"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1217,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 1218,
								"name": "Value",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "MappedValues",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 1226,
					"name": "mapValues",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Maps values of "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": " and keeps the same keys. Symbol keys are not passed\nto the mapper and will be removed from the output object.\n\nTo also copy the symbol keys to the output use merge:\n"
							},
							{
								"kind": "code",
								"text": "`merge(data, mapValues(data, mapper))`"
							},
							{
								"kind": "text",
								"text": ")."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.mapValues(mapper)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe({a: 1, b: 2}, P.mapValues((value, key) => value + key)) // => {a: '1a', b: '2b'}"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "map-values.ts",
							"line": 54,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-values.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1227,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 1228,
							"name": "Value",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1229,
							"name": "valueMapper",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The mapping function."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1230,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "map-values.ts",
											"line": 55,
											"character": 15,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-values.ts"
										}
									],
									"signatures": [
										{
											"id": 1231,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "map-values.ts",
													"line": 55,
													"character": 15,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-values.ts"
												}
											],
											"parameters": [
												{
													"id": 1232,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyedValueOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1227,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyedValueOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1233,
													"name": "key",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1227,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1234,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1227,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 1228,
												"name": "Value",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1235,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "map-values.ts",
									"line": 60,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-values.ts"
								}
							],
							"signatures": [
								{
									"id": 1236,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1237,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1227,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/map-values.ts",
											"qualifiedName": "MappedValues"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1227,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 1228,
												"name": "Value",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "MappedValues",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1238,
			"name": "mapWithFeedback",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "map-with-feedback.ts",
					"line": 29,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-with-feedback.ts"
				},
				{
					"fileName": "map-with-feedback.ts",
					"line": 61,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-with-feedback.ts"
				},
				{
					"fileName": "map-with-feedback.ts",
					"line": 71,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-with-feedback.ts"
				}
			],
			"signatures": [
				{
					"id": 1239,
					"name": "mapWithFeedback",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Applies a function on each element of the array, using the result of the\nprevious application, and returns an array of the successively computed\nvalues."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "An array of successively computed values from the left side of the\narray."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.mapWithFeedback(data, callbackfn, initialValue);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.mapWithFeedback(\n     [1, 2, 3, 4, 5],\n     (prev, x) => prev + x,\n     100,\n   ); // => [101, 103, 106, 110, 115]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "map-with-feedback.ts",
							"line": 29,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-with-feedback.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1240,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 1241,
							"name": "U",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1242,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to map over."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1240,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1243,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The callback function that receives the previous value,\nthe current element."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1244,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "map-with-feedback.ts",
											"line": 31,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-with-feedback.ts"
										}
									],
									"signatures": [
										{
											"id": 1245,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "map-with-feedback.ts",
													"line": 31,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-with-feedback.ts"
												}
											],
											"parameters": [
												{
													"id": 1246,
													"name": "previousValue",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1241,
														"name": "U",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 1247,
													"name": "currentValue",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 1240,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 1248,
													"name": "currentIndex",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1249,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1240,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 1241,
												"name": "U",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						},
						{
							"id": 1250,
							"name": "initialValue",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The initial value to start the computation with."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1241,
								"name": "U",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "Mapped"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1240,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 1241,
								"name": "U",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Mapped",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 1251,
					"name": "mapWithFeedback",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Applies a function on each element of the array, using the result of the\nprevious application, and returns an array of the successively computed\nvalues."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "An array of successively computed values from the left side of the\narray."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.mapWithFeedback(callbackfn, initialValue)(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [1, 2, 3, 4, 5],\n     P.mapWithFeedback((prev, x) => prev + x, 100),\n   ); // => [101, 103, 106, 110, 115]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "map-with-feedback.ts",
							"line": 61,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-with-feedback.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1252,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 1253,
							"name": "U",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1254,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The callback function that receives the previous value,\nthe current element."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1255,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "map-with-feedback.ts",
											"line": 62,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-with-feedback.ts"
										}
									],
									"signatures": [
										{
											"id": 1256,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "map-with-feedback.ts",
													"line": 62,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-with-feedback.ts"
												}
											],
											"parameters": [
												{
													"id": 1257,
													"name": "previousValue",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1253,
														"name": "U",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 1258,
													"name": "currentValue",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 1252,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 1259,
													"name": "currentIndex",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1260,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1252,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 1253,
												"name": "U",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						},
						{
							"id": 1261,
							"name": "initialValue",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The initial value to start the computation with."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1253,
								"name": "U",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1262,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "map-with-feedback.ts",
									"line": 69,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/map-with-feedback.ts"
								}
							],
							"signatures": [
								{
									"id": 1263,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1264,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1252,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "Mapped"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1252,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 1253,
												"name": "U",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Mapped",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1265,
			"name": "meanBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "mean-by.ts",
					"line": 18,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/mean-by.ts"
				},
				{
					"fileName": "mean-by.ts",
					"line": 38,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/mean-by.ts"
				},
				{
					"fileName": "mean-by.ts",
					"line": 43,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/mean-by.ts"
				}
			],
			"signatures": [
				{
					"id": 1266,
					"name": "meanBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the mean of the elements of an array using the provided predicate."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.meanBy(fn)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [{a: 5}, {a: 1}, {a: 3}],\n     P.meanBy(x => x.a)\n   ) // 3"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "mean-by.ts",
							"line": 18,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/mean-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1267,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1268,
							"name": "fn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Predicate function."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1269,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "mean-by.ts",
											"line": 19,
											"character": 6,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/mean-by.ts"
										}
									],
									"signatures": [
										{
											"id": 1270,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "mean-by.ts",
													"line": 19,
													"character": 6,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/mean-by.ts"
												}
											],
											"parameters": [
												{
													"id": 1271,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1267,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 1272,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1273,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 1267,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1274,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "mean-by.ts",
									"line": 20,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/mean-by.ts"
								}
							],
							"signatures": [
								{
									"id": 1275,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1276,
											"name": "items",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 1267,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				},
				{
					"id": 1277,
					"name": "meanBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the mean of the elements of an array using the provided predicate."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.meanBy(array, fn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.meanBy(\n     [{a: 5}, {a: 1}, {a: 3}],\n     x => x.a\n   ) // 3"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "mean-by.ts",
							"line": 38,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/mean-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1278,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1279,
							"name": "items",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 1278,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 1280,
							"name": "fn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Predicate function."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1281,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "mean-by.ts",
											"line": 40,
											"character": 6,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/mean-by.ts"
										}
									],
									"signatures": [
										{
											"id": 1282,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "mean-by.ts",
													"line": 40,
													"character": 6,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/mean-by.ts"
												}
											],
											"parameters": [
												{
													"id": 1283,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1278,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 1284,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1285,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 1278,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			]
		},
		{
			"id": 1286,
			"name": "merge",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "merge.ts",
					"line": 29,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge.ts"
				},
				{
					"fileName": "merge.ts",
					"line": 55,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge.ts"
				},
				{
					"fileName": "merge.ts",
					"line": 57,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge.ts"
				}
			],
			"signatures": [
				{
					"id": 1287,
					"name": "merge",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Merges two objects into one by combining their properties, effectively\ncreating a new object that incorporates elements from both. The merge\noperation prioritizes the second object's properties, allowing them to\noverwrite those from the first object with the same names.\n\nEquivalent to "
							},
							{
								"kind": "code",
								"text": "`{ ...data, ...source }`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "An object fully containing "
									},
									{
										"kind": "code",
										"text": "`source`"
									},
									{
										"kind": "text",
										"text": ", and any properties from "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": "\nthat don't share a name with any property in "
									},
									{
										"kind": "code",
										"text": "`source`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.merge(data, source)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.merge({ x: 1, y: 2 }, { y: 10, z: 2 }) // => { x: 1, y: 10, z: 2 }"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "merge.ts",
							"line": 29,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1288,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1289,
							"name": "Source",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1290,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The destination object, serving as the basis for the merge.\nProperties from this object are included in the new object, but will be\noverwritten by properties from the source object with matching keys."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1288,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1291,
							"name": "source",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The source object, whose properties will be included in the\nnew object. If properties in this object share keys with properties in the\ndestination object, the values from the source object will be used in the\nnew object."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1289,
								"name": "Source",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/merge.d.ts",
							"qualifiedName": "Merge"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1288,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 1289,
								"name": "Source",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Merge",
						"package": "type-fest"
					}
				},
				{
					"id": 1292,
					"name": "merge",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Merges two objects into one by combining their properties, effectively\ncreating a new object that incorporates elements from both. The merge\noperation prioritizes the second object's properties, allowing them to\noverwrite those from the first object with the same names.\n\nEquivalent to "
							},
							{
								"kind": "code",
								"text": "`{ ...data, ...source }`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "An object fully containing "
									},
									{
										"kind": "code",
										"text": "`source`"
									},
									{
										"kind": "text",
										"text": ", and any properties from "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": "\nthat don't share a name with any property in "
									},
									{
										"kind": "code",
										"text": "`source`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.merge(source)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     { x: 1, y: 2 },\n     P.merge({ y: 10, z: 2 }),\n   ); // => { x: 1, y: 10, z: 2 }"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "merge.ts",
							"line": 55,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1293,
							"name": "Source",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1294,
							"name": "source",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The source object, whose properties will be included in the\nnew object. If properties in this object share keys with properties in the\ndestination object, the values from the source object will be used in the\nnew object."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1293,
								"name": "Source",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1295,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "merge.ts",
									"line": 55,
									"character": 47,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge.ts"
								}
							],
							"signatures": [
								{
									"id": 1296,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 1298,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1297,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1298,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/merge.d.ts",
											"qualifiedName": "Merge"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1298,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 1293,
												"name": "Source",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Merge",
										"package": "type-fest"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1299,
			"name": "mergeAll",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "merge-all.ts",
					"line": 11,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge-all.ts"
				}
			],
			"signatures": [
				{
					"id": 1300,
					"name": "mergeAll",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Merges a list of objects into a single object."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.mergeAll(objects)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.mergeAll([{ a: 1, b: 1 }, { b: 2, c: 3 }, { d: 10 }]) // => { a: 1, b: 2, c: 3, d: 10 }"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "merge-all.ts",
							"line": 11,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge-all.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1301,
							"name": "A",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1302,
							"name": "array",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array of objects."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": 1301,
											"name": "A",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 1301,
						"name": "A",
						"package": "@vinicunca/perkakas",
						"refersToTypeParameter": true
					}
				}
			]
		},
		{
			"id": 1327,
			"name": "mergeDeep",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "merge-deep.ts",
					"line": 19,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge-deep.ts"
				},
				{
					"fileName": "merge-deep.ts",
					"line": 39,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge-deep.ts"
				},
				{
					"fileName": "merge-deep.ts",
					"line": 44,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge-deep.ts"
				}
			],
			"signatures": [
				{
					"id": 1328,
					"name": "mergeDeep",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Merges the "
							},
							{
								"kind": "code",
								"text": "`source`"
							},
							{
								"kind": "text",
								"text": " object into the "
							},
							{
								"kind": "code",
								"text": "`destination`"
							},
							{
								"kind": "text",
								"text": " object. The merge is similar to performing "
							},
							{
								"kind": "code",
								"text": "`{ ...destination, ... source }`"
							},
							{
								"kind": "text",
								"text": " (where disjoint values from each object would be copied as-is, and for any overlapping props the value from "
							},
							{
								"kind": "code",
								"text": "`source`"
							},
							{
								"kind": "text",
								"text": " would be used); But for *each prop* ("
							},
							{
								"kind": "code",
								"text": "`p`"
							},
							{
								"kind": "text",
								"text": "), if **both** "
							},
							{
								"kind": "code",
								"text": "`destination`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`source`"
							},
							{
								"kind": "text",
								"text": " have a **plain-object** as a value, the value would be taken as the result of recursively deepMerging them ("
							},
							{
								"kind": "code",
								"text": "`result.p === deepMerge(destination.p, source.p)`"
							},
							{
								"kind": "text",
								"text": ")."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The merged object."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.mergeDeep(destination, source)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.mergeDeep({ foo: 'bar', x: 1 }, { foo: 'baz', y: 2 }) // => { foo: 'baz', x: 1, y: 2 }"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "merge-deep.ts",
							"line": 19,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge-deep.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1329,
							"name": "Destination",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						},
						{
							"id": 1330,
							"name": "Source",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					],
					"parameters": [
						{
							"id": 1331,
							"name": "destination",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The object to merge into. In general, this object would have it's values overridden."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1329,
								"name": "Destination",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1332,
							"name": "source",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The object to merge from. In general, shared keys would be taken from this object."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1330,
								"name": "Source",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/merge-deep.d.ts",
							"qualifiedName": "MergeDeep"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1329,
								"name": "Destination",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 1330,
								"name": "Source",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "MergeDeep",
						"package": "type-fest"
					}
				},
				{
					"id": 1333,
					"name": "mergeDeep",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Merges the "
							},
							{
								"kind": "code",
								"text": "`source`"
							},
							{
								"kind": "text",
								"text": " object into the "
							},
							{
								"kind": "code",
								"text": "`destination`"
							},
							{
								"kind": "text",
								"text": " object. The merge is similar to performing "
							},
							{
								"kind": "code",
								"text": "`{ ...destination, ... source }`"
							},
							{
								"kind": "text",
								"text": " (where disjoint values from each object would be copied as-is, and for any overlapping props the value from "
							},
							{
								"kind": "code",
								"text": "`source`"
							},
							{
								"kind": "text",
								"text": " would be used); But for *each prop* ("
							},
							{
								"kind": "code",
								"text": "`p`"
							},
							{
								"kind": "text",
								"text": "), if **both** "
							},
							{
								"kind": "code",
								"text": "`destination`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`source`"
							},
							{
								"kind": "text",
								"text": " have a **plain-object** as a value, the value would be taken as the result of recursively deepMerging them ("
							},
							{
								"kind": "code",
								"text": "`result.p === deepMerge(destination.p, source.p)`"
							},
							{
								"kind": "text",
								"text": ")."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The merged object."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.mergeDeep(source)(destination)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     { foo: 'bar', x: 1 },\n     P.mergeDeep({ foo: 'baz', y: 2 }),\n   );  // => { foo: 'baz', x: 1, y: 2 }"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "merge-deep.ts",
							"line": 39,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge-deep.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1334,
							"name": "Destination",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						},
						{
							"id": 1335,
							"name": "Source",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					],
					"parameters": [
						{
							"id": 1336,
							"name": "source",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The object to merge from. In general, shared keys would be taken from this object."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1335,
								"name": "Source",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1337,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "merge-deep.ts",
									"line": 42,
									"character": 19,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/merge-deep.ts"
								}
							],
							"signatures": [
								{
									"id": 1338,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1339,
											"name": "target",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1334,
												"name": "Destination",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/type-fest@4.26.1/node_modules/type-fest/source/merge-deep.d.ts",
											"qualifiedName": "MergeDeep"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1334,
												"name": "Destination",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 1335,
												"name": "Source",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "MergeDeep",
										"package": "type-fest"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1340,
			"name": "multiply",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "multiply.ts",
					"line": 16,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/multiply.ts"
				},
				{
					"fileName": "multiply.ts",
					"line": 31,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/multiply.ts"
				}
			],
			"signatures": [
				{
					"id": 1341,
					"name": "multiply",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Multiplies two numbers."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.multiply(value, multiplicand);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.multiply(3, 4) // => 12\n   P.reduce([1, 2, 3, 4], P.multiply, 1) // => 24"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "multiply.ts",
							"line": 16,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/multiply.ts"
						}
					],
					"parameters": [
						{
							"id": 1342,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						},
						{
							"id": 1343,
							"name": "multiplicand",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number to multiply the value by."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "bigint"
					}
				},
				{
					"id": 1347,
					"name": "multiply",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Multiplies two numbers."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.multiply(multiplicand)(value);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.multiply(4)(3) // => 12\n   P.map([1, 2, 3, 4], P.multiply(2)) // => [2, 4, 6, 8]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "multiply.ts",
							"line": 31,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/multiply.ts"
						}
					],
					"parameters": [
						{
							"id": 1348,
							"name": "multiplicand",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number to multiply the value by."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1349,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "multiply.ts",
									"line": 31,
									"character": 48,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/multiply.ts"
								}
							],
							"signatures": [
								{
									"id": 1350,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1351,
											"name": "value",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "bigint"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "bigint"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1357,
			"name": "nthBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "nth-by.ts",
					"line": 29,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/nth-by.ts"
				},
				{
					"fileName": "nth-by.ts",
					"line": 50,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/nth-by.ts"
				},
				{
					"fileName": "nth-by.ts",
					"line": 55,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/nth-by.ts"
				}
			],
			"signatures": [
				{
					"id": 1358,
					"name": "nthBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Retrieves the element that would be at the given index if the array were sorted according to specified rules. This function uses the *QuickSelect* algorithm running at an average complexity of *O(n)*. Semantically it is equivalent to "
							},
							{
								"kind": "code",
								"text": "`sortBy(data, ...rules).at(index)`"
							},
							{
								"kind": "text",
								"text": " which would run at *O(nlogn)*.\n\nSee also "
							},
							{
								"kind": "code",
								"text": "`firstBy`"
							},
							{
								"kind": "text",
								"text": " which provides an even more efficient algorithm and a stricter return type, but only for "
							},
							{
								"kind": "code",
								"text": "`index === 0`"
							},
							{
								"kind": "text",
								"text": ". See "
							},
							{
								"kind": "code",
								"text": "`takeFirstBy`"
							},
							{
								"kind": "text",
								"text": " to get all the elements up to and including "
							},
							{
								"kind": "code",
								"text": "`index`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The element at the specified index in the sorted order, or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " if the index is out of bounds."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.nthBy(data, index, ...rules);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.nthBy([2,1,4,5,3,], 2, identity()); // => 3"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "nth-by.ts",
							"line": 29,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/nth-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1359,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 1360,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The input array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1359,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1361,
							"name": "index",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The zero-based index for selecting the element in the sorted order. Negative indices count backwards from the end."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1362,
							"name": "rules",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
									},
									{
										"kind": "code",
										"text": "`<`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`>`"
									},
									{
										"kind": "text",
										"text": " operators. Earlier rules take precedence over later ones. Use the syntax "
									},
									{
										"kind": "code",
										"text": "`[projection, \"desc\"]`"
									},
									{
										"kind": "text",
										"text": " for descending order."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "number"
													},
													"objectType": {
														"type": "reference",
														"target": 1359,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "number"
													},
													"objectType": {
														"type": "reference",
														"target": 1359,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "indexedAccess",
								"indexType": {
									"type": "intrinsic",
									"name": "number"
								},
								"objectType": {
									"type": "reference",
									"target": 1359,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				},
				{
					"id": 1363,
					"name": "nthBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Retrieves the element that would be at the given index if the array were sorted according to specified rules. This function uses the *QuickSelect* algorithm running at an average complexity of *O(n)*. Semantically it is equivalent to "
							},
							{
								"kind": "code",
								"text": "`sortBy(data, ...rules)[index]`"
							},
							{
								"kind": "text",
								"text": " which would run at *O(nlogn)*.\n\nSee also "
							},
							{
								"kind": "code",
								"text": "`firstBy`"
							},
							{
								"kind": "text",
								"text": " which provides an even more efficient algorithm and a stricter return type, but only for "
							},
							{
								"kind": "code",
								"text": "`index === 0`"
							},
							{
								"kind": "text",
								"text": ". See "
							},
							{
								"kind": "code",
								"text": "`takeFirstBy`"
							},
							{
								"kind": "text",
								"text": " to get all the elements up to and including "
							},
							{
								"kind": "code",
								"text": "`index`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The element at the specified index in the sorted order, or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " if the index is out of bounds."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.nthBy(index, ...rules)(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([2,1,4,5,3,], P.nthBy(2, identity())); // => 3"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "nth-by.ts",
							"line": 50,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/nth-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1364,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 1365,
							"name": "index",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The zero-based index for selecting the element in the sorted order. Negative indices count backwards from the end."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1366,
							"name": "rules",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
									},
									{
										"kind": "code",
										"text": "`<`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`>`"
									},
									{
										"kind": "text",
										"text": " operators. Earlier rules take precedence over later ones. Use the syntax "
									},
									{
										"kind": "code",
										"text": "`[projection, \"desc\"]`"
									},
									{
										"kind": "text",
										"text": " for descending order."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "number"
													},
													"objectType": {
														"type": "reference",
														"target": 1364,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "number"
													},
													"objectType": {
														"type": "reference",
														"target": 1364,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1367,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "nth-by.ts",
									"line": 53,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/nth-by.ts"
								}
							],
							"signatures": [
								{
									"id": 1368,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1369,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1364,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "intrinsic",
													"name": "number"
												},
												"objectType": {
													"type": "reference",
													"target": 1364,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1370,
			"name": "objOf",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "obj-of.ts",
					"line": 14,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/obj-of.ts"
				},
				{
					"fileName": "obj-of.ts",
					"line": 26,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/obj-of.ts"
				},
				{
					"fileName": "obj-of.ts",
					"line": 30,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/obj-of.ts"
				}
			],
			"signatures": [
				{
					"id": 1371,
					"name": "objOf",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an object containing a single "
							},
							{
								"kind": "code",
								"text": "`key:value`"
							},
							{
								"kind": "text",
								"text": " pair."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.objOf(value, key)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.objOf(10, 'a') // => { a: 10 }"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "obj-of.ts",
							"line": 14,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/obj-of.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1372,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1373,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"parameters": [
						{
							"id": 1374,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The object value."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1372,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1375,
							"name": "key",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The property name."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1373,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "mapped",
						"parameter": "x",
						"parameterType": {
							"type": "reference",
							"target": 1373,
							"name": "K",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						},
						"templateType": {
							"type": "reference",
							"target": 1372,
							"name": "T",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 1376,
					"name": "objOf",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an object containing a single "
							},
							{
								"kind": "code",
								"text": "`key:value`"
							},
							{
								"kind": "text",
								"text": " pair."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.objOf(key)(value)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(10, P.objOf('a')) // => { a: 10 }"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "obj-of.ts",
							"line": 26,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/obj-of.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1377,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1378,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"parameters": [
						{
							"id": 1379,
							"name": "key",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The property name."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1378,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1380,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "obj-of.ts",
									"line": 28,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/obj-of.ts"
								}
							],
							"signatures": [
								{
									"id": 1381,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1382,
											"name": "value",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1377,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "mapped",
										"parameter": "x",
										"parameterType": {
											"type": "reference",
											"target": 1378,
											"name": "K",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										},
										"templateType": {
											"type": "reference",
											"target": 1377,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1383,
			"name": "omit",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "omit.ts",
					"line": 15,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit.ts"
				},
				{
					"fileName": "omit.ts",
					"line": 31,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit.ts"
				},
				{
					"fileName": "omit.ts",
					"line": 36,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit.ts"
				}
			],
			"signatures": [
				{
					"id": 1384,
					"name": "omit",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a partial copy of an object omitting the keys specified."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.omit(names)(obj);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe({ a: 1, b: 2, c: 3, d: 4 }, P.omit(['a', 'd'])) // => { b: 2, c: 3 }"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "omit.ts",
							"line": 15,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1385,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 1386,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 1387,
							"name": "propNames",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The property names."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 1386,
										"name": "K",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1388,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "omit.ts",
									"line": 17,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit.ts"
								}
							],
							"signatures": [
								{
									"id": 1389,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1390,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1385,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Omit"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1385,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 1386,
												"name": "K",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Omit",
										"package": "typescript"
									}
								}
							]
						}
					}
				},
				{
					"id": 1391,
					"name": "omit",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a partial copy of an object omitting the keys specified."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.omit(obj, names);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.omit({ a: 1, b: 2, c: 3, d: 4 }, ['a', 'd']) // => { b: 2, c: 3 }"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "omit.ts",
							"line": 31,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1392,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 1393,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 1394,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The object."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1392,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1395,
							"name": "propNames",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The property names."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 1393,
										"name": "K",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Omit"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1392,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 1393,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Omit",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 1396,
			"name": "omitBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "omit-by.ts",
					"line": 120,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit-by.ts"
				},
				{
					"fileName": "omit-by.ts",
					"line": 150,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit-by.ts"
				}
			],
			"signatures": [
				{
					"id": 1397,
					"name": "omitBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a shallow copy of the data, and then removes any keys that the\npredicate rejects. Symbol keys are not passed to the predicate and would be\npassed through to the output as-is.\n\nSee "
							},
							{
								"kind": "code",
								"text": "`pickBy`"
							},
							{
								"kind": "text",
								"text": " for a complementary function which starts with an empty object\nand adds the entries that the predicate accepts. Because it is additive,\nsymbol keys will not be passed through to the output object."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A shallow copy of the input object with the rejected entries\nremoved."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.omitBy(data, predicate)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.omitBy({a: 1, b: 2, A: 3, B: 4}, (val, key) => key.toUpperCase() === key) // => {a: 1, b: 2}"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "omit-by.ts",
							"line": 120,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1398,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 1399,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1400,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The target object."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1398,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1401,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function that takes the value, key, and the data itself\nand returns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the entry shouldn't be part of the output object, or\n"
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " to keep it. If the function is a type-guard on the value the output\ntype would be narrowed accordingly."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1402,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "omit-by.ts",
											"line": 125,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit-by.ts"
										}
									],
									"signatures": [
										{
											"id": 1403,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "omit-by.ts",
													"line": 125,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit-by.ts"
												}
											],
											"parameters": [
												{
													"id": 1404,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyedValueOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1398,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyedValueOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1405,
													"name": "key",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1398,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1406,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1398,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "value",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"target": 1399,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/omit-by.ts",
							"qualifiedName": "PartialEnumerableKeysNarrowed"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1398,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 1399,
								"name": "S",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "PartialEnumerableKeysNarrowed",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 1416,
					"name": "omitBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a partial copy of an object omitting the keys matching predicate."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.omitBy(fn)(object)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.omitBy((val, key) => key.toUpperCase() === key)({a: 1, b: 2, A: 3, B: 4}) // => {a: 1, b: 2}"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "omit-by.ts",
							"line": 150,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1417,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 1418,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1419,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The predicate."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1420,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "omit-by.ts",
											"line": 154,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit-by.ts"
										}
									],
									"signatures": [
										{
											"id": 1421,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "omit-by.ts",
													"line": 154,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit-by.ts"
												}
											],
											"parameters": [
												{
													"id": 1422,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyedValueOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1417,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyedValueOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1423,
													"name": "key",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1417,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1424,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1417,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "value",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"target": 1418,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1425,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "omit-by.ts",
									"line": 159,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/omit-by.ts"
								}
							],
							"signatures": [
								{
									"id": 1426,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1427,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1417,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/omit-by.ts",
											"qualifiedName": "PartialEnumerableKeysNarrowed"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1417,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 1418,
												"name": "S",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "PartialEnumerableKeysNarrowed",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1439,
			"name": "once",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "once.ts",
					"line": 13,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/once.ts"
				}
			],
			"signatures": [
				{
					"id": 1440,
					"name": "once",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a function that is restricted to invoking "
							},
							{
								"kind": "code",
								"text": "`func`"
							},
							{
								"kind": "text",
								"text": " once. Repeat calls to the function return the value of the first invocation."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.once(fn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const initialize = P.once(createApplication);\ninitialize();\ninitialize();\n// => "
									},
									{
										"kind": "code",
										"text": "`createApplication`"
									},
									{
										"kind": "text",
										"text": " is invoked once"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "once.ts",
							"line": 13,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/once.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1441,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1442,
							"name": "fn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function to wrap."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1443,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "once.ts",
											"line": 13,
											"character": 28,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/once.ts"
										}
									],
									"signatures": [
										{
											"id": 1444,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "once.ts",
													"line": 13,
													"character": 28,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/once.ts"
												}
											],
											"type": {
												"type": "reference",
												"target": 1441,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1445,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "once.ts",
									"line": 13,
									"character": 38,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/once.ts"
								}
							],
							"signatures": [
								{
									"id": 1446,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 1441,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1447,
			"name": "only",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "only.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/only.ts"
				},
				{
					"fileName": "only.ts",
					"line": 42,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/only.ts"
				},
				{
					"fileName": "only.ts",
					"line": 46,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/only.ts"
				}
			],
			"signatures": [
				{
					"id": 1448,
					"name": "only",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the first and only element of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": ", or undefined otherwise."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.only(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.only([]) // => undefined\n   P.only([1]) // => 1\n   P.only([1, 2]) // => undefined"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "only.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/only.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1449,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 1450,
							"name": "array",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The target array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Readonly"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1449,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "Readonly",
								"package": "typescript"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/only.ts",
							"qualifiedName": "Only"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1449,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Only",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 1451,
					"name": "only",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the first and only element of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": ", or undefined otherwise."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.only()(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([], P.only()); // => undefined\n   P.pipe([1], P.only()); // => 1\n   P.pipe([1, 2], P.only()); // => undefined"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "only.ts",
							"line": 42,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/only.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1452,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1453,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "only.ts",
									"line": 42,
									"character": 53,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/only.ts"
								}
							],
							"signatures": [
								{
									"id": 1454,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1455,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Readonly"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 1452,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "Readonly",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/only.ts",
											"qualifiedName": "Only"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1452,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Only",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1456,
			"name": "partition",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "partition.ts",
					"line": 25,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/partition.ts"
				},
				{
					"fileName": "partition.ts",
					"line": 55,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/partition.ts"
				}
			],
			"signatures": [
				{
					"id": 1457,
					"name": "partition",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Splits a collection into two groups, the first of which contains elements the\n"
							},
							{
								"kind": "code",
								"text": "`predicate`"
							},
							{
								"kind": "text",
								"text": " type guard passes, and the second one containing the rest."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A 2-tuple of arrays where the first array contains the elements that\npassed the predicate, and the second array contains the elements that did\nnot. The items are in the same order as they were in the original array."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.partition(data, predicate)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.partition(\n     ['one', 'two', 'forty two'],\n     x => x.length === 3,\n   ); // => [['one', 'two'], ['forty two']]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "partition.ts",
							"line": 25,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/partition.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1458,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1459,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1460,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items to split."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 1458,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 1461,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " to add the element to the first partition, and and\n"
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " to add the element to the other partition. A type-predicate can also\nbe used to narrow the result."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1462,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "partition.ts",
											"line": 27,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/partition.ts"
										}
									],
									"signatures": [
										{
											"id": 1463,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "partition.ts",
													"line": 27,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/partition.ts"
												}
											],
											"parameters": [
												{
													"id": 1464,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1458,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 1465,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1466,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 1458,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "value",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"target": 1459,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 1459,
									"name": "S",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Exclude"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": 1458,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										},
										{
											"type": "reference",
											"target": 1459,
											"name": "S",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									],
									"name": "Exclude",
									"package": "typescript"
								}
							}
						]
					}
				},
				{
					"id": 1476,
					"name": "partition",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Splits a collection into two groups, the first of which contains elements the\n"
							},
							{
								"kind": "code",
								"text": "`predicate`"
							},
							{
								"kind": "text",
								"text": " type guard passes, and the second one containing the rest."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A 2-tuple of arrays where the first array contains the elements that\npassed the predicate, and the second array contains the elements that did\nnot. The items are in the same order as they were in the original array."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.partition(predicate)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     ['one', 'two', 'forty two'],\n     P.partition(x => x.length === 3),\n   ); // => [['one', 'two'], ['forty two']]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "partition.ts",
							"line": 55,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/partition.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1477,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1478,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1479,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. It\nshould return "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " to add the element to the first partition, and and\n"
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " to add the element to the other partition. A type-predicate can also\nbe used to narrow the result."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1480,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "partition.ts",
											"line": 56,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/partition.ts"
										}
									],
									"signatures": [
										{
											"id": 1481,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "partition.ts",
													"line": 56,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/partition.ts"
												}
											],
											"parameters": [
												{
													"id": 1482,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1477,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 1483,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1484,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 1477,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "value",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"target": 1478,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1485,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "partition.ts",
									"line": 57,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/partition.ts"
								}
							],
							"signatures": [
								{
									"id": 1486,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1487,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 1477,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 1478,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
														"qualifiedName": "Exclude"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": 1477,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														},
														{
															"type": "reference",
															"target": 1478,
															"name": "S",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													],
													"name": "Exclude",
													"package": "typescript"
												}
											}
										]
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1499,
			"name": "pathOr",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "path-or.ts",
					"line": 84,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/path-or.ts"
				},
				{
					"fileName": "path-or.ts",
					"line": 123,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/path-or.ts"
				}
			],
			"signatures": [
				{
					"id": 1500,
					"name": "pathOr",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Gets the value at "
							},
							{
								"kind": "code",
								"text": "`path`"
							},
							{
								"kind": "text",
								"text": " of "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": ". If the resolved value is "
							},
							{
								"kind": "code",
								"text": "`null`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": ", the "
							},
							{
								"kind": "code",
								"text": "`defaultValue`"
							},
							{
								"kind": "text",
								"text": " is returned in its place."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.pathOr(object, array, defaultValue)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pathOr({x: 10}, ['y'], 2) // 2\n   P.pathOr({y: 10}, ['y'], 2) // 10"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "path-or.ts",
							"line": 84,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/path-or.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1501,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1502,
							"name": "A",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"parameters": [
						{
							"id": 1503,
							"name": "object",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The target object."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1501,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1504,
							"name": "path",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The path of the property to get."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": 1502,
											"name": "A",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									]
								}
							}
						},
						{
							"id": 1505,
							"name": "defaultValue",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The default value."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/path-or.ts",
									"qualifiedName": "PathValue1"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1501,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 1502,
										"name": "A",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "PathValue1",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/path-or.ts",
							"qualifiedName": "PathValue1"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1501,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 1502,
								"name": "A",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "PathValue1",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 1521,
					"name": "pathOr",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Gets the value at "
							},
							{
								"kind": "code",
								"text": "`path`"
							},
							{
								"kind": "text",
								"text": " of "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": ". If the resolved value is "
							},
							{
								"kind": "code",
								"text": "`undefined`"
							},
							{
								"kind": "text",
								"text": ", the "
							},
							{
								"kind": "code",
								"text": "`defaultValue`"
							},
							{
								"kind": "text",
								"text": " is returned in its place."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.pathOr(array, defaultValue)(object)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe({x: 10}, P.pathOr(['y'], 2)) // 2\n   P.pipe({y: 10}, P.pathOr(['y'], 2)) // 10"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "path-or.ts",
							"line": 123,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/path-or.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1522,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1523,
							"name": "A",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "never"
							}
						}
					],
					"parameters": [
						{
							"id": 1524,
							"name": "path",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The path of the property to get."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": 1523,
											"name": "A",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									]
								}
							}
						},
						{
							"id": 1525,
							"name": "defaultValue",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The default value."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/path-or.ts",
									"qualifiedName": "PathValue1"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 1522,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 1523,
										"name": "A",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "PathValue1",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1526,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "path-or.ts",
									"line": 126,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/path-or.ts"
								}
							],
							"signatures": [
								{
									"id": 1527,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1528,
											"name": "object",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1522,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/path-or.ts",
											"qualifiedName": "PathValue1"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1522,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 1523,
												"name": "A",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "PathValue1",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1548,
			"name": "pick",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "pick.ts",
					"line": 13,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick.ts"
				},
				{
					"fileName": "pick.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick.ts"
				},
				{
					"fileName": "pick.ts",
					"line": 33,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick.ts"
				}
			],
			"signatures": [
				{
					"id": 1549,
					"name": "pick",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an object composed of the picked "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": " properties."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.pick([prop1, prop2])(object)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe({ a: 1, b: 2, c: 3, d: 4 }, P.pick(['a', 'd'])) // => { a: 1, d: 4 }"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "pick.ts",
							"line": 13,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1550,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 1551,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 1552,
							"name": "names",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The properties names."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 1551,
										"name": "K",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1553,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "pick.ts",
									"line": 15,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick.ts"
								}
							],
							"signatures": [
								{
									"id": 1554,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1555,
											"name": "object",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1550,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Pick"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1550,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 1551,
												"name": "K",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Pick",
										"package": "typescript"
									}
								}
							]
						}
					}
				},
				{
					"id": 1556,
					"name": "pick",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an object composed of the picked "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": " properties."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.pick(object, [prop1, prop2])"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pick({ a: 1, b: 2, c: 3, d: 4 }, ['a', 'd']) // => { a: 1, d: 4 }"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "pick.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1557,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 1558,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 1559,
							"name": "object",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The target object."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1557,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1560,
							"name": "names",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The properties names."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 1558,
										"name": "K",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Pick"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1557,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 1558,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Pick",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 1561,
			"name": "pickBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "pick-by.ts",
					"line": 122,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick-by.ts"
				},
				{
					"fileName": "pick-by.ts",
					"line": 165,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick-by.ts"
				}
			],
			"signatures": [
				{
					"id": 1562,
					"name": "pickBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Iterates over the entries of "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " and reconstructs the object using only\nentries that "
							},
							{
								"kind": "code",
								"text": "`predicate`"
							},
							{
								"kind": "text",
								"text": " accepts. Symbol keys are not passed to the predicate\nand would be filtered out from the output object.\n\nSee "
							},
							{
								"kind": "code",
								"text": "`omitBy`"
							},
							{
								"kind": "text",
								"text": " for a complementary function which starts with a shallow copy of\nthe input object and removes the entries that the predicate rejects. Because\nit is subtractive symbol keys would be copied over to the output object.\nSee also "
							},
							{
								"kind": "code",
								"text": "`entries`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`filter`"
							},
							{
								"kind": "text",
								"text": ", and "
							},
							{
								"kind": "code",
								"text": "`fromEntries`"
							},
							{
								"kind": "text",
								"text": " which could be used to build\nyour own version of "
							},
							{
								"kind": "code",
								"text": "`pickBy`"
							},
							{
								"kind": "text",
								"text": " if you need more control (though the resulting\ntype might be less precise)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A shallow copy of the input object with the rejected entries\nremoved."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.pickBy(data, predicate)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pickBy({a: 1, b: 2, A: 3, B: 4}, (val, key) => key.toUpperCase() === key) // => {A: 3, B: 4}"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "pick-by.ts",
							"line": 122,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1563,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 1564,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1565,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The target object."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1563,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1566,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function that takes the value, key, and the data itself\nand returns true if the entry should be part of the output object, or "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": "\nto remove it. If the function is a type-guard on the value the output type\nwould be narrowed accordingly."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1567,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "pick-by.ts",
											"line": 127,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick-by.ts"
										}
									],
									"signatures": [
										{
											"id": 1568,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "pick-by.ts",
													"line": 127,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick-by.ts"
												}
											],
											"parameters": [
												{
													"id": 1569,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyedValueOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1563,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyedValueOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1570,
													"name": "key",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1563,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1571,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1563,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "value",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"target": 1564,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/pick-by.ts",
							"qualifiedName": "EnumeratedPartialNarrowed"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 1563,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 1564,
								"name": "S",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "EnumeratedPartialNarrowed",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 1581,
					"name": "pickBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Iterates over the entries of "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " and reconstructs the object using only\nentries that "
							},
							{
								"kind": "code",
								"text": "`predicate`"
							},
							{
								"kind": "text",
								"text": " accepts. Symbol keys are not passed to the predicate\nand would be filtered out from the output object.\n\nSee "
							},
							{
								"kind": "code",
								"text": "`omitBy`"
							},
							{
								"kind": "text",
								"text": " for a complementary function which starts with a shallow copy of\nthe input object and removes the entries that the predicate rejects. Because\nit is subtractive symbol keys would be copied over to the output object.\nSee also "
							},
							{
								"kind": "code",
								"text": "`entries`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`filter`"
							},
							{
								"kind": "text",
								"text": ", and "
							},
							{
								"kind": "code",
								"text": "`fromEntries`"
							},
							{
								"kind": "text",
								"text": " which could be used to build\nyour own version of "
							},
							{
								"kind": "code",
								"text": "`pickBy`"
							},
							{
								"kind": "text",
								"text": " if you need more control (though the resulting\ntype might be less precise)."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.pickBy(predicate)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe({a: 1, b: 2, A: 3, B: 4}, pickBy((val, key) => key.toUpperCase() === key)); // => {A: 3, B: 4}"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "pick-by.ts",
							"line": 165,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1582,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 1583,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1584,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function that takes the value, key, and the data itself\nand returns true if the entry should be part of the output object, or "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": "\nto remove it. If the function is a type-guard on the value the output type\nwould be narrowed accordingly."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1585,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "pick-by.ts",
											"line": 169,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick-by.ts"
										}
									],
									"signatures": [
										{
											"id": 1586,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "pick-by.ts",
													"line": 169,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick-by.ts"
												}
											],
											"parameters": [
												{
													"id": 1587,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyedValueOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1582,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyedValueOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1588,
													"name": "key",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "EnumerableStringKeyOf"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 1582,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "EnumerableStringKeyOf",
														"package": "@vinicunca/perkakas"
													}
												},
												{
													"id": 1589,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1582,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "value",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"target": 1583,
													"name": "S",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1590,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "pick-by.ts",
									"line": 174,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/pick-by.ts"
								}
							],
							"signatures": [
								{
									"id": 1591,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 1592,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 1582,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/pick-by.ts",
											"qualifiedName": "EnumeratedPartialNarrowed"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 1582,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 1583,
												"name": "S",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "EnumeratedPartialNarrowed",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 1604,
			"name": "pipe",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "pipe.ts",
					"line": 75,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/pipe.ts"
				}
			],
			"signatures": [
				{
					"id": 1605,
					"name": "pipe",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Perform left-to-right function composition."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(data, op1, op2, op3)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [1, 2, 3, 4],\n     P.map(x => x * 2),\n     arr => [arr[0] + arr[1], arr[2] + arr[3]],\n   ) // => [6, 14]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "pipe.ts",
							"line": 75,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/pipe.ts"
						}
					],
					"typeParameters": [
						{
							"id": 1606,
							"name": "A",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 1607,
							"name": "B",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 1608,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The initial value."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 1606,
								"name": "A",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 1609,
							"name": "op1",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1610,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "pipe.ts",
											"line": 75,
											"character": 42,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/pipe.ts"
										}
									],
									"signatures": [
										{
											"id": 1611,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "pipe.ts",
													"line": 75,
													"character": 42,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/pipe.ts"
												}
											],
											"parameters": [
												{
													"id": 1612,
													"name": "input",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 1606,
														"name": "A",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 1607,
												"name": "B",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 1607,
						"name": "B",
						"package": "@vinicunca/perkakas",
						"refersToTypeParameter": true
					}
				}
			]
		},
		{
			"id": 2266,
			"name": "piped",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "piped.ts",
					"line": 23,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/piped.ts"
				}
			],
			"signatures": [
				{
					"id": 2267,
					"name": "piped",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A dataLast version of "
							},
							{
								"kind": "code",
								"text": "`pipe`"
							},
							{
								"kind": "text",
								"text": " that could be used to provide more complex\ncomputations to functions that accept a function as a param (like "
							},
							{
								"kind": "code",
								"text": "`map`"
							},
							{
								"kind": "text",
								"text": ",\n"
							},
							{
								"kind": "code",
								"text": "`filter`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`groupBy`"
							},
							{
								"kind": "text",
								"text": ", etc.).\n\nThe first function must be always annotated. Other functions are\nautomatically inferred."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.piped(...ops)(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.filter(\n     [{ a: 1 }, { a: 2 }, { a: 3 }],\n     P.piped(\n       P.prop('a'),\n       (x) => x % 2 === 0,\n     ),\n   ); // => [{ a: 2 }]"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "piped.ts",
							"line": 23,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/piped.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2268,
							"name": "A",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 2269,
							"name": "B",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2270,
							"name": "op1",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2271,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "piped.ts",
											"line": 23,
											"character": 33,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/piped.ts"
										}
									],
									"signatures": [
										{
											"id": 2272,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "piped.ts",
													"line": 23,
													"character": 33,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/piped.ts"
												}
											],
											"parameters": [
												{
													"id": 2273,
													"name": "input",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2268,
														"name": "A",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 2269,
												"name": "B",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2274,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "piped.ts",
									"line": 23,
									"character": 51,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/piped.ts"
								}
							],
							"signatures": [
								{
									"id": 2275,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2276,
											"name": "value",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2268,
												"name": "A",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 2269,
										"name": "B",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2442,
			"name": "product",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "product.ts",
					"line": 40,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/product.ts"
				},
				{
					"fileName": "product.ts",
					"line": 65,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/product.ts"
				},
				{
					"fileName": "product.ts",
					"line": 71,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/product.ts"
				}
			],
			"signatures": [
				{
					"id": 2443,
					"name": "product",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Compute the product of the numbers in the array, or return 1 for an empty\narray.\n\nWorks for both "
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`bigint`"
							},
							{
								"kind": "text",
								"text": " arrays, but not arrays that contain both\ntypes.\n\nIMPORTANT: The result for empty arrays would be 1 ("
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": ") regardless of\nthe type of the array; to avoid adding this to the return type for cases\nwhere the array is known to be non-empty you can use "
							},
							{
								"kind": "code",
								"text": "`hasAtLeast`"
							},
							{
								"kind": "text",
								"text": " or\n"
							},
							{
								"kind": "code",
								"text": "`isEmpty`"
							},
							{
								"kind": "text",
								"text": " to guard against this case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.product(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.product([1, 2, 3]); // => 6\n  P.product([1n, 2n, 3n]); // => 6n\n  P.product([]); // => 1"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "product.ts",
							"line": 40,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/product.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2444,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "tuple"
										}
									},
									{
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									},
									{
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "bigint"
											}
										}
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 2445,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array of numbers."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2444,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/product.ts",
							"qualifiedName": "Product"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2444,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Product",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 2446,
					"name": "product",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Compute the product of the numbers in the array, or return 1 for an empty\narray.\n\nWorks for both "
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`bigint`"
							},
							{
								"kind": "text",
								"text": " arrays, but not arrays that contain both\ntypes.\n\nIMPORTANT: The result for empty arrays would be 1 ("
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": ") regardless of\nthe type of the array; to avoid adding this to the return type for cases\nwhere the array is known to be non-empty you can use "
							},
							{
								"kind": "code",
								"text": "`hasAtLeast`"
							},
							{
								"kind": "text",
								"text": " or\n"
							},
							{
								"kind": "code",
								"text": "`isEmpty`"
							},
							{
								"kind": "text",
								"text": " to guard against this case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.product()(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 3], P.product()); // => 6\n  P.pipe([1n, 2n, 3n], R.product()); // => 6n\n  P.pipe([], P.product()); // => 1"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "product.ts",
							"line": 65,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/product.ts"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2447,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "product.ts",
									"line": 65,
									"character": 27,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/product.ts"
								}
							],
							"signatures": [
								{
									"id": 2448,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 2450,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "IterableContainer"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "bigint"
															}
														],
														"name": "IterableContainer",
														"package": "@vinicunca/perkakas"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "IterableContainer"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "number"
															}
														],
														"name": "IterableContainer",
														"package": "@vinicunca/perkakas"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 2449,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2450,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/product.ts",
											"qualifiedName": "Product"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 2450,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Product",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2451,
			"name": "prop",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "prop.ts",
					"line": 15,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/prop.ts"
				},
				{
					"fileName": "prop.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/prop.ts"
				},
				{
					"fileName": "prop.ts",
					"line": 30,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/prop.ts"
				}
			],
			"signatures": [
				{
					"id": 2452,
					"name": "prop",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Gets the value of the given property."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.prop(data, key);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.prop({ foo: 'bar' }, 'foo'); // => 'bar'"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "prop.ts",
							"line": 15,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/prop.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2453,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 2454,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 2455,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The object to extract the prop from."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2453,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2456,
							"name": "key",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The key of the property to extract."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2454,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "indexedAccess",
						"indexType": {
							"type": "reference",
							"target": 2454,
							"name": "K",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						},
						"objectType": {
							"type": "reference",
							"target": 2453,
							"name": "T",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 2457,
					"name": "prop",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Gets the value of the given property."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.prop(key)(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe({foo: 'bar'}, P.prop('foo')) // => 'bar'"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "prop.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/prop.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2458,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 2459,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 2460,
							"name": "key",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The key of the property to extract."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2459,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2461,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "prop.ts",
									"line": 28,
									"character": 52,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/prop.ts"
								}
							],
							"signatures": [
								{
									"id": 2462,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2463,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2458,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "reference",
											"target": 2459,
											"name": "K",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										},
										"objectType": {
											"type": "reference",
											"target": 2458,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2470,
			"name": "pullObject",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "pull-object.ts",
					"line": 36,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
				},
				{
					"fileName": "pull-object.ts",
					"line": 75,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
				},
				{
					"fileName": "pull-object.ts",
					"line": 84,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
				}
			],
			"signatures": [
				{
					"id": 2471,
					"name": "pullObject",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an object that maps the result of "
							},
							{
								"kind": "code",
								"text": "`valueExtractor`"
							},
							{
								"kind": "text",
								"text": " with a key\nresulting from running "
							},
							{
								"kind": "code",
								"text": "`keyExtractor`"
							},
							{
								"kind": "text",
								"text": " on each item in "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": ". Duplicate keys\nare overwritten, guaranteeing that the extractor functions are run on each\nitem in "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n"
							},
							{
								"kind": "code",
								"text": "`fromKeys`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *keys* and a mapper for values.\n"
							},
							{
								"kind": "code",
								"text": "`indexBy`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *values* and a mapper for keys.\n"
							},
							{
								"kind": "code",
								"text": "`fromEntries`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of key-value pairs.\n"
							},
							{
								"kind": "code",
								"text": "`mapToObj`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.pullObject(data, keyExtractor, valueExtractor);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pullObject(\n    [\n      { name: \"john\", email: \"john@bebedag.com\" },\n      { name: \"jane\", email: \"jane@bebedag.com\" }\n    ],\n    P.prop(\"name\"),\n    P.prop(\"email\"),\n  ); // => { john: \"john@bebedag.com\", jane: \"jane@bebedag.com\" }"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "pull-object.ts",
							"line": 36,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2472,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 2473,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							}
						},
						{
							"id": 2474,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2475,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items used to pull/extract the keys and values from."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2472,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2476,
							"name": "keyExtractor",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Computes the key for item."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2477,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "pull-object.ts",
											"line": 42,
											"character": 16,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
										}
									],
									"signatures": [
										{
											"id": 2478,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "pull-object.ts",
													"line": 42,
													"character": 16,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
												}
											],
											"parameters": [
												{
													"id": 2479,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 2472,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 2480,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2481,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2472,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 2473,
												"name": "K",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						},
						{
							"id": 2482,
							"name": "valueExtractor",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Computes the value for the item."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2483,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "pull-object.ts",
											"line": 43,
											"character": 18,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
										}
									],
									"signatures": [
										{
											"id": 2484,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "pull-object.ts",
													"line": 43,
													"character": 18,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
												}
											],
											"parameters": [
												{
													"id": 2485,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 2472,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 2486,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2487,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2472,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 2474,
												"name": "V",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "ExactRecord"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2473,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 2474,
								"name": "V",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "ExactRecord",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 2488,
					"name": "pullObject",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates an object that maps the result of "
							},
							{
								"kind": "code",
								"text": "`valueExtractor`"
							},
							{
								"kind": "text",
								"text": " with a key\nresulting from running "
							},
							{
								"kind": "code",
								"text": "`keyExtractor`"
							},
							{
								"kind": "text",
								"text": " on each item in "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": ". Duplicate keys\nare overwritten, guaranteeing that the extractor functions are run on each\nitem in "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": ".\n\nThere are several other functions that could be used to build an object from\nan array:\n"
							},
							{
								"kind": "code",
								"text": "`fromKeys`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *keys* and a mapper for values.\n"
							},
							{
								"kind": "code",
								"text": "`indexBy`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of *values* and a mapper for keys.\n"
							},
							{
								"kind": "code",
								"text": "`fromEntries`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of key-value pairs.\n"
							},
							{
								"kind": "code",
								"text": "`mapToObj`"
							},
							{
								"kind": "text",
								"text": " - Builds an object from an array of items and a single mapper for key-value pairs.\nRefer to the docs for more details."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.pullObject(keyExtractor, valueExtractor)(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n    [\n      { name: \"john\", email: \"john@bebedag.com\" },\n      { name: \"jane\", email: \"jane@bebedag.com\" }\n    ],\n    P.pullObject(P.prop(\"email\"), P.prop(\"name\")),\n  ); // => { john: \"john@bebedag.com\", jane: \"jane@bebedag.com\" }"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "pull-object.ts",
							"line": 75,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2489,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 2490,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "PropertyKey"
								},
								"name": "PropertyKey",
								"package": "typescript"
							}
						},
						{
							"id": 2491,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2492,
							"name": "keyExtractor",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Computes the key for item."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2493,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "pull-object.ts",
											"line": 80,
											"character": 16,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
										}
									],
									"signatures": [
										{
											"id": 2494,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "pull-object.ts",
													"line": 80,
													"character": 16,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
												}
											],
											"parameters": [
												{
													"id": 2495,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 2489,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 2496,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2497,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2489,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 2490,
												"name": "K",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						},
						{
							"id": 2498,
							"name": "valueExtractor",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Computes the value for the item."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2499,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "pull-object.ts",
											"line": 81,
											"character": 18,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
										}
									],
									"signatures": [
										{
											"id": 2500,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "pull-object.ts",
													"line": 81,
													"character": 18,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
												}
											],
											"parameters": [
												{
													"id": 2501,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 2489,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 2502,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2503,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2489,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 2491,
												"name": "V",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2504,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "pull-object.ts",
									"line": 82,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/pull-object.ts"
								}
							],
							"signatures": [
								{
									"id": 2505,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2506,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2489,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "ExactRecord"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 2490,
												"name": "K",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 2491,
												"name": "V",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "ExactRecord",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2507,
			"name": "randomInteger",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "random-integer.ts",
					"line": 39,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/random-integer.ts"
				}
			],
			"signatures": [
				{
					"id": 2508,
					"name": "randomInteger",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Generate a random integer between "
							},
							{
								"kind": "code",
								"text": "`from`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`to`"
							},
							{
								"kind": "text",
								"text": " (inclusive)."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The random integer."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.randomInt(from, to)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.randomInt(1, 10) // => 5\n  P.randomInt(1.5, 2.6) // => 2"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "random-integer.ts",
							"line": 39,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/random-integer.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2509,
							"name": "From",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2510,
							"name": "To",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"parameters": [
						{
							"id": 2511,
							"name": "from",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The minimum value."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2509,
								"name": "From",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2512,
							"name": "to",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The maximum value."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2510,
								"name": "To",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/random-integer.ts",
							"qualifiedName": "RandomInteger"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2509,
								"name": "From",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 2510,
								"name": "To",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "RandomInteger",
						"package": "@vinicunca/perkakas"
					}
				}
			]
		},
		{
			"id": 2513,
			"name": "randomString",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "random-string.ts",
					"line": 18,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/random-string.ts"
				},
				{
					"fileName": "random-string.ts",
					"line": 31,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/random-string.ts"
				},
				{
					"fileName": "random-string.ts",
					"line": 33,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/random-string.ts"
				}
			],
			"signatures": [
				{
					"id": 2514,
					"name": "randomString",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Random a non-cryptographic random string from characters a-zA-Z0-9."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The random string."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.randomString(length)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.randomString(5) // => aB92J"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "random-string.ts",
							"line": 18,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/random-string.ts"
						}
					],
					"parameters": [
						{
							"id": 2515,
							"name": "length",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The length of the random string."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2516,
					"name": "randomString",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Random a non-cryptographic random string from characters a-zA-Z0-9."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The random string."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.randomString()(length)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(5, P.randomString()) // => aB92J"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "random-string.ts",
							"line": 31,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/random-string.ts"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2517,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "random-string.ts",
									"line": 31,
									"character": 32,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/random-string.ts"
								}
							],
							"signatures": [
								{
									"id": 2518,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2519,
											"name": "length",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2520,
			"name": "range",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "range.ts",
					"line": 14,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/range.ts"
				},
				{
					"fileName": "range.ts",
					"line": 26,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/range.ts"
				},
				{
					"fileName": "range.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/range.ts"
				}
			],
			"signatures": [
				{
					"id": 2521,
					"name": "range",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a list of numbers from "
							},
							{
								"kind": "code",
								"text": "`start`"
							},
							{
								"kind": "text",
								"text": " (inclusive) to "
							},
							{
								"kind": "code",
								"text": "`end`"
							},
							{
								"kind": "text",
								"text": " (exclusive)."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "range(start, end)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.range(1, 5) // => [1, 2, 3, 4]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "range.ts",
							"line": 14,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/range.ts"
						}
					],
					"parameters": [
						{
							"id": 2522,
							"name": "start",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The start number."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2523,
							"name": "end",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The end number."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				},
				{
					"id": 2524,
					"name": "range",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a list of numbers from "
							},
							{
								"kind": "code",
								"text": "`start`"
							},
							{
								"kind": "text",
								"text": " (inclusive) to "
							},
							{
								"kind": "code",
								"text": "`end`"
							},
							{
								"kind": "text",
								"text": " (exclusive)."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "range(end)(start)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.range(5)(1) // => [1, 2, 3, 4]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "range.ts",
							"line": 26,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/range.ts"
						}
					],
					"parameters": [
						{
							"id": 2525,
							"name": "end",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The end number."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2526,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "range.ts",
									"line": 26,
									"character": 36,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/range.ts"
								}
							],
							"signatures": [
								{
									"id": 2527,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2528,
											"name": "start",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2529,
			"name": "rankBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "rank-by.ts",
					"line": 26,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/rank-by.ts"
				},
				{
					"fileName": "rank-by.ts",
					"line": 49,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/rank-by.ts"
				},
				{
					"fileName": "rank-by.ts",
					"line": 54,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/rank-by.ts"
				}
			],
			"signatures": [
				{
					"id": 2530,
					"name": "rankBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Calculates the rank of an item in an array based on "
							},
							{
								"kind": "code",
								"text": "`rules`"
							},
							{
								"kind": "text",
								"text": ". The rank is the position where the item would appear in the sorted array. This function provides an efficient way to determine the rank in *O(n)* time, compared to *O(nlogn)* for the equivalent "
							},
							{
								"kind": "code",
								"text": "`sortedIndex(sortBy(data, ...rules), item)`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The rank of the item in the sorted array in the range [0..data.length]."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.rankBy(data, item, ...rules)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const DATA = [{ a: 5 }, { a: 1 }, { a: 3 }] as const;\n  P.rankBy(DATA, 0, P.prop('a')) // => 0\n  P.rankBy(DATA, 1, P.prop('a')) // => 1\n  P.rankBy(DATA, 2, P.prop('a')) // => 1\n  P.rankBy(DATA, 3, P.prop('a')) // => 2"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "rank-by.ts",
							"line": 26,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/rank-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2531,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2532,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The input array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2531,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 2533,
							"name": "item",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The item whose rank is to be determined."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2531,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2534,
							"name": "rules",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
									},
									{
										"kind": "code",
										"text": "`<`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`>`"
									},
									{
										"kind": "text",
										"text": " operators. Earlier rules take precedence over later ones. Use the syntax "
									},
									{
										"kind": "code",
										"text": "`[projection, \"desc\"]`"
									},
									{
										"kind": "text",
										"text": " for descending order."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 2531,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 2531,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 2535,
					"name": "rankBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Calculates the rank of an item in an array based on "
							},
							{
								"kind": "code",
								"text": "`rules`"
							},
							{
								"kind": "text",
								"text": ". The rank is the position where the item would appear in the sorted array. This function provides an efficient way to determine the rank in *O(n)* time, compared to *O(nlogn)* for the equivalent "
							},
							{
								"kind": "code",
								"text": "`sortedIndex(sortBy(data, ...rules), item)`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The rank of the item in the sorted array in the range [0..data.length]."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.rankBy(item, ...rules)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "const DATA = [{ a: 5 }, { a: 1 }, { a: 3 }] as const;\n  P.pipe(DATA, P.rankBy(0, P.prop('a'))) // => 0\n  P.pipe(DATA, P.rankBy(1, P.prop('a'))) // => 1\n  P.pipe(DATA, P.rankBy(2, P.prop('a'))) // => 1\n  P.pipe(DATA, P.rankBy(3, P.prop('a'))) // => 2"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "rank-by.ts",
							"line": 49,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/rank-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2536,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2537,
							"name": "item",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The item whose rank is to be determined."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2536,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2538,
							"name": "rules",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
									},
									{
										"kind": "code",
										"text": "`<`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`>`"
									},
									{
										"kind": "text",
										"text": " operators. Earlier rules take precedence over later ones. Use the syntax "
									},
									{
										"kind": "code",
										"text": "`[projection, \"desc\"]`"
									},
									{
										"kind": "text",
										"text": " for descending order."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 2536,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 2536,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2539,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "rank-by.ts",
									"line": 52,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/rank-by.ts"
								}
							],
							"signatures": [
								{
									"id": 2540,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2541,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 2536,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2542,
			"name": "reduce",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "reduce.ts",
					"line": 27,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/reduce.ts"
				},
				{
					"fileName": "reduce.ts",
					"line": 61,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/reduce.ts"
				},
				{
					"fileName": "reduce.ts",
					"line": 71,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/reduce.ts"
				}
			],
			"signatures": [
				{
					"id": 2543,
					"name": "reduce",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Executes a user-supplied \"reducer\" callback function on each element of the\narray, in order, passing in the return value from the calculation on the\npreceding element. The final result of running the reducer across all\nelements of the array is a single value. Equivalent to\n"
							},
							{
								"kind": "code",
								"text": "`Array.prototype.reduce`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The value that results from running the \"reducer\" callback function\nto completion over the entire array."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.reduce(data, callbackfn, initialValue)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.reduce([1, 2, 3, 4, 5], (acc, x) => acc + x, 100) // => 115"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "reduce.ts",
							"line": 27,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/reduce.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2544,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 2545,
							"name": "U",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2546,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The items to reduce."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2544,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 2547,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. Its\nreturn value becomes the value of the accumulator parameter on the next\ninvocation of callbackFn. For the last invocation, the return value becomes\nthe return value of reduce()."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2548,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "reduce.ts",
											"line": 29,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/reduce.ts"
										}
									],
									"signatures": [
										{
											"id": 2549,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "reduce.ts",
													"line": 29,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/reduce.ts"
												}
											],
											"parameters": [
												{
													"id": 2550,
													"name": "previousValue",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2545,
														"name": "U",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2551,
													"name": "currentValue",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2544,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2552,
													"name": "currentIndex",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2553,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 2544,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 2545,
												"name": "U",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						},
						{
							"id": 2554,
							"name": "initialValue",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A value to which accumulator is initialized the first\ntime the callback is called. CallbackFn starts executing with the first value\nin the array as currentValue."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2545,
								"name": "U",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 2545,
						"name": "U",
						"package": "@vinicunca/perkakas",
						"refersToTypeParameter": true
					}
				},
				{
					"id": 2555,
					"name": "reduce",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Executes a user-supplied \"reducer\" callback function on each element of the\narray, in order, passing in the return value from the calculation on the\npreceding element. The final result of running the reducer across all\nelements of the array is a single value. Equivalent to\n"
							},
							{
								"kind": "code",
								"text": "`Array.prototype.reduce`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "The value that results from running the \"reducer\" callback function\nto completion over the entire array."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.reduce(fn, initialValue)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 3, 4, 5], P.reduce((acc, x) => acc + x, 100)) // => 115"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "reduce.ts",
							"line": 61,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/reduce.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2556,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 2557,
							"name": "U",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2558,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A function to execute for each element in the array. Its\nreturn value becomes the value of the accumulator parameter on the next\ninvocation of callbackFn. For the last invocation, the return value becomes\nthe return value of reduce()."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2559,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "reduce.ts",
											"line": 62,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/reduce.ts"
										}
									],
									"signatures": [
										{
											"id": 2560,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "reduce.ts",
													"line": 62,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/reduce.ts"
												}
											],
											"parameters": [
												{
													"id": 2561,
													"name": "previousValue",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2557,
														"name": "U",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2562,
													"name": "currentValue",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2556,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2563,
													"name": "currentIndex",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2564,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 2556,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 2557,
												"name": "U",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						},
						{
							"id": 2565,
							"name": "initialValue",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A value to which accumulator is initialized the first\ntime the callback is called. CallbackFn starts executing with the first value\nin the array as currentValue."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2557,
								"name": "U",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2566,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "reduce.ts",
									"line": 69,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/reduce.ts"
								}
							],
							"signatures": [
								{
									"id": 2567,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2568,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 2556,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 2557,
										"name": "U",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2569,
			"name": "reverse",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "reverse.ts",
					"line": 27,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/reverse.ts"
				},
				{
					"fileName": "reverse.ts",
					"line": 39,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/reverse.ts"
				},
				{
					"fileName": "reverse.ts",
					"line": 43,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/reverse.ts"
				}
			],
			"signatures": [
				{
					"id": 2570,
					"name": "reverse",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Reverses array."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.reverse(arr);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.reverse([1, 2, 3]) // [3, 2, 1]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "reverse.ts",
							"line": 27,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/reverse.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2571,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							}
						}
					],
					"parameters": [
						{
							"id": 2572,
							"name": "array",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2571,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/reverse.ts",
							"qualifiedName": "Reverse"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2571,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Reverse",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 2573,
					"name": "reverse",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Reverses array."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.reverse()(array);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.reverse()([1, 2, 3]) // [3, 2, 1]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "reverse.ts",
							"line": 39,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/reverse.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2574,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2575,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "reverse.ts",
									"line": 39,
									"character": 61,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/reverse.ts"
								}
							],
							"signatures": [
								{
									"id": 2576,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2577,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2574,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/reverse.ts",
											"qualifiedName": "Reverse"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 2574,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Reverse",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2578,
			"name": "round",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "round.ts",
					"line": 21,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/round.ts"
				},
				{
					"fileName": "round.ts",
					"line": 39,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/round.ts"
				},
				{
					"fileName": "round.ts",
					"line": 41,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/round.ts"
				}
			],
			"signatures": [
				{
					"id": 2579,
					"name": "round",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Rounds a given number to a specific precision.\nIf you'd like to round to an integer (i.e. use this function with constant "
							},
							{
								"kind": "code",
								"text": "`precision === 0`"
							},
							{
								"kind": "text",
								"text": "),\nuse "
							},
							{
								"kind": "code",
								"text": "`Math.round`"
							},
							{
								"kind": "text",
								"text": " instead, as it won't incur the additional library overhead."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.round(value, precision);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.round(123.9876, 3) // => 123.988\n   P.round(483.22243, 1) // => 483.2\n   P.round(8541, -1) // => 8540\n   P.round(456789, -3) // => 457000"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "round.ts",
							"line": 21,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/round.ts"
						}
					],
					"parameters": [
						{
							"id": 2580,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number to round."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2581,
							"name": "precision",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The precision to round to. Must be an integer between -15 and 15."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 2582,
					"name": "round",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Rounds a given number to a specific precision.\nIf you'd like to round to an integer (i.e. use this function with constant "
							},
							{
								"kind": "code",
								"text": "`precision === 0`"
							},
							{
								"kind": "text",
								"text": "),\nuse "
							},
							{
								"kind": "code",
								"text": "`Math.round`"
							},
							{
								"kind": "text",
								"text": " instead, as it won't incur the additional library overhead."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.round(precision)(value);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.round(3)(123.9876) // => 123.988\n   P.round(1)(483.22243) // => 483.2\n   P.round(-1)(8541) // => 8540\n   P.round(-3)(456789) // => 457000"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "round.ts",
							"line": 39,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/round.ts"
						}
					],
					"parameters": [
						{
							"id": 2583,
							"name": "precision",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The precision to round to. Must be an integer between -15 and 15."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2584,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "round.ts",
									"line": 39,
									"character": 42,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/round.ts"
								}
							],
							"signatures": [
								{
									"id": 2585,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2586,
											"name": "value",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2587,
			"name": "sample",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "sample.ts",
					"line": 71,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sample.ts"
				},
				{
					"fileName": "sample.ts",
					"line": 96,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sample.ts"
				},
				{
					"fileName": "sample.ts",
					"line": 100,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sample.ts"
				}
			],
			"signatures": [
				{
					"id": 2588,
					"name": "sample",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a random subset of size "
							},
							{
								"kind": "code",
								"text": "`sampleSize`"
							},
							{
								"kind": "text",
								"text": " from "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": ".\n\nMaintains and infers most of the typing information that could be passed\nalong to the output. This means that when using tuples, the output will be\na tuple too, and when using literals, those literals would be preserved.\n\nThe items in the result are kept in the same order as they are in the input.\nIf you need to get a shuffled response you can pipe the shuffle function\nafter this one."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sample(array, sampleSize)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sample([\"hello\", \"world\"], 1); // => [\"hello\"] // typed string[]\n   P.sample([\"hello\", \"world\"] as const, 1); // => [\"world\"] // typed [\"hello\" | \"world\"]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sample.ts",
							"line": 71,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sample.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2589,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 2590,
							"name": "N",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"default": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"parameters": [
						{
							"id": 2591,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2589,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2592,
							"name": "sampleSize",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of elements to take."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2590,
								"name": "N",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/sample.ts",
							"qualifiedName": "Sampled"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2589,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 2590,
								"name": "N",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Sampled",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 2593,
					"name": "sample",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a random subset of size "
							},
							{
								"kind": "code",
								"text": "`sampleSize`"
							},
							{
								"kind": "text",
								"text": " from "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": ".\n\nMaintains and infers most of the typing information that could be passed\nalong to the output. This means that when using tuples, the output will be\na tuple too, and when using literals, those literals would be preserved.\n\nThe items in the result are kept in the same order as they are in the input.\nIf you need to get a shuffled response you can pipe the shuffle function\nafter this one."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sample(sampleSize)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sample(1)([\"hello\", \"world\"]); // => [\"hello\"] // typed string[]\n   P.sample(1)([\"hello\", \"world\"] as const); // => [\"world\"] // typed [\"hello\" | \"world\"]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sample.ts",
							"line": 96,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sample.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2594,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 2595,
							"name": "N",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"default": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"parameters": [
						{
							"id": 2596,
							"name": "sampleSize",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of elements to take."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2595,
								"name": "N",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2597,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "sample.ts",
									"line": 98,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/sample.ts"
								}
							],
							"signatures": [
								{
									"id": 2598,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2599,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2594,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/sample.ts",
											"qualifiedName": "Sampled"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 2594,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 2595,
												"name": "N",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Sampled",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2600,
			"name": "set",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "set.ts",
					"line": 21,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/set.ts"
				},
				{
					"fileName": "set.ts",
					"line": 42,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/set.ts"
				},
				{
					"fileName": "set.ts",
					"line": 47,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/set.ts"
				}
			],
			"signatures": [
				{
					"id": 2601,
					"name": "set",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the "
							},
							{
								"kind": "code",
								"text": "`value`"
							},
							{
								"kind": "text",
								"text": " at "
							},
							{
								"kind": "code",
								"text": "`prop`"
							},
							{
								"kind": "text",
								"text": " of "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": ".\n\nTo add a new property to an object, or to override its type, use "
							},
							{
								"kind": "code",
								"text": "`addProp`"
							},
							{
								"kind": "text",
								"text": "\ninstead, and to set a property within a nested object use "
							},
							{
								"kind": "code",
								"text": "`setPath`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.set(obj, prop, value)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.set({ a: 1 }, 'a', 2) // => { a: 2 }"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "set.ts",
							"line": 21,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/set.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2602,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 2603,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						},
						{
							"id": 2604,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2605,
							"name": "obj",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The target method."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2602,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2606,
							"name": "prop",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The property name."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2603,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2607,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value to set."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2604,
								"name": "V",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "UpsertProp"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2602,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 2603,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 2604,
								"name": "V",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "UpsertProp",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 2608,
					"name": "set",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the "
							},
							{
								"kind": "code",
								"text": "`value`"
							},
							{
								"kind": "text",
								"text": " at "
							},
							{
								"kind": "code",
								"text": "`prop`"
							},
							{
								"kind": "text",
								"text": " of "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": ".\n\nTo add a new property to an object, or to override it's type use "
							},
							{
								"kind": "code",
								"text": "`addProp`"
							},
							{
								"kind": "text",
								"text": "\ninstead."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.set(prop, value)(obj)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe({ a: 1 }, P.set('a', 2)) // => { a: 2 }"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "set.ts",
							"line": 42,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/set.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2609,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 2610,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						},
						{
							"id": 2611,
							"name": "V",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2612,
							"name": "prop",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The property name."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2610,
								"name": "K",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2613,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value to set."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2611,
								"name": "V",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2614,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "set.ts",
									"line": 45,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/set.ts"
								}
							],
							"signatures": [
								{
									"id": 2615,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2616,
											"name": "obj",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2609,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "UpsertProp"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 2609,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 2610,
												"name": "K",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 2611,
												"name": "V",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "UpsertProp",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2617,
			"name": "setPath",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "set-path.ts",
					"line": 36,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/set-path.ts"
				},
				{
					"fileName": "set-path.ts",
					"line": 54,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/set-path.ts"
				},
				{
					"fileName": "set-path.ts",
					"line": 60,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/set-path.ts"
				}
			],
			"signatures": [
				{
					"id": 2618,
					"name": "setPath",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the value at "
							},
							{
								"kind": "code",
								"text": "`path`"
							},
							{
								"kind": "text",
								"text": " of "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": ".\n\nFor simple cases where the path is only one level deep, prefer "
							},
							{
								"kind": "code",
								"text": "`set`"
							},
							{
								"kind": "text",
								"text": " instead."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.setPath(obj, path, value)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.setPath({ a: { b: 1 } }, ['a', 'b'], 2) // => { a: { b: 2 } }"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "set-path.ts",
							"line": 36,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/set-path.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2619,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 2620,
							"name": "TPath",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "tuple"
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "src/set-path.ts",
											"qualifiedName": "PathsOfObject"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "PropertyKey"
														},
														"name": "PropertyKey",
														"package": "typescript"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										],
										"name": "PathsOfObject",
										"package": "@vinicunca/perkakas"
									},
									{
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "tuple",
											"elements": [
												{
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"target": 2619,
														"typeArguments": [
															{
																"type": "reference",
																"target": 2619,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											]
										}
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": 2619,
													"typeArguments": [
														{
															"type": "reference",
															"target": 2619,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													],
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "src/set-path.ts",
											"qualifiedName": "PathsOfObject"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "PropertyKey"
														},
														"name": "PropertyKey",
														"package": "typescript"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "typeOperator",
												"operator": "readonly",
												"target": {
													"type": "tuple",
													"elements": [
														{
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "reference",
																"target": 2619,
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 2619,
																		"name": "T",
																		"package": "@vinicunca/perkakas",
																		"refersToTypeParameter": true
																	}
																],
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													]
												}
											}
										],
										"name": "PathsOfObject",
										"package": "@vinicunca/perkakas"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 2621,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The target method."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2619,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2622,
							"name": "path",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array of properties."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2620,
								"name": "TPath",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2623,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value to set."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/set-path.ts",
									"qualifiedName": "ValueAtPath"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 2619,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 2620,
										"name": "TPath",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "ValueAtPath",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 2619,
						"name": "T",
						"package": "@vinicunca/perkakas",
						"refersToTypeParameter": true
					}
				},
				{
					"id": 2624,
					"name": "setPath",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sets the value at "
							},
							{
								"kind": "code",
								"text": "`path`"
							},
							{
								"kind": "text",
								"text": " of "
							},
							{
								"kind": "code",
								"text": "`object`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.setPath(path, value)(obj)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe({ a: { b: 1 } }, P.setPath(['a', 'b'], 2)) // { a: { b: 2 } }"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "set-path.ts",
							"line": 54,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/set-path.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2625,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 2626,
							"name": "TPath",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "tuple"
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "src/set-path.ts",
											"qualifiedName": "PathsOfObject"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "PropertyKey"
														},
														"name": "PropertyKey",
														"package": "typescript"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										],
										"name": "PathsOfObject",
										"package": "@vinicunca/perkakas"
									},
									{
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "tuple",
											"elements": [
												{
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "reference",
														"target": 2625,
														"typeArguments": [
															{
																"type": "reference",
																"target": 2625,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														],
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											]
										}
									},
									{
										"type": "tuple",
										"elements": [
											{
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": 2625,
													"typeArguments": [
														{
															"type": "reference",
															"target": 2625,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													],
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "src/set-path.ts",
											"qualifiedName": "PathsOfObject"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "PropertyKey"
														},
														"name": "PropertyKey",
														"package": "typescript"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "typeOperator",
												"operator": "readonly",
												"target": {
													"type": "tuple",
													"elements": [
														{
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "reference",
																"target": 2625,
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 2625,
																		"name": "T",
																		"package": "@vinicunca/perkakas",
																		"refersToTypeParameter": true
																	}
																],
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													]
												}
											}
										],
										"name": "PathsOfObject",
										"package": "@vinicunca/perkakas"
									}
								]
							}
						},
						{
							"id": 2627,
							"name": "Value",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2628,
							"name": "path",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array of properties."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2626,
								"name": "TPath",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2629,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value to set."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2627,
								"name": "Value",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2630,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "set-path.ts",
									"line": 58,
									"character": 30,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/set-path.ts"
								}
							],
							"signatures": [
								{
									"id": 2631,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2632,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2625,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 2625,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2638,
			"name": "shuffle",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "shuffle.ts",
					"line": 16,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/shuffle.ts"
				},
				{
					"fileName": "shuffle.ts",
					"line": 30,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/shuffle.ts"
				},
				{
					"fileName": "shuffle.ts",
					"line": 34,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/shuffle.ts"
				}
			],
			"signatures": [
				{
					"id": 2639,
					"name": "shuffle",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Shuffles the input array, returning a new array with the same elements in a random order."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.shuffle(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.shuffle([4, 2, 7, 5]) // => [7, 5, 4, 2]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "shuffle.ts",
							"line": 16,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/shuffle.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2640,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 2641,
							"name": "items",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to shuffle."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2640,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "ReorderedArray"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2640,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "ReorderedArray",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 2642,
					"name": "shuffle",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Shuffles the input array, returning a new array with the same elements in a random order."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.shuffle()(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([4, 2, 7, 5], P.shuffle()) // => [7, 5, 4, 2]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "shuffle.ts",
							"line": 30,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/shuffle.ts"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2643,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "shuffle.ts",
									"line": 30,
									"character": 27,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/shuffle.ts"
								}
							],
							"signatures": [
								{
									"id": 2644,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 2646,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 2645,
											"name": "items",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2646,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "ReorderedArray"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 2646,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "ReorderedArray",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2647,
			"name": "sleep",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "sleep.ts",
					"line": 12,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sleep.ts"
				}
			],
			"signatures": [
				{
					"id": 2648,
					"name": "sleep",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Delay execution for a given number of milliseconds."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sleep(timeout)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sleep(1000); // => Promise<void>"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "sleep.ts",
							"line": 12,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sleep.ts"
						}
					],
					"parameters": [
						{
							"id": 2649,
							"name": "timeout",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the number of milliseconds to wait"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Promise"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "void"
							}
						],
						"name": "Promise",
						"package": "typescript"
					}
				}
			]
		},
		{
			"id": 2650,
			"name": "sliceString",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "slice-string.ts",
					"line": 19,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/slice-string.ts"
				},
				{
					"fileName": "slice-string.ts",
					"line": 42,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/slice-string.ts"
				},
				{
					"fileName": "slice-string.ts",
					"line": 47,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/slice-string.ts"
				}
			],
			"signatures": [
				{
					"id": 2651,
					"name": "sliceString",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extracts a section of this string and returns it as a new string, without\nmodifying the original string. Equivalent to "
							},
							{
								"kind": "code",
								"text": "`String.prototype.slice`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A new string containing the extracted section of the string."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sliceString(data, indexStart, indexEnd)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sliceString(\"abcdefghijkl\", 1) // => "
									},
									{
										"kind": "code",
										"text": "`bcdefghijkl`"
									},
									{
										"kind": "text",
										"text": "\n   P.sliceString(\"abcdefghijkl\", 4, 7) // => "
									},
									{
										"kind": "code",
										"text": "`efg`"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "slice-string.ts",
							"line": 19,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/slice-string.ts"
						}
					],
					"parameters": [
						{
							"id": 2652,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The string to extract from."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2653,
							"name": "indexStart",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The index of the first character to include in the\nreturned substring."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2654,
							"name": "indexEnd",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The index of the first character to exclude from the\nreturned substring."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2655,
					"name": "sliceString",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extracts a section of this string and returns it as a new string, without\nmodifying the original string. Equivalent to "
							},
							{
								"kind": "code",
								"text": "`String.prototype.slice`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A new string containing the extracted section of the string."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sliceString(indexStart, indexEnd)(string)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sliceString(1)(\"abcdefghijkl\") // => "
									},
									{
										"kind": "code",
										"text": "`bcdefghijkl`"
									},
									{
										"kind": "text",
										"text": "\n   P.sliceString(4, 7)(\"abcdefghijkl\") // => "
									},
									{
										"kind": "code",
										"text": "`efg`"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "slice-string.ts",
							"line": 42,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/slice-string.ts"
						}
					],
					"parameters": [
						{
							"id": 2656,
							"name": "indexStart",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The index of the first character to include in the\nreturned substring."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2657,
							"name": "indexEnd",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The index of the first character to exclude from the\nreturned substring, or "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": " for the rest of the string."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2658,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "slice-string.ts",
									"line": 45,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/slice-string.ts"
								}
							],
							"signatures": [
								{
									"id": 2659,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2660,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2661,
			"name": "slugify",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "slugify.ts",
					"line": 11,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/slugify.ts"
				}
			],
			"signatures": [
				{
					"id": 2662,
					"name": "slugify",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Turn any string into a URL/DOM safe string."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.slugify(str)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.slugify('FooBar'); // => 'foobar'\n P.slugify('This!-is*&%#@^up!'); // => 'this-is-up'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "slugify.ts",
							"line": 11,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/slugify.ts"
						}
					],
					"parameters": [
						{
							"id": 2663,
							"name": "str",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the string to slugify"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 2664,
			"name": "sort",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "sort.ts",
					"line": 20,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort.ts"
				},
				{
					"fileName": "sort.ts",
					"line": 39,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort.ts"
				},
				{
					"fileName": "sort.ts",
					"line": 43,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort.ts"
				}
			],
			"signatures": [
				{
					"id": 2665,
					"name": "sort",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sorts an array. The comparator function should accept two values at a time\nand return a negative number if the first value is smaller, a positive number\nif it's larger, and zero if they are equal. Sorting is based on a native\n"
							},
							{
								"kind": "code",
								"text": "`sort`"
							},
							{
								"kind": "text",
								"text": " function."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sort(items, cmp)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sort([4, 2, 7, 5], (a, b) => a - b); // => [2, 4, 5, 7]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sort.ts",
							"line": 20,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2666,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 2667,
							"name": "items",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to sort."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2666,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2668,
							"name": "cmp",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The comparator function."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2669,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "sort.ts",
											"line": 22,
											"character": 7,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort.ts"
										}
									],
									"signatures": [
										{
											"id": 2670,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "sort.ts",
													"line": 22,
													"character": 7,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort.ts"
												}
											],
											"parameters": [
												{
													"id": 2671,
													"name": "a",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 2666,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 2672,
													"name": "b",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 2666,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "ReorderedArray"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2666,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "ReorderedArray",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 2673,
					"name": "sort",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sorts an array. The comparator function should accept two values at a time\nand return a negative number if the first value is smaller, a positive number\nif it's larger, and zero if they are equal. Sorting is based on a native\n"
							},
							{
								"kind": "code",
								"text": "`sort`"
							},
							{
								"kind": "text",
								"text": " function."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sort(cmp)(items)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([4, 2, 7, 5], P.sort((a, b) => a - b)) // => [2, 4, 5, 7]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sort.ts",
							"line": 39,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2674,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 2675,
							"name": "cmp",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The comparator function."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2676,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "sort.ts",
											"line": 40,
											"character": 7,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort.ts"
										}
									],
									"signatures": [
										{
											"id": 2677,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "sort.ts",
													"line": 40,
													"character": 7,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort.ts"
												}
											],
											"parameters": [
												{
													"id": 2678,
													"name": "a",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 2674,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 2679,
													"name": "b",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 2674,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2680,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "sort.ts",
									"line": 41,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort.ts"
								}
							],
							"signatures": [
								{
									"id": 2681,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2682,
											"name": "items",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2674,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "ReorderedArray"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 2674,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "ReorderedArray",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2683,
			"name": "sortBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "sort-by.ts",
					"line": 40,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort-by.ts"
				},
				{
					"fileName": "sort-by.ts",
					"line": 90,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort-by.ts"
				},
				{
					"fileName": "sort-by.ts",
					"line": 95,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort-by.ts"
				}
			],
			"signatures": [
				{
					"id": 2684,
					"name": "sortBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sorts "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " using the provided ordering rules. The "
							},
							{
								"kind": "code",
								"text": "`sort`"
							},
							{
								"kind": "text",
								"text": " is done via the\nnative "
							},
							{
								"kind": "code",
								"text": "`Array.prototype.sort`"
							},
							{
								"kind": "text",
								"text": " but is performed on a shallow copy of the array\nto avoid mutating the original data.\n\nThere are several other functions that take order rules and **bypass** the\nneed to sort the array first (in *O(nlogn)* time):\n"
							},
							{
								"kind": "code",
								"text": "`firstBy`"
							},
							{
								"kind": "text",
								"text": " === "
							},
							{
								"kind": "code",
								"text": "`first(sortBy(data, ...rules))`"
							},
							{
								"kind": "text",
								"text": ", O(n).\n"
							},
							{
								"kind": "code",
								"text": "`takeFirstBy`"
							},
							{
								"kind": "text",
								"text": " === "
							},
							{
								"kind": "code",
								"text": "`take(sortBy(data, ...rules), k)`"
							},
							{
								"kind": "text",
								"text": ", O(nlogk).\n"
							},
							{
								"kind": "code",
								"text": "`dropFirstBy`"
							},
							{
								"kind": "text",
								"text": " === "
							},
							{
								"kind": "code",
								"text": "`drop(sortBy(data, ...rules), k)`"
							},
							{
								"kind": "text",
								"text": ", O(nlogk).\n"
							},
							{
								"kind": "code",
								"text": "`nthBy`"
							},
							{
								"kind": "text",
								"text": " === "
							},
							{
								"kind": "code",
								"text": "`sortBy(data, ...rules).at(k)`"
							},
							{
								"kind": "text",
								"text": ", O(n).\n"
							},
							{
								"kind": "code",
								"text": "`rankBy`"
							},
							{
								"kind": "text",
								"text": " === "
							},
							{
								"kind": "code",
								"text": "`sortedIndex(sortBy(data, ...rules), item)`"
							},
							{
								"kind": "text",
								"text": ", O(n).\nRefer to the docs for more details."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A shallow copy of the input array sorted by the provided rules."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sortBy(...rules)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [{ a: 1 }, { a: 3 }, { a: 7 }, { a: 2 }],\n     P.sortBy(P.prop('a')),\n   ); // => [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 7 }]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sort-by.ts",
							"line": 40,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2685,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 2686,
							"name": "sortRules",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A variadic array of order rules defining the sorting\ncriteria. Each order rule is a projection function that extracts a comparable\nvalue from the data. Sorting is based on these extracted values using the\nnative "
									},
									{
										"kind": "code",
										"text": "`<`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`>`"
									},
									{
										"kind": "text",
										"text": " operators. Earlier rules take precedence over later ones.\nUse the syntax "
									},
									{
										"kind": "code",
										"text": "`[projection, \"desc\"]`"
									},
									{
										"kind": "text",
										"text": " for descending order."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "number"
													},
													"objectType": {
														"type": "reference",
														"target": 2685,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "number"
													},
													"objectType": {
														"type": "reference",
														"target": 2685,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2687,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "sort-by.ts",
									"line": 42,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort-by.ts"
								}
							],
							"signatures": [
								{
									"id": 2688,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2689,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2685,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "ReorderedArray"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 2685,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "ReorderedArray",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				},
				{
					"id": 2690,
					"name": "sortBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sorts "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " using the provided ordering rules. The "
							},
							{
								"kind": "code",
								"text": "`sort`"
							},
							{
								"kind": "text",
								"text": " is done via the\nnative "
							},
							{
								"kind": "code",
								"text": "`Array.prototype.sort`"
							},
							{
								"kind": "text",
								"text": " but is performed on a shallow copy of the array\nto avoid mutating the original data.\n\nThere are several other functions that take order rules and **bypass** the\nneed to sort the array first (in *O(nlogn)* time):\n"
							},
							{
								"kind": "code",
								"text": "`firstBy`"
							},
							{
								"kind": "text",
								"text": " === "
							},
							{
								"kind": "code",
								"text": "`first(sortBy(data, ...rules))`"
							},
							{
								"kind": "text",
								"text": ", O(n).\n"
							},
							{
								"kind": "code",
								"text": "`takeFirstBy`"
							},
							{
								"kind": "text",
								"text": " === "
							},
							{
								"kind": "code",
								"text": "`take(sortBy(data, ...rules), k)`"
							},
							{
								"kind": "text",
								"text": ", O(nlogk).\n"
							},
							{
								"kind": "code",
								"text": "`dropFirstBy`"
							},
							{
								"kind": "text",
								"text": " === "
							},
							{
								"kind": "code",
								"text": "`drop(sortBy(data, ...rules), k)`"
							},
							{
								"kind": "text",
								"text": ", O(nlogk).\n"
							},
							{
								"kind": "code",
								"text": "`nthBy`"
							},
							{
								"kind": "text",
								"text": " === "
							},
							{
								"kind": "code",
								"text": "`sortBy(data, ...rules).at(k)`"
							},
							{
								"kind": "text",
								"text": ", O(n).\n"
							},
							{
								"kind": "code",
								"text": "`rankBy`"
							},
							{
								"kind": "text",
								"text": " === "
							},
							{
								"kind": "code",
								"text": "`sortedIndex(sortBy(data, ...rules), item)`"
							},
							{
								"kind": "text",
								"text": ", O(n).\nRefer to the docs for more details."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A shallow copy of the input array sorted by the provided rules."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sortBy(data, ...rules)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sortBy(\n     [{ a: 1 }, { a: 3 }, { a: 7 }, { a: 2 }],\n     prop('a'),\n   );  // => [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 7 }]\n   P.sortBy(\n     [\n       {color: 'red', weight: 2},\n       {color: 'blue', weight: 3},\n       {color: 'green', weight: 1},\n       {color: 'purple', weight: 1},\n     ],\n     [prop('weight'), 'asc'],\n     prop('color'),\n   ); // => [\n   //   {color: 'green', weight: 1},\n   //   {color: 'purple', weight: 1},\n   //   {color: 'red', weight: 2},\n   //   {color: 'blue', weight: 3},\n   // ]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sort-by.ts",
							"line": 90,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sort-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2691,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 2692,
							"name": "array",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The input array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2691,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2693,
							"name": "sortRules",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A variadic array of order rules defining the sorting\ncriteria. Each order rule is a projection function that extracts a comparable\nvalue from the data. Sorting is based on these extracted values using the\nnative "
									},
									{
										"kind": "code",
										"text": "`<`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`>`"
									},
									{
										"kind": "text",
										"text": " operators. Earlier rules take precedence over later ones.\nUse the syntax "
									},
									{
										"kind": "code",
										"text": "`[projection, \"desc\"]`"
									},
									{
										"kind": "text",
										"text": " for descending order."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "number"
													},
													"objectType": {
														"type": "reference",
														"target": 2691,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "indexedAccess",
													"indexType": {
														"type": "intrinsic",
														"name": "number"
													},
													"objectType": {
														"type": "reference",
														"target": 2691,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "ReorderedArray"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2691,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "ReorderedArray",
						"package": "@vinicunca/perkakas"
					}
				}
			]
		},
		{
			"id": 2694,
			"name": "sortedIndex",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "sorted-index.ts",
					"line": 24,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index.ts"
				},
				{
					"fileName": "sorted-index.ts",
					"line": 45,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index.ts"
				},
				{
					"fileName": "sorted-index.ts",
					"line": 47,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index.ts"
				}
			],
			"signatures": [
				{
					"id": 2695,
					"name": "sortedIndex",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order; so that "
							},
							{
								"kind": "code",
								"text": "`splice(sortedIndex, 0, item)`"
							},
							{
								"kind": "text",
								"text": " would result in\nmaintaining the array's sort-ness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *first*\noccurrence of the item.\n\nRuns in O(logN) time."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Insertion index (In the range 0..array.length)."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedIndex(data, item)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedIndex(['a','a','b','c','c'], 'c') // => 3"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "sortedIndexBy, sortedIndexWith, sortedLastIndex, sortedLastIndexBy"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "sorted-index.ts",
							"line": 24,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2696,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2697,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The (ascending) sorted array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2696,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 2698,
							"name": "item",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The item to insert."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2696,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 2699,
					"name": "sortedIndex",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order; so that "
							},
							{
								"kind": "code",
								"text": "`splice(sortedIndex, 0, item)`"
							},
							{
								"kind": "text",
								"text": " would result in\nmaintaining the array's sort-ness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *first*\noccurrence of the item.\n\nRuns in O(logN) time."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Insertion index (In the range 0..array.length)."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedIndex(item)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(['a','a','b','c','c'], P.sortedIndex('c')) // => 3"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "sortedIndexBy, sortedIndexWith, sortedLastIndex, sortedLastIndexBy"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "sorted-index.ts",
							"line": 45,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2700,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2701,
							"name": "item",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The item to insert."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2700,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2702,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "sorted-index.ts",
									"line": 45,
									"character": 41,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index.ts"
								}
							],
							"signatures": [
								{
									"id": 2703,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2704,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 2700,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2705,
			"name": "sortedIndexBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "sorted-index-by.ts",
					"line": 37,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-by.ts"
				},
				{
					"fileName": "sorted-index-by.ts",
					"line": 78,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-by.ts"
				},
				{
					"fileName": "sorted-index-by.ts",
					"line": 87,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-by.ts"
				}
			],
			"signatures": [
				{
					"id": 2706,
					"name": "sortedIndexBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order using a value function; so that\n"
							},
							{
								"kind": "code",
								"text": "`splice(sortedIndex, 0, item)`"
							},
							{
								"kind": "text",
								"text": " would result in maintaining the arrays sort-\nness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *first*\noccurrence of the item.\n\nRuns in O(logN) time.\n\nSee also:\n"
							},
							{
								"kind": "code",
								"text": "`findIndex`"
							},
							{
								"kind": "text",
								"text": " - scans a possibly unsorted array in-order (linear search).\n"
							},
							{
								"kind": "code",
								"text": "`sortedIndex`"
							},
							{
								"kind": "text",
								"text": " - like this function, but doesn't take a callbackfn.\n"
							},
							{
								"kind": "code",
								"text": "`sortedLastIndexBy`"
							},
							{
								"kind": "text",
								"text": " - like this function, but finds the last suitable index.\n"
							},
							{
								"kind": "code",
								"text": "`sortedLastIndex`"
							},
							{
								"kind": "text",
								"text": " - like "
							},
							{
								"kind": "code",
								"text": "`sortedIndex`"
							},
							{
								"kind": "text",
								"text": ", but finds the last suitable index.\n"
							},
							{
								"kind": "code",
								"text": "`rankBy`"
							},
							{
								"kind": "text",
								"text": " - scans a possibly unsorted array in-order, returning the index based on a sorting criteria."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Insertion index (In the range 0..data.length)."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedIndexBy(data, item, valueFunction)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedIndexBy([{age:20},{age:22}],{age:21},prop('age')) // => 1"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sorted-index-by.ts",
							"line": 37,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2707,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2708,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The (ascending) sorted array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2707,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 2709,
							"name": "item",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The item to insert."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2707,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2710,
							"name": "valueFunction",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "All comparisons would be performed on the result of\ncalling this function on each compared item. Preferably this function should\nreturn a "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": ". This function should be the same as the one\nprovided to sortBy to sort the array. The function is called exactly once on\neach items that is compared against in the array, and once at the beginning\non "
									},
									{
										"kind": "code",
										"text": "`item`"
									},
									{
										"kind": "text",
										"text": ". When called on "
									},
									{
										"kind": "code",
										"text": "`item`"
									},
									{
										"kind": "text",
										"text": " the "
									},
									{
										"kind": "code",
										"text": "`index`"
									},
									{
										"kind": "text",
										"text": " argument is "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2711,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "sorted-index-by.ts",
											"line": 40,
											"character": 17,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-by.ts"
										}
									],
									"signatures": [
										{
											"id": 2712,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "sorted-index-by.ts",
													"line": 40,
													"character": 17,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-by.ts"
												}
											],
											"parameters": [
												{
													"id": 2713,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2707,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2714,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 2715,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 2707,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2716,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 2717,
					"name": "sortedIndexBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order using a value function; so that\n"
							},
							{
								"kind": "code",
								"text": "`splice(sortedIndex, 0, item)`"
							},
							{
								"kind": "text",
								"text": " would result in maintaining the arrays sort-\nness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *first*\noccurrence of the item.\n\nRuns in O(logN) time.\n\nSee also:\n"
							},
							{
								"kind": "code",
								"text": "`findIndex`"
							},
							{
								"kind": "text",
								"text": " - scans a possibly unsorted array in-order (linear search).\n"
							},
							{
								"kind": "code",
								"text": "`sortedIndex`"
							},
							{
								"kind": "text",
								"text": " - like this function, but doesn't take a callbackfn.\n"
							},
							{
								"kind": "code",
								"text": "`sortedLastIndexBy`"
							},
							{
								"kind": "text",
								"text": " - like this function, but finds the last suitable index.\n"
							},
							{
								"kind": "code",
								"text": "`sortedLastIndex`"
							},
							{
								"kind": "text",
								"text": " - like "
							},
							{
								"kind": "code",
								"text": "`sortedIndex`"
							},
							{
								"kind": "text",
								"text": ", but finds the last suitable index.\n"
							},
							{
								"kind": "code",
								"text": "`rankBy`"
							},
							{
								"kind": "text",
								"text": " - scans a possibly unsorted array in-order, returning the index based on a sorting criteria."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedIndexBy(data, item, valueFunction)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedIndexBy([{age:20},{age:22}],{age:21},prop('age')) // => 1"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sorted-index-by.ts",
							"line": 78,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2718,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2719,
							"name": "item",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The item to insert."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2718,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2720,
							"name": "valueFunction",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "All comparisons would be performed on the result of\ncalling this function on each compared item. Preferably this function should\nreturn a "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": ". This function should be the same as the one\nprovided to sortBy to sort the array. The function is called exactly once on\neach items that is compared against in the array, and once at the beginning\non "
									},
									{
										"kind": "code",
										"text": "`item`"
									},
									{
										"kind": "text",
										"text": ". When called on "
									},
									{
										"kind": "code",
										"text": "`item`"
									},
									{
										"kind": "text",
										"text": " the "
									},
									{
										"kind": "code",
										"text": "`index`"
									},
									{
										"kind": "text",
										"text": " argument is "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2721,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "sorted-index-by.ts",
											"line": 80,
											"character": 17,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-by.ts"
										}
									],
									"signatures": [
										{
											"id": 2722,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "sorted-index-by.ts",
													"line": 80,
													"character": 17,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-by.ts"
												}
											],
											"parameters": [
												{
													"id": 2723,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2718,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2724,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 2725,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 2718,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2726,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2727,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "sorted-index-by.ts",
									"line": 85,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-by.ts"
								}
							],
							"signatures": [
								{
									"id": 2728,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2729,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 2718,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2730,
			"name": "sortedIndexWith",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "sorted-index-with.ts",
					"line": 38,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-with.ts"
				},
				{
					"fileName": "sorted-index-with.ts",
					"line": 75,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-with.ts"
				},
				{
					"fileName": "sorted-index-with.ts",
					"line": 79,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-with.ts"
				}
			],
			"signatures": [
				{
					"id": 2731,
					"name": "sortedIndexWith",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Performs a **binary search** for the index of the item at which the predicate\nstops returning "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ". This function assumes that the array is \"sorted\" in\nregards to the predicate, meaning that running the predicate as a mapper on\nit would result in an array "
							},
							{
								"kind": "code",
								"text": "`[...true[], ...false[]]`"
							},
							{
								"kind": "text",
								"text": ".\nThis stricter requirement from the predicate provides us 2 benefits over\n"
							},
							{
								"kind": "code",
								"text": "`findIndex`"
							},
							{
								"kind": "text",
								"text": " which does a similar thing:\n1. It would run at O(logN) time instead of O(N) time.\n2. It always returns a value (it would return "
							},
							{
								"kind": "code",
								"text": "`data.length`"
							},
							{
								"kind": "text",
								"text": " if the\npredicate returns "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " for all items).\n\nThis function is the basis for all other sortedIndex functions which search\nfor a specific item in a sorted array, and it could be used to perform\nsimilar efficient searches.\n"
							},
							{
								"kind": "code",
								"text": "`sortedIndex`"
							},
							{
								"kind": "text",
								"text": " - scans a sorted array with a binary search, find the first suitable index.\n"
							},
							{
								"kind": "code",
								"text": "`sortedIndexBy`"
							},
							{
								"kind": "text",
								"text": " - like "
							},
							{
								"kind": "code",
								"text": "`sortedIndex`"
							},
							{
								"kind": "text",
								"text": ", but assumes sorting is based on a callbackfn.\n"
							},
							{
								"kind": "code",
								"text": "`sortedLastIndex`"
							},
							{
								"kind": "text",
								"text": " - scans a sorted array with a binary search, finding the last suitable index.\n"
							},
							{
								"kind": "code",
								"text": "`sortedLastIndexBy`"
							},
							{
								"kind": "text",
								"text": " - like "
							},
							{
								"kind": "code",
								"text": "`sortedLastIndex`"
							},
							{
								"kind": "text",
								"text": ", but assumes sorting is based on a callbackfn.\n\nSee also:\n"
							},
							{
								"kind": "code",
								"text": "`findIndex`"
							},
							{
								"kind": "text",
								"text": " - scans a possibly unsorted array in-order (linear search).\n"
							},
							{
								"kind": "code",
								"text": "`rankBy`"
							},
							{
								"kind": "text",
								"text": " - scans a possibly unsorted array in-order, returning the index based on a sorting criteria."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Index (In the range 0..data.length)."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedIndexWith(data, predicate)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedIndexWith(['a','ab','abc'], (item) => item.length < 2) // => 1"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "findIndex, sortedIndex, sortedIndexBy, sortedLastIndex, sortedLastIndexBy"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "sorted-index-with.ts",
							"line": 38,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-with.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2732,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2733,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Array, \"sorted\" by "
									},
									{
										"kind": "code",
										"text": "`predicate`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2732,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 2734,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A predicate which also defines the array's order."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2735,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "sorted-index-with.ts",
											"line": 40,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-with.ts"
										}
									],
									"signatures": [
										{
											"id": 2736,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "sorted-index-with.ts",
													"line": 40,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-with.ts"
												}
											],
											"parameters": [
												{
													"id": 2737,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2732,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2738,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2739,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 2732,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 2740,
					"name": "sortedIndexWith",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Performs a **binary search** for the index of the item at which the predicate\nstops returning "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ". This function assumes that the array is \"sorted\" in\nregards to the predicate, meaning that running the predicate as a mapper on\nit would result in an array "
							},
							{
								"kind": "code",
								"text": "`[...true[], ...false[]]`"
							},
							{
								"kind": "text",
								"text": ".\nThis stricter requirement from the predicate provides us 2 benefits over\n"
							},
							{
								"kind": "code",
								"text": "`findIndex`"
							},
							{
								"kind": "text",
								"text": " which does a similar thing:\n1. It would run at O(logN) time instead of O(N) time.\n2. It always returns a value (it would return "
							},
							{
								"kind": "code",
								"text": "`data.length`"
							},
							{
								"kind": "text",
								"text": " if the\npredicate returns "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": " for all items).\n\nThis function is the basis for all other sortedIndex functions which search\nfor a specific item in a sorted array, and it could be used to perform\nsimilar efficient searches.\n"
							},
							{
								"kind": "code",
								"text": "`sortedIndex`"
							},
							{
								"kind": "text",
								"text": " - scans a sorted array with a binary search, find the first suitable index.\n"
							},
							{
								"kind": "code",
								"text": "`sortedIndexBy`"
							},
							{
								"kind": "text",
								"text": " - like "
							},
							{
								"kind": "code",
								"text": "`sortedIndex`"
							},
							{
								"kind": "text",
								"text": ", but assumes sorting is based on a callbackfn.\n"
							},
							{
								"kind": "code",
								"text": "`sortedLastIndex`"
							},
							{
								"kind": "text",
								"text": " - scans a sorted array with a binary search, finding the last suitable index.\n"
							},
							{
								"kind": "code",
								"text": "`sortedLastIndexBy`"
							},
							{
								"kind": "text",
								"text": " - like "
							},
							{
								"kind": "code",
								"text": "`sortedLastIndex`"
							},
							{
								"kind": "text",
								"text": ", but assumes sorting is based on a callbackfn.\n\nSee also:\n"
							},
							{
								"kind": "code",
								"text": "`findIndex`"
							},
							{
								"kind": "text",
								"text": " - scans a possibly unsorted array in-order (linear search).\n"
							},
							{
								"kind": "code",
								"text": "`rankBy`"
							},
							{
								"kind": "text",
								"text": " - scans a possibly unsorted array in-order, returning the index based on a sorting criteria."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Index (In the range 0..data.length)."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedIndexWith(predicate)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(['a','ab','abc'], P.sortedIndexWith((item) => item.length < 2)) // => 1"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sorted-index-with.ts",
							"line": 75,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-with.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2741,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2742,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A predicate which also defines the array's order."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2743,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "sorted-index-with.ts",
											"line": 76,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-with.ts"
										}
									],
									"signatures": [
										{
											"id": 2744,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "sorted-index-with.ts",
													"line": 76,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-with.ts"
												}
											],
											"parameters": [
												{
													"id": 2745,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2741,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2746,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2747,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 2741,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2748,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "sorted-index-with.ts",
									"line": 77,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-index-with.ts"
								}
							],
							"signatures": [
								{
									"id": 2749,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2750,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 2741,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2751,
			"name": "sortedLastIndex",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "sorted-last-index.ts",
					"line": 24,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index.ts"
				},
				{
					"fileName": "sorted-last-index.ts",
					"line": 45,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index.ts"
				},
				{
					"fileName": "sorted-last-index.ts",
					"line": 47,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index.ts"
				}
			],
			"signatures": [
				{
					"id": 2752,
					"name": "sortedLastIndex",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order; so that "
							},
							{
								"kind": "code",
								"text": "`splice(sortedIndex, 0, item)`"
							},
							{
								"kind": "text",
								"text": " would result in\nmaintaining the array's sort-ness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *last*\noccurrence of the item.\n\nRuns in O(logN) time."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Insertion index (In the range 0..data.length)."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedLastIndex(data, item)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedLastIndex(['a','a','b','c','c'], 'c') // => 5"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "sortedIndex, sortedIndexBy, sortedIndexWith, sortedLastIndexBy"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "sorted-last-index.ts",
							"line": 24,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2753,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2754,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The (ascending) sorted array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2753,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 2755,
							"name": "item",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The item to insert."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2753,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 2756,
					"name": "sortedLastIndex",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order; so that "
							},
							{
								"kind": "code",
								"text": "`splice(sortedIndex, 0, item)`"
							},
							{
								"kind": "text",
								"text": " would result in\nmaintaining the array's sort-ness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *last*\noccurrence of the item.\n\nRuns in O(logN) time."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Insertion index (In the range 0..data.length)."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedLastIndex(item)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(['a','a','b','c','c'], sortedLastIndex('c')) // => 5"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "sortedIndex, sortedIndexBy, sortedIndexWith, sortedLastIndexBy"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "sorted-last-index.ts",
							"line": 45,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2757,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2758,
							"name": "item",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The item to insert."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2757,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2759,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "sorted-last-index.ts",
									"line": 45,
									"character": 45,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index.ts"
								}
							],
							"signatures": [
								{
									"id": 2760,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2761,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 2757,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2762,
			"name": "sortedLastIndexBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "sorted-last-index-by.ts",
					"line": 37,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index-by.ts"
				},
				{
					"fileName": "sorted-last-index-by.ts",
					"line": 80,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index-by.ts"
				},
				{
					"fileName": "sorted-last-index-by.ts",
					"line": 89,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index-by.ts"
				}
			],
			"signatures": [
				{
					"id": 2763,
					"name": "sortedLastIndexBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order using a value function; so that\n"
							},
							{
								"kind": "code",
								"text": "`splice(sortedIndex, 0, item)`"
							},
							{
								"kind": "text",
								"text": " would result in maintaining the arrays sort-\nness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *last*\noccurrence of the item.\n\nRuns in O(logN) time.\n\nSee also:\n"
							},
							{
								"kind": "code",
								"text": "`findIndex`"
							},
							{
								"kind": "text",
								"text": " - scans a possibly unsorted array in-order (linear search).\n"
							},
							{
								"kind": "code",
								"text": "`sortedLastIndex`"
							},
							{
								"kind": "text",
								"text": " - a simplified version of this function, without a callbackfn.\n"
							},
							{
								"kind": "code",
								"text": "`sortedIndexBy`"
							},
							{
								"kind": "text",
								"text": " - like this function, but returns the first suitable index.\n"
							},
							{
								"kind": "code",
								"text": "`sortedIndex`"
							},
							{
								"kind": "text",
								"text": " - like "
							},
							{
								"kind": "code",
								"text": "`sortedLastIndex`"
							},
							{
								"kind": "text",
								"text": " but without a callbackfn.\n"
							},
							{
								"kind": "code",
								"text": "`rankBy`"
							},
							{
								"kind": "text",
								"text": " - scans a possibly unsorted array in-order, returning the index based on a sorting criteria."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Insertion index (In the range 0..data.length)."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedLastIndexBy(data, item, valueFunction)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedLastIndexBy([{age:20},{age:22}],{age:21},prop('age')) // => 1"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sorted-last-index-by.ts",
							"line": 37,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2764,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2765,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The (ascending) sorted array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2764,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 2766,
							"name": "item",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The item to insert."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2764,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2767,
							"name": "valueFunction",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "All comparisons would be performed on the result of\ncalling this function on each compared item. Preferably this function should\nreturn a "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": ". This function should be the same as the one\nprovided to sortBy to sort the array. The function is called exactly once on\neach items that is compared against in the array, and once at the beginning\non "
									},
									{
										"kind": "code",
										"text": "`item`"
									},
									{
										"kind": "text",
										"text": ". When called on "
									},
									{
										"kind": "code",
										"text": "`item`"
									},
									{
										"kind": "text",
										"text": " the "
									},
									{
										"kind": "code",
										"text": "`index`"
									},
									{
										"kind": "text",
										"text": " argument is "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2768,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "sorted-last-index-by.ts",
											"line": 40,
											"character": 17,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index-by.ts"
										}
									],
									"signatures": [
										{
											"id": 2769,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "sorted-last-index-by.ts",
													"line": 40,
													"character": 17,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index-by.ts"
												}
											],
											"parameters": [
												{
													"id": 2770,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2764,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2771,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 2772,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 2764,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2773,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 2774,
					"name": "sortedLastIndexBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Find the insertion position (index) of an item in an array with items sorted\nin ascending order using a value function; so that\n"
							},
							{
								"kind": "code",
								"text": "`splice(sortedIndex, 0, item)`"
							},
							{
								"kind": "text",
								"text": " would result in maintaining the arrays sort-\nness. The array can contain duplicates.\nIf the item already exists in the array the index would be of the *last*\noccurrence of the item.\n\nRuns in O(logN) time.\n\nSee also:\n"
							},
							{
								"kind": "code",
								"text": "`findIndex`"
							},
							{
								"kind": "text",
								"text": " - scans a possibly unsorted array in-order (linear search).\n"
							},
							{
								"kind": "code",
								"text": "`sortedLastIndex`"
							},
							{
								"kind": "text",
								"text": " - a simplified version of this function, without a callbackfn.\n"
							},
							{
								"kind": "code",
								"text": "`sortedIndexBy`"
							},
							{
								"kind": "text",
								"text": " - like this function, but returns the first suitable index.\n"
							},
							{
								"kind": "code",
								"text": "`sortedIndex`"
							},
							{
								"kind": "text",
								"text": " - like "
							},
							{
								"kind": "code",
								"text": "`sortedLastIndex`"
							},
							{
								"kind": "text",
								"text": " but without a callbackfn.\n"
							},
							{
								"kind": "code",
								"text": "`rankBy`"
							},
							{
								"kind": "text",
								"text": " - scans a possibly unsorted array in-order, returning the index based on a sorting criteria."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Insertion index (In the range 0..data.length)."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sortedLastIndexBy(item, valueFunction)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([{age:20},{age:22}],sortedLastIndexBy({age:21},prop('age'))) // => 1"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "sortedIndex, sortedIndexBy, sortedIndexWith, sortedLastIndex"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "sorted-last-index-by.ts",
							"line": 80,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2775,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2776,
							"name": "item",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The item to insert."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2775,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2777,
							"name": "valueFunction",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "All comparisons would be performed on the result of\ncalling this function on each compared item. Preferably this function should\nreturn a "
									},
									{
										"kind": "code",
										"text": "`number`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`string`"
									},
									{
										"kind": "text",
										"text": ". This function should be the same as the one\nprovided to sortBy to sort the array. The function is called exactly once on\neach items that is compared against in the array, and once at the beginning\non "
									},
									{
										"kind": "code",
										"text": "`item`"
									},
									{
										"kind": "text",
										"text": ". When called on "
									},
									{
										"kind": "code",
										"text": "`item`"
									},
									{
										"kind": "text",
										"text": " the "
									},
									{
										"kind": "code",
										"text": "`index`"
									},
									{
										"kind": "text",
										"text": " argument is "
									},
									{
										"kind": "code",
										"text": "`undefined`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2778,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "sorted-last-index-by.ts",
											"line": 82,
											"character": 17,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index-by.ts"
										}
									],
									"signatures": [
										{
											"id": 2779,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "sorted-last-index-by.ts",
													"line": 82,
													"character": 17,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index-by.ts"
												}
											],
											"parameters": [
												{
													"id": 2780,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2775,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2781,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 2782,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 2775,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2783,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2784,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "sorted-last-index-by.ts",
									"line": 87,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/sorted-last-index-by.ts"
								}
							],
							"signatures": [
								{
									"id": 2785,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2786,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 2775,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2787,
			"name": "splice",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "splice.ts",
					"line": 18,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/splice.ts"
				},
				{
					"fileName": "splice.ts",
					"line": 39,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/splice.ts"
				},
				{
					"fileName": "splice.ts",
					"line": 45,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/splice.ts"
				}
			],
			"signatures": [
				{
					"id": 2788,
					"name": "splice",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Removes elements from an array and, inserts new elements in their place."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.splice(items, start, deleteCount, replacement)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.splice([1,2,3,4,5,6,7,8], 2, 3, []); //=> [1,2,6,7,8]\n   P.splice([1,2,3,4,5,6,7,8], 2, 3, [9, 10]); //=> [1,2,9,10,6,7,8]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "splice.ts",
							"line": 18,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/splice.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2789,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2790,
							"name": "items",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to splice."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2789,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 2791,
							"name": "start",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The index from which to start removing elements."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2792,
							"name": "deleteCount",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of elements to remove."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2793,
							"name": "replacement",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The elements to insert into the array in place of the deleted elements."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2789,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 2789,
							"name": "T",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 2794,
					"name": "splice",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Removes elements from an array and, inserts new elements in their place."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.splice(start, deleteCount, replacement)(items)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1,2,3,4,5,6,7,8], P.splice(2, 3, [])) // => [1,2,6,7,8]\n   P.pipe([1,2,3,4,5,6,7,8], P.splice(2, 3, [9, 10])) // => [1,2,9,10,6,7,8]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "splice.ts",
							"line": 39,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/splice.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2795,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2796,
							"name": "start",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The index from which to start removing elements."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2797,
							"name": "deleteCount",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of elements to remove."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2798,
							"name": "replacement",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The elements to insert into the array in place of the deleted elements."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2795,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2799,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "splice.ts",
									"line": 43,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/splice.ts"
								}
							],
							"signatures": [
								{
									"id": 2800,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2801,
											"name": "items",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 2795,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 2795,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2802,
			"name": "split",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "split.ts",
					"line": 58,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/split.ts"
				},
				{
					"fileName": "split.ts",
					"line": 94,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/split.ts"
				}
			],
			"signatures": [
				{
					"id": 2803,
					"name": "split",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Takes a pattern and divides this string into an ordered list of substrings by\nsearching for the pattern, puts these substrings into an array, and returns\nthe array. This function mirrors the built-in ["
							},
							{
								"kind": "code",
								"text": "`String.prototype.split`"
							},
							{
								"kind": "text",
								"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\nmethod."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "An Array of strings, split at each point where the separator occurs\nin the given string."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "R.split(data, separator, limit);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "R.split(\"a,b,c\", \",\"); //=> [\"a\", \"b\", \"c\"]\n  R.split(\"a,b,c\", \",\", 2); //=> [\"a\", \"b\"]\n  R.split(\"a1b2c3d\", /\\d/u); //=> [\"a\", \"b\", \"c\", \"d\"]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "split.ts",
							"line": 58,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/split.ts"
						}
					],
					"parameters": [
						{
							"id": 2804,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The string to split."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2805,
							"name": "separator",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The pattern describing where each split should occur. Can\nbe a string, or a regular expression."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "RegExp"
								},
								"name": "RegExp",
								"package": "typescript"
							}
						},
						{
							"id": 2806,
							"name": "limit",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A non-negative integer specifying a limit on the number of\nsubstrings to be included in the array. If provided, splits the string at\neach occurrence of the specified separator, but stops when limit entries have\nbeen placed in the array. Any leftover text is not included in the array at\nall. The array may contain fewer entries than limit if the end of the string\nis reached before the limit is reached. If limit is 0, [] is returned."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 2814,
					"name": "split",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Takes a pattern and divides this string into an ordered list of substrings by\nsearching for the pattern, puts these substrings into an array, and returns\nthe array. This function mirrors the built-in ["
							},
							{
								"kind": "code",
								"text": "`String.prototype.split`"
							},
							{
								"kind": "text",
								"text": "](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\nmethod."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "An Array of strings, split at each point where the separator occurs\nin the given string."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "R.split(separator, limit)(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "R.pipe(\"a,b,c\", R.split(\",\")); //=> [\"a\", \"b\", \"c\"]\n  R.pipe(\"a,b,c\", R.split(\",\", 2)); //=> [\"a\", \"b\"]\n  R.pipe(\"a1b2c3d\", R.split(/\\d/u)); //=> [\"a\", \"b\", \"c\", \"d\"]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "split.ts",
							"line": 94,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/split.ts"
						}
					],
					"parameters": [
						{
							"id": 2815,
							"name": "separator",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The pattern describing where each split should occur. Can\nbe a string, or a regular expression."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "RegExp"
								},
								"name": "RegExp",
								"package": "typescript"
							}
						},
						{
							"id": 2816,
							"name": "limit",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A non-negative integer specifying a limit on the number of\nsubstrings to be included in the array. If provided, splits the string at\neach occurrence of the specified separator, but stops when limit entries have\nbeen placed in the array. Any leftover text is not included in the array at\nall. The array may contain fewer entries than limit if the end of the string\nis reached before the limit is reached. If limit is 0, [] is returned."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2817,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "split.ts",
									"line": 97,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/split.ts"
								}
							],
							"signatures": [
								{
									"id": 2818,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2819,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2829,
			"name": "splitAt",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "split-at.ts",
					"line": 16,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-at.ts"
				},
				{
					"fileName": "split-at.ts",
					"line": 33,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-at.ts"
				},
				{
					"fileName": "split-at.ts",
					"line": 37,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-at.ts"
				}
			],
			"signatures": [
				{
					"id": 2830,
					"name": "splitAt",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Splits a given array at a given index."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.splitAt(array, index)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.splitAt([1, 2, 3], 1) // => [[1], [2, 3]]\n   P.splitAt([1, 2, 3, 4, 5], -1) // => [[1, 2, 3, 4], [5]]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "split-at.ts",
							"line": 16,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-at.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2831,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2832,
							"name": "array",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to split."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2831,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 2833,
							"name": "index",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The index to split at."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 2831,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 2831,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							}
						]
					}
				},
				{
					"id": 2834,
					"name": "splitAt",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Splits a given array at a given index."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.splitAt(index)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.splitAt(1)([1, 2, 3]) // => [[1], [2, 3]]\n   P.splitAt(-1)([1, 2, 3, 4, 5]) // => [[1, 2, 3, 4], [5]]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "split-at.ts",
							"line": 33,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-at.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2835,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2836,
							"name": "index",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The index to split at."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2837,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "split-at.ts",
									"line": 35,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-at.ts"
								}
							],
							"signatures": [
								{
									"id": 2838,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2839,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 2835,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 2835,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 2835,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										]
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2840,
			"name": "splitWhen",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "split-when.ts",
					"line": 15,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-when.ts"
				},
				{
					"fileName": "split-when.ts",
					"line": 31,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-when.ts"
				},
				{
					"fileName": "split-when.ts",
					"line": 35,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-when.ts"
				}
			],
			"signatures": [
				{
					"id": 2841,
					"name": "splitWhen",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Splits a given array at the first index where the given predicate returns true."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.splitWhen(array, fn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.splitWhen([1, 2, 3], x => x === 2) // => [[1], [2, 3]]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "split-when.ts",
							"line": 15,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-when.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2842,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2843,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to split."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2842,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 2844,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The predicate."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2845,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "split-when.ts",
											"line": 17,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-when.ts"
										}
									],
									"signatures": [
										{
											"id": 2846,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "split-when.ts",
													"line": 17,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-when.ts"
												}
											],
											"parameters": [
												{
													"id": 2847,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2842,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2848,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2849,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 2842,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 2842,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 2842,
									"name": "T",
									"package": "@vinicunca/perkakas",
									"refersToTypeParameter": true
								}
							}
						]
					}
				},
				{
					"id": 2850,
					"name": "splitWhen",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Splits a given array at an index where the given predicate returns true."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.splitWhen(fn)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.splitWhen(x => x === 2)([1, 2, 3]) // => [[1], [2, 3]]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "split-when.ts",
							"line": 31,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-when.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2851,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2852,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The predicate."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2853,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "split-when.ts",
											"line": 32,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-when.ts"
										}
									],
									"signatures": [
										{
											"id": 2854,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "split-when.ts",
													"line": 32,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-when.ts"
												}
											],
											"parameters": [
												{
													"id": 2855,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2851,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2856,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2857,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 2851,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2858,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "split-when.ts",
									"line": 33,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/split-when.ts"
								}
							],
							"signatures": [
								{
									"id": 2859,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2860,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 2851,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 2851,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 2851,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											}
										]
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2861,
			"name": "stringToPath",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "string-to-path.ts",
					"line": 36,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/string-to-path.ts"
				}
			],
			"signatures": [
				{
					"id": 2862,
					"name": "stringToPath",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Converts a path string to an array of string keys (including array index\naccess keys).\n\n! IMPORTANT: Attempting to pass a simple "
							},
							{
								"kind": "code",
								"text": "`string`"
							},
							{
								"kind": "text",
								"text": " type will result in the\nresult being inferred as "
							},
							{
								"kind": "code",
								"text": "`never`"
							},
							{
								"kind": "text",
								"text": ". This is intentional to help with type-\nsafety as this function is primarily intended to help with other \"object path\naccess\" functions like "
							},
							{
								"kind": "code",
								"text": "`pathOr`"
							},
							{
								"kind": "text",
								"text": " or "
							},
							{
								"kind": "code",
								"text": "`setPath`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.stringToPathArray(path)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.stringToPathArray('a.b[0].c') // => ['a', 'b', '0', 'c']"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "string-to-path.ts",
							"line": 36,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/string-to-path.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2863,
							"name": "Path",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"parameters": [
						{
							"id": 2864,
							"name": "path",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A string path."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2863,
								"name": "Path",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/string-to-path.ts",
							"qualifiedName": "StringToPath"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2863,
								"name": "Path",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "StringToPath",
						"package": "@vinicunca/perkakas"
					}
				}
			]
		},
		{
			"id": 2865,
			"name": "subtract",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "subtract.ts",
					"line": 17,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/subtract.ts"
				},
				{
					"fileName": "subtract.ts",
					"line": 33,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/subtract.ts"
				}
			],
			"signatures": [
				{
					"id": 2866,
					"name": "subtract",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Subtracts two numbers."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.subtract(value, subtrahend);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.subtract(10, 5) // => 5\n   P.subtract(10, -5) // => 15\n   P.reduce([1, 2, 3, 4], P.subtract, 20) // => 10"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "subtract.ts",
							"line": 17,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/subtract.ts"
						}
					],
					"parameters": [
						{
							"id": 2867,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						},
						{
							"id": 2868,
							"name": "subtrahend",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number to subtract from the value."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "bigint"
					}
				},
				{
					"id": 2872,
					"name": "subtract",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Subtracts two numbers."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.subtract(subtrahend)(value);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.subtract(5)(10) // => 5\n   P.subtract(-5)(10) // => 15\n   P.map([1, 2, 3, 4], P.subtract(1)) // => [0, 1, 2, 3]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "subtract.ts",
							"line": 33,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/subtract.ts"
						}
					],
					"parameters": [
						{
							"id": 2873,
							"name": "subtrahend",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number to subtract from the value."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2874,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "subtract.ts",
									"line": 33,
									"character": 46,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/subtract.ts"
								}
							],
							"signatures": [
								{
									"id": 2875,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2876,
											"name": "value",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "bigint"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "bigint"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2882,
			"name": "sum",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "sum.ts",
					"line": 39,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum.ts"
				},
				{
					"fileName": "sum.ts",
					"line": 63,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum.ts"
				},
				{
					"fileName": "sum.ts",
					"line": 69,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum.ts"
				}
			],
			"signatures": [
				{
					"id": 2883,
					"name": "sum",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sums the numbers in the array, or return 0 for an empty array.\n\nWorks for both "
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`bigint`"
							},
							{
								"kind": "text",
								"text": " arrays, but not arrays that contain both\ntypes.\n\nIMPORTANT: The result for empty arrays would be 0 ("
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": ") regardless of\nthe type of the array; to avoid adding this to the return type for cases\nwhere the array is known to be non-empty you can use "
							},
							{
								"kind": "code",
								"text": "`hasAtLeast`"
							},
							{
								"kind": "text",
								"text": " or\n"
							},
							{
								"kind": "code",
								"text": "`isEmpty`"
							},
							{
								"kind": "text",
								"text": " to guard against this case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sum(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sum([1, 2, 3]); // => 6\n  P.sum([1n, 2n, 3n]); // => 6n\n  P.sum([]); // => 0"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sum.ts",
							"line": 39,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2884,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "tuple"
										}
									},
									{
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									},
									{
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "array",
											"elementType": {
												"type": "intrinsic",
												"name": "bigint"
											}
										}
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 2885,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array of numbers."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2884,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/sum.ts",
							"qualifiedName": "Sum"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2884,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Sum",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 2886,
					"name": "sum",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Sums the numbers in the array, or return 0 for an empty array.\n\nWorks for both "
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`bigint`"
							},
							{
								"kind": "text",
								"text": " arrays, but not arrays that contain both\ntypes.\n\nIMPORTANT: The result for empty arrays would be 0 ("
							},
							{
								"kind": "code",
								"text": "`number`"
							},
							{
								"kind": "text",
								"text": ") regardless of\nthe type of the array; to avoid adding this to the return type for cases\nwhere the array is known to be non-empty you can use "
							},
							{
								"kind": "code",
								"text": "`hasAtLeast`"
							},
							{
								"kind": "text",
								"text": " or\n"
							},
							{
								"kind": "code",
								"text": "`isEmpty`"
							},
							{
								"kind": "text",
								"text": "to guard against this case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sum()(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 3], P.sum()); // => 6\n  P.pipe([1n, 2n, 3n], R.sum()); // => 6n\n  P.pipe([], P.sum()); // => 0"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sum.ts",
							"line": 63,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum.ts"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2887,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "sum.ts",
									"line": 63,
									"character": 23,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum.ts"
								}
							],
							"signatures": [
								{
									"id": 2888,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 2890,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "IterableContainer"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "bigint"
															}
														],
														"name": "IterableContainer",
														"package": "@vinicunca/perkakas"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "IterableContainer"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "number"
															}
														],
														"name": "IterableContainer",
														"package": "@vinicunca/perkakas"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 2889,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2890,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/sum.ts",
											"qualifiedName": "Sum"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 2890,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Sum",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2891,
			"name": "sumBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "sum-by.ts",
					"line": 18,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum-by.ts"
				},
				{
					"fileName": "sum-by.ts",
					"line": 38,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum-by.ts"
				},
				{
					"fileName": "sum-by.ts",
					"line": 43,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum-by.ts"
				}
			],
			"signatures": [
				{
					"id": 2892,
					"name": "sumBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the sum of the elements of an array using the provided predicate."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sumBy(fn)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [{a: 5}, {a: 1}, {a: 3}],\n     P.sumBy(x => x.a)\n   ) // 9"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sum-by.ts",
							"line": 18,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2893,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2894,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Predicate function."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2895,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "sum-by.ts",
											"line": 19,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum-by.ts"
										}
									],
									"signatures": [
										{
											"id": 2896,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "sum-by.ts",
													"line": 19,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum-by.ts"
												}
											],
											"parameters": [
												{
													"id": 2897,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2893,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2898,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2899,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 2893,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2900,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "sum-by.ts",
									"line": 20,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum-by.ts"
								}
							],
							"signatures": [
								{
									"id": 2901,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2902,
											"name": "items",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 2893,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						}
					}
				},
				{
					"id": 2903,
					"name": "sumBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the sum of the elements of an array using the provided predicate."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.sumBy(array, fn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.sumBy(\n     [{a: 5}, {a: 1}, {a: 3}],\n     x => x.a\n   ) // 9"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "sum-by.ts",
							"line": 38,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2904,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2905,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2904,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 2906,
							"name": "callbackfn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Predicate function."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2907,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "sum-by.ts",
											"line": 40,
											"character": 14,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum-by.ts"
										}
									],
									"signatures": [
										{
											"id": 2908,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "sum-by.ts",
													"line": 40,
													"character": 14,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/sum-by.ts"
												}
											],
											"parameters": [
												{
													"id": 2909,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2904,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												},
												{
													"id": 2910,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2911,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "reference",
																"target": 2904,
																"name": "T",
																"package": "@vinicunca/perkakas",
																"refersToTypeParameter": true
															}
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			]
		},
		{
			"id": 2912,
			"name": "swapIndices",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "swap-indices.ts",
					"line": 127,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/swap-indices.ts"
				},
				{
					"fileName": "swap-indices.ts",
					"line": 151,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/swap-indices.ts"
				},
				{
					"fileName": "swap-indices.ts",
					"line": 156,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/swap-indices.ts"
				}
			],
			"signatures": [
				{
					"id": 2913,
					"name": "swapIndices",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Swaps the positions of two elements in an array or string at the provided indices.\n\nNegative indices are supported and would be treated as an offset from the end of the array. The resulting type thought would be less strict than when using positive indices.\n\nIf either index is out of bounds the result would be a shallow copy of the input, as-is."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the manipulated array or string."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "swapIndices(data, index1, index2)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "swapIndices(['a', 'b', 'c'], 0, 1) // => ['b', 'a', 'c']\n  swapIndices(['a', 'b', 'c'], 1, -1) // => ['c', 'b', 'a']\n  swapIndices('abc', 0, 1) // => 'bac'"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "swap-indices.ts",
							"line": 127,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/swap-indices.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2914,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "IterableContainer"
										},
										"name": "IterableContainer",
										"package": "@vinicunca/perkakas"
									}
								]
							}
						},
						{
							"id": 2915,
							"name": "K1",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2916,
							"name": "K2",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"parameters": [
						{
							"id": 2917,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The item to be manipulated. This can be an array, or a string."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2914,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2918,
							"name": "index1",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The first index."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2915,
								"name": "K1",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2919,
							"name": "index2",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second index."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2916,
								"name": "K2",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/swap-indices.ts",
							"qualifiedName": "SwappedIndices"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2914,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 2915,
								"name": "K1",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 2916,
								"name": "K2",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "SwappedIndices",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 2920,
					"name": "swapIndices",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Swaps the positions of two elements in an array or string at the provided indices.\n\nNegative indices are supported and would be treated as an offset from the end of the array. The resulting type thought would be less strict than when using positive indices.\n\nIf either index is out of bounds the result would be a shallow copy of the input, as-is."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the manipulated array or string."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "swapIndices(index1, index2)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "swapIndices(0, 1)(['a', 'b', 'c']) // => ['b', 'a', 'c']\n  swapIndices(0, -1)('abc') // => 'cba'"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "swap-indices.ts",
							"line": 151,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/swap-indices.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2921,
							"name": "K1",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2922,
							"name": "K2",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"parameters": [
						{
							"id": 2923,
							"name": "index1",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The first index."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2921,
								"name": "K1",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2924,
							"name": "index2",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second index."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2922,
								"name": "K2",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2925,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "swap-indices.ts",
									"line": 154,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/swap-indices.ts"
								}
							],
							"signatures": [
								{
									"id": 2926,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 2928,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "src/helpers/types.ts",
															"qualifiedName": "IterableContainer"
														},
														"name": "IterableContainer",
														"package": "@vinicunca/perkakas"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 2927,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2928,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/swap-indices.ts",
											"qualifiedName": "SwappedIndices"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 2928,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 2921,
												"name": "K1",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 2922,
												"name": "K2",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "SwappedIndices",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2929,
			"name": "swapProps",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "swap-props.ts",
					"line": 21,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/swap-props.ts"
				},
				{
					"fileName": "swap-props.ts",
					"line": 40,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/swap-props.ts"
				},
				{
					"fileName": "swap-props.ts",
					"line": 46,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/swap-props.ts"
				}
			],
			"signatures": [
				{
					"id": 2930,
					"name": "swapProps",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Swaps the positions of two properties in an object based on the provided keys."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the manipulated object."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "swap(data, key1, key2)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "swap({a: 1, b: 2, c: 3}, 'a', 'b') // => {a: 2, b: 1, c: 3}"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "swap-props.ts",
							"line": 21,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/swap-props.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2931,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 2932,
							"name": "K1",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						},
						{
							"id": 2933,
							"name": "K2",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 2934,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The object to be manipulated."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2931,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2935,
							"name": "key1",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The first property key."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2932,
								"name": "K1",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2936,
							"name": "key2",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second property key."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2933,
								"name": "K2",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/swap-props.ts",
							"qualifiedName": "SwappedProps"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 2931,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 2932,
								"name": "K1",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 2933,
								"name": "K2",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "SwappedProps",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 2937,
					"name": "swapProps",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Swaps the positions of two properties in an object based on the provided keys."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "Returns the manipulated object."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "swap(key1, key2)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "swap('a', 'b')({a: 1, b: 2, c: 3}) // => {a: 2, b: 1, c: 3}"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "swap-props.ts",
							"line": 40,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/swap-props.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2938,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 2939,
							"name": "K1",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						},
						{
							"id": 2940,
							"name": "K2",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						}
					],
					"parameters": [
						{
							"id": 2941,
							"name": "key1",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The first property key."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2939,
								"name": "K1",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2942,
							"name": "key2",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second property key."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2940,
								"name": "K2",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2943,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "swap-props.ts",
									"line": 44,
									"character": 23,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/swap-props.ts"
								}
							],
							"signatures": [
								{
									"id": 2944,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2945,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2938,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/swap-props.ts",
											"qualifiedName": "SwappedProps"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 2938,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 2939,
												"name": "K1",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 2940,
												"name": "K2",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "SwappedProps",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2946,
			"name": "take",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "take.ts",
					"line": 20,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take.ts"
				},
				{
					"fileName": "take.ts",
					"line": 37,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take.ts"
				},
				{
					"fileName": "take.ts",
					"line": 41,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take.ts"
				}
			],
			"signatures": [
				{
					"id": 2947,
					"name": "take",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the first "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " elements of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.take(array, n)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.take([1, 2, 3, 4, 3, 2, 1], 3) // => [1, 2, 3]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "take.ts",
							"line": 20,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/take.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2948,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 2949,
							"name": "array",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2948,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2950,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of elements to take."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "intrinsic",
								"name": "number"
							},
							"objectType": {
								"type": "reference",
								"target": 2948,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					}
				},
				{
					"id": 2951,
					"name": "take",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns the first "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " elements of "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.take(n)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 3, 4, 3, 2, 1], P.take(n)) // => [1, 2, 3]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "take.ts",
							"line": 37,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/take.ts"
						}
					],
					"parameters": [
						{
							"id": 2952,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of elements to take."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2953,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "take.ts",
									"line": 39,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/take.ts"
								}
							],
							"signatures": [
								{
									"id": 2954,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 2956,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 2955,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2956,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "intrinsic",
												"name": "number"
											},
											"objectType": {
												"type": "reference",
												"target": 2956,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2957,
			"name": "takeFirstBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "take-first-by.ts",
					"line": 25,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-first-by.ts"
				},
				{
					"fileName": "take-first-by.ts",
					"line": 46,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-first-by.ts"
				},
				{
					"fileName": "take-first-by.ts",
					"line": 51,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-first-by.ts"
				}
			],
			"signatures": [
				{
					"id": 2958,
					"name": "takeFirstBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Take the first "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " items from "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " based on the provided ordering criteria. This allows you to avoid sorting the array before taking the items. The complexity of this function is *O(Nlogn)* where "
							},
							{
								"kind": "code",
								"text": "`N`"
							},
							{
								"kind": "text",
								"text": " is the length of the array.\n\nFor the opposite operation (to drop "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " elements) see "
							},
							{
								"kind": "code",
								"text": "`dropFirstBy`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A subset of the input array."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.takeFirstBy(data, n, ...rules);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.takeFirstBy(['aa', 'aaaa', 'a', 'aaa'], 2, x => x.length); // => ['a', 'aa']"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "take-first-by.ts",
							"line": 25,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-first-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2959,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2960,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The input array."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": 2959,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							}
						},
						{
							"id": 2961,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of items to take. If "
									},
									{
										"kind": "code",
										"text": "`n`"
									},
									{
										"kind": "text",
										"text": " is non-positive no items would be returned, if "
									},
									{
										"kind": "code",
										"text": "`n`"
									},
									{
										"kind": "text",
										"text": " is bigger then data.length a *clone* of "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " would be returned."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2962,
							"name": "rules",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
									},
									{
										"kind": "code",
										"text": "`<`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`>`"
									},
									{
										"kind": "text",
										"text": " operators. Earlier rules take precedence over later ones. Use the syntax "
									},
									{
										"kind": "code",
										"text": "`[projection, \"desc\"]`"
									},
									{
										"kind": "text",
										"text": " for descending order."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 2959,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 2959,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 2959,
							"name": "T",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				},
				{
					"id": 2963,
					"name": "takeFirstBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Take the first "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " items from "
							},
							{
								"kind": "code",
								"text": "`data`"
							},
							{
								"kind": "text",
								"text": " based on the provided ordering criteria. This allows you to avoid sorting the array before taking the items. The complexity of this function is *O(Nlogn)* where "
							},
							{
								"kind": "code",
								"text": "`N`"
							},
							{
								"kind": "text",
								"text": " is the length of the array.\n\nFor the opposite operation (to drop "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " elements) see "
							},
							{
								"kind": "code",
								"text": "`dropFirstBy`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "A subset of the input array."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.takeFirstBy(n, ...rules)(data);"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(['aa', 'aaaa', 'a', 'aaa'], P.takeFirstBy(2, x => x.length)); // => ['a', 'aa']"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "take-first-by.ts",
							"line": 46,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-first-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2964,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 2965,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of items to take. If "
									},
									{
										"kind": "code",
										"text": "`n`"
									},
									{
										"kind": "text",
										"text": " is non-positive no items would be returned, if "
									},
									{
										"kind": "code",
										"text": "`n`"
									},
									{
										"kind": "text",
										"text": " is bigger then data.length a *clone* of "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " would be returned."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2966,
							"name": "rules",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isRest": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A variadic array of order rules defining the sorting criteria. Each order rule is a projection function that extracts a comparable value from the data. Sorting is based on these extracted values using the native "
									},
									{
										"kind": "code",
										"text": "`<`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`>`"
									},
									{
										"kind": "text",
										"text": " operators. Earlier rules take precedence over later ones. Use the syntax "
									},
									{
										"kind": "code",
										"text": "`[projection, \"desc\"]`"
									},
									{
										"kind": "text",
										"text": " for descending order."
									}
								]
							},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "tuple",
									"elements": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 2964,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "src/helpers/curry-order-rules.ts",
												"qualifiedName": "OrderRule"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 2964,
													"name": "T",
													"package": "@vinicunca/perkakas",
													"refersToTypeParameter": true
												}
											],
											"name": "OrderRule",
											"package": "@vinicunca/perkakas"
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2967,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "take-first-by.ts",
									"line": 49,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-first-by.ts"
								}
							],
							"signatures": [
								{
									"id": 2968,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2969,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "ReadonlyArray"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 2964,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "ReadonlyArray",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 2964,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2970,
			"name": "takeLast",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "take-last.ts",
					"line": 17,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last.ts"
				},
				{
					"fileName": "take-last.ts",
					"line": 32,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last.ts"
				},
				{
					"fileName": "take-last.ts",
					"line": 36,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last.ts"
				}
			],
			"signatures": [
				{
					"id": 2971,
					"name": "takeLast",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Takes the last "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " elements from the "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.takeLast(array, n)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.takeLast([1, 2, 3, 4, 5], 2) // => [4, 5]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "take-last.ts",
							"line": 17,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2972,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 2973,
							"name": "array",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The target array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2972,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2974,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of elements to take."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "intrinsic",
								"name": "number"
							},
							"objectType": {
								"type": "reference",
								"target": 2972,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					}
				},
				{
					"id": 2975,
					"name": "takeLast",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Take the last "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " elements from the "
							},
							{
								"kind": "code",
								"text": "`array`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.takeLast(n)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.takeLast(2)([1, 2, 3, 4, 5]) // => [4, 5]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "take-last.ts",
							"line": 32,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2976,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 2977,
							"name": "n",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The number of elements to take."
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2978,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "take-last.ts",
									"line": 34,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last.ts"
								}
							],
							"signatures": [
								{
									"id": 2979,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 2980,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2976,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "intrinsic",
												"name": "number"
											},
											"objectType": {
												"type": "reference",
												"target": 2976,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 2981,
			"name": "takeLastWhile",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "take-last-while.ts",
					"line": 18,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last-while.ts"
				},
				{
					"fileName": "take-last-while.ts",
					"line": 35,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last-while.ts"
				},
				{
					"fileName": "take-last-while.ts",
					"line": 39,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last-while.ts"
				}
			],
			"signatures": [
				{
					"id": 2982,
					"name": "takeLastWhile",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns elements from the end of the array until the predicate returns false.\nThe returned elements will be in the same order as in the original array."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.takeLastWhile(data, predicate)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.takeLastWhile([1, 2, 10, 3, 4, 5], x => x < 10) // => [3, 4, 5]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "take-last-while.ts",
							"line": 18,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last-while.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2983,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 2984,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 2983,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 2985,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The predicate."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2986,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "take-last-while.ts",
											"line": 20,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last-while.ts"
										}
									],
									"signatures": [
										{
											"id": 2987,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "take-last-while.ts",
													"line": 20,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last-while.ts"
												}
											],
											"parameters": [
												{
													"id": 2988,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 2983,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 2989,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2990,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2983,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "intrinsic",
								"name": "number"
							},
							"objectType": {
								"type": "reference",
								"target": 2983,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					}
				},
				{
					"id": 2991,
					"name": "takeLastWhile",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns elements from the end of the array until the predicate returns false.\nThe returned elements will be in the same order as in the original array."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.takeLastWhile(predicate)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 10, 3, 4, 5], P.takeLastWhile(x => x < 10))  // => [3, 4, 5]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "take-last-while.ts",
							"line": 35,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last-while.ts"
						}
					],
					"typeParameters": [
						{
							"id": 2992,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 2993,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The predicate."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2994,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "take-last-while.ts",
											"line": 36,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last-while.ts"
										}
									],
									"signatures": [
										{
											"id": 2995,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "take-last-while.ts",
													"line": 36,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last-while.ts"
												}
											],
											"parameters": [
												{
													"id": 2996,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 2992,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 2997,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2998,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 2992,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2999,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "take-last-while.ts",
									"line": 37,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-last-while.ts"
								}
							],
							"signatures": [
								{
									"id": 3000,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 3001,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 2992,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "intrinsic",
												"name": "number"
											},
											"objectType": {
												"type": "reference",
												"target": 2992,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 3002,
			"name": "takeWhile",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "take-while.ts",
					"line": 17,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-while.ts"
				},
				{
					"fileName": "take-while.ts",
					"line": 33,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-while.ts"
				},
				{
					"fileName": "take-while.ts",
					"line": 37,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-while.ts"
				}
			],
			"signatures": [
				{
					"id": 3003,
					"name": "takeWhile",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns elements from the array until predicate returns false."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.takeWhile(data, predicate)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.takeWhile([1, 2, 3, 4, 3, 2, 1], x => x !== 4) // => [1, 2, 3]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "take-while.ts",
							"line": 17,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-while.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3004,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 3005,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3004,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 3006,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The predicate."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 3007,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "take-while.ts",
											"line": 19,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-while.ts"
										}
									],
									"signatures": [
										{
											"id": 3008,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "take-while.ts",
													"line": 19,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-while.ts"
												}
											],
											"parameters": [
												{
													"id": 3009,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 3004,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 3010,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 3011,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 3004,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "indexedAccess",
							"indexType": {
								"type": "intrinsic",
								"name": "number"
							},
							"objectType": {
								"type": "reference",
								"target": 3004,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					}
				},
				{
					"id": 3012,
					"name": "takeWhile",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns elements from the array until predicate returns false."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.takeWhile(predicate)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe([1, 2, 3, 4, 3, 2, 1], P.takeWhile(x => x !== 4))  // => [1, 2, 3]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "take-while.ts",
							"line": 33,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-while.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3013,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 3014,
							"name": "predicate",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The predicate."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 3015,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "take-while.ts",
											"line": 34,
											"character": 13,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-while.ts"
										}
									],
									"signatures": [
										{
											"id": 3016,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "take-while.ts",
													"line": 34,
													"character": 13,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-while.ts"
												}
											],
											"parameters": [
												{
													"id": 3017,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 3013,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 3018,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 3019,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 3013,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3020,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "take-while.ts",
									"line": 35,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/take-while.ts"
								}
							],
							"signatures": [
								{
									"id": 3021,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 3022,
											"name": "array",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 3013,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "indexedAccess",
											"indexType": {
												"type": "intrinsic",
												"name": "number"
											},
											"objectType": {
												"type": "reference",
												"target": 3013,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 3023,
			"name": "tap",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "tap.ts",
					"line": 19,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/tap.ts"
				},
				{
					"fileName": "tap.ts",
					"line": 41,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/tap.ts"
				},
				{
					"fileName": "tap.ts",
					"line": 43,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/tap.ts"
				}
			],
			"signatures": [
				{
					"id": 3024,
					"name": "tap",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Calls the given function with the given value, then returns the given value.\nThe return value of the provided function is ignored.\n\nThis allows \"tapping into\" a function sequence in a pipe, to perform side\neffects on intermediate results."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.tap(value, fn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.tap(\"foo\", console.log) // => \"foo\""
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "tap.ts",
							"line": 19,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/tap.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3025,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 3026,
							"name": "value",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value to pass into the function."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3025,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 3027,
							"name": "fn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function to call."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 3028,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "tap.ts",
											"line": 19,
											"character": 37,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/tap.ts"
										}
									],
									"signatures": [
										{
											"id": 3029,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "tap.ts",
													"line": 19,
													"character": 37,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/tap.ts"
												}
											],
											"parameters": [
												{
													"id": 3030,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 3025,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": 3025,
						"name": "T",
						"package": "@vinicunca/perkakas",
						"refersToTypeParameter": true
					}
				},
				{
					"id": 3031,
					"name": "tap",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Calls the given function with the given value, then returns the given value.\nThe return value of the provided function is ignored.\n\nThis allows \"tapping into\" a function sequence in a pipe, to perform side\neffects on intermediate results."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.tap(fn)(value)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [-5, -1, 2, 3],\n     P.filter(n => n > 0),\n     P.tap(console.log), // prints [2, 3]\n     P.map(n => n * 2)\n   ) // => [4, 6]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "tap.ts",
							"line": 41,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/tap.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3032,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 3033,
							"name": "F",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 3034,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "tap.ts",
											"line": 41,
											"character": 33,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/tap.ts"
										}
									],
									"signatures": [
										{
											"id": 3035,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "tap.ts",
													"line": 41,
													"character": 33,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/tap.ts"
												}
											],
											"parameters": [
												{
													"id": 3036,
													"name": "value",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 3032,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									]
								}
							}
						}
					],
					"parameters": [
						{
							"id": 3037,
							"name": "fn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function to call."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3033,
								"name": "F",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3038,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "tap.ts",
									"line": 41,
									"character": 64,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/tap.ts"
								}
							],
							"signatures": [
								{
									"id": 3039,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 3040,
											"name": "value",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 3032,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 3032,
										"name": "T",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 3041,
			"name": "times",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "times.ts",
					"line": 52,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/times.ts"
				},
				{
					"fileName": "times.ts",
					"line": 76,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/times.ts"
				},
				{
					"fileName": "times.ts",
					"line": 80,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/times.ts"
				}
			],
			"signatures": [
				{
					"id": 3042,
					"name": "times",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Calls an input function "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " times, returning an array containing the results\nof those function calls.\n\n"
							},
							{
								"kind": "code",
								"text": "`fn`"
							},
							{
								"kind": "text",
								"text": " is passed one argument: The current value of "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": ", which begins at "
							},
							{
								"kind": "code",
								"text": "`0`"
							},
							{
								"kind": "text",
								"text": "\nand is gradually incremented to "
							},
							{
								"kind": "code",
								"text": "`n - 1`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.times(count, fn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.times(5, identity()); //=> [0, 1, 2, 3, 4]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "times.ts",
							"line": 52,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/times.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3043,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 3044,
							"name": "N",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"parameters": [
						{
							"id": 3045,
							"name": "count",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A value between "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`n - 1`"
									},
									{
										"kind": "text",
										"text": ". Increments after each\nfunction call."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3044,
								"name": "N",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 3046,
							"name": "fn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function to invoke. Passed one argument, the current value of\n"
									},
									{
										"kind": "code",
										"text": "`n`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 3047,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "times.ts",
											"line": 54,
											"character": 6,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/times.ts"
										}
									],
									"signatures": [
										{
											"id": 3048,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "times.ts",
													"line": 54,
													"character": 6,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/times.ts"
												}
											],
											"parameters": [
												{
													"id": 3049,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 3043,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/times.ts",
							"qualifiedName": "TimesArray"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 3043,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 3044,
								"name": "N",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "TimesArray",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 3050,
					"name": "times",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Calls an input function "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": " times, returning an array containing the results\nof those function calls.\n\n"
							},
							{
								"kind": "code",
								"text": "`fn`"
							},
							{
								"kind": "text",
								"text": " is passed one argument: The current value of "
							},
							{
								"kind": "code",
								"text": "`n`"
							},
							{
								"kind": "text",
								"text": ", which begins at "
							},
							{
								"kind": "code",
								"text": "`0`"
							},
							{
								"kind": "text",
								"text": "\nand is gradually incremented to "
							},
							{
								"kind": "code",
								"text": "`n - 1`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@returns",
								"content": [
									{
										"kind": "text",
										"text": "An array containing the return values of all calls to "
									},
									{
										"kind": "code",
										"text": "`fn`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.times(count, fn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.times(identity())(5); //=> [0, 1, 2, 3, 4]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "times.ts",
							"line": 76,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/times.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3051,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 3052,
							"name": "fn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function to invoke. Passed one argument, the current value of\n"
									},
									{
										"kind": "code",
										"text": "`n`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 3053,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "times.ts",
											"line": 77,
											"character": 6,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/times.ts"
										}
									],
									"signatures": [
										{
											"id": 3054,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "times.ts",
													"line": 77,
													"character": 6,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/times.ts"
												}
											],
											"parameters": [
												{
													"id": 3055,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 3051,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3056,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "times.ts",
									"line": 78,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/times.ts"
								}
							],
							"signatures": [
								{
									"id": 3057,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 3059,
											"name": "N",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"parameters": [
										{
											"id": 3058,
											"name": "count",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 3059,
												"name": "N",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/times.ts",
											"qualifiedName": "TimesArray"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 3051,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 3059,
												"name": "N",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "TimesArray",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 3060,
			"name": "toCamelCase",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "to-camel-case.ts",
					"line": 29,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-camel-case.ts"
				}
			],
			"signatures": [
				{
					"id": 3061,
					"name": "toCamelCase",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convert a string to camel case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "toCamelCase(str)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "toCamelCase('test'); // => 'test'\n  toCamelCase('test string'); // => 'testSTring'\n  toCamelCase('test string', { delimiter: '$' }); // => 'test$string'\n  toCamelCase('TestV2', { separateNumbers: true }); // => 'testV_2'\n  toCamelCase('__typename', { prefixCharacters: '_' }); // => '__typename'\n  toCamelCase('type__', { suffixCharacters: '_' }); // => 'type__'\n  toCamelCase('version 1.2.10', { mergeAmbiguousCharacters: true }); // => 'version1210'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "to-camel-case.ts",
							"line": 29,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-camel-case.ts"
						}
					],
					"parameters": [
						{
							"id": 3062,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the string to convert"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3063,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional configuration for the conversion."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/case.types.ts",
									"qualifiedName": "ChangeCaseOptions"
								},
								"name": "ChangeCaseOptions",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 3064,
			"name": "toCapitalCase",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "to-capital-case.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-capital-case.ts"
				}
			],
			"signatures": [
				{
					"id": 3065,
					"name": "toCapitalCase",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convert a string to capital case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "toCapitalCase(str)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "toCapitalCase('test'); // => 'Test'\n  toCapitalCase('test string'); // => 'Test String'\n  toCapitalCase('test string', { delimiter: '$' }); // => 'Test$String'\n  toCapitalCase('testV2', { separateNumbers: true }); // => 'TEST V 2'\n  toCapitalCase('__typename', { prefixCharacters: '_' }); // => '__Typename'\n  toCapitalCase('type__', { suffixCharacters: '_' }); // => 'Type__'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "to-capital-case.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-capital-case.ts"
						}
					],
					"parameters": [
						{
							"id": 3066,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the string to convert"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3067,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional configuration for the conversion."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/case.types.ts",
									"qualifiedName": "ChangeCaseOptions"
								},
								"name": "ChangeCaseOptions",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 3068,
			"name": "toConstantCase",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "to-constant-case.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-constant-case.ts"
				}
			],
			"signatures": [
				{
					"id": 3069,
					"name": "toConstantCase",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convert a string to constant case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "toConstantCase(str)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "toConstantCase('test'); // => 'TEST'\n  toConstantCase('test string'); // => 'TEST_STRING'\n  toConstantCase('test string', { delimiter: '$' }); // => 'TEST$STRING'\n  toConstantCase('testV2', { separateNumbers: true }); // => 'TEST_V_2'\n  toConstantCase('__typename', { prefixCharacters: '_' }); // => '__TYPENAME'\n  toConstantCase('type__', { suffixCharacters: '_' }); // => 'TYPE__'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "to-constant-case.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-constant-case.ts"
						}
					],
					"parameters": [
						{
							"id": 3070,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the string to convert"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3071,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional configuration for the conversion."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/case.types.ts",
									"qualifiedName": "ChangeCaseOptions"
								},
								"name": "ChangeCaseOptions",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 3072,
			"name": "toKebabCase",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "to-kebab-case.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-kebab-case.ts"
				}
			],
			"signatures": [
				{
					"id": 3073,
					"name": "toKebabCase",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convert a string to kebab case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "toKebabCase(str)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "toKebabCase('test'); // => 'test'\n  toKebabCase('test string'); // => 'test-string'\n  toKebabCase('test string', { delimiter: '$' }); // => 'test$string'\n  toKebabCase('testV2', { separateNumbers: true }); // => 'test-v-2'\n  toKebabCase('__typename', { prefixCharacters: '_' }); // => '__typename'\n  toKebabCase('type__', { suffixCharacters: '_' }); // => 'type__'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "to-kebab-case.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-kebab-case.ts"
						}
					],
					"parameters": [
						{
							"id": 3074,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the string to convert"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3075,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional configuration for the conversion."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/case.types.ts",
									"qualifiedName": "ChangeCaseOptions"
								},
								"name": "ChangeCaseOptions",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 3076,
			"name": "toNoCase",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "to-no-case.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-no-case.ts"
				}
			],
			"signatures": [
				{
					"id": 3077,
					"name": "toNoCase",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convert a string to space separated lower case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "toNoCase(str)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "toNoCase('test'); // => 'test'\n  toNoCase('test string'); // => 'test string'\n  toNoCase('test string', { delimiter: '$' }); // => 'test$string'\n  toNoCase('testV2', { separateNumbers: true }); // => 'test v 2'\n  toNoCase('__typename', { prefixCharacters: '_' }); // => '__typename'\n  toNoCase('type__', { suffixCharacters: '_' }); // => 'type__'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "to-no-case.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-no-case.ts"
						}
					],
					"parameters": [
						{
							"id": 3078,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the string to convert"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3079,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional configuration for the conversion."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/case.types.ts",
									"qualifiedName": "ChangeCaseOptions"
								},
								"name": "ChangeCaseOptions",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 3080,
			"name": "toPascalCase",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "to-pascal-case.ts",
					"line": 29,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-pascal-case.ts"
				}
			],
			"signatures": [
				{
					"id": 3081,
					"name": "toPascalCase",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convert a string to pascal case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "toPascalCase(str)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "toPascalCase('test'); // => 'Test'\n  toPascalCase('test string'); // => 'TestString'\n  toPascalCase('test string', { delimiter: '$' }); // => 'Test$String'\n  toPascalCase('testV2', { separateNumbers: true }); // => 'TestV_2'\n  toPascalCase('__typename', { prefixCharacters: '_' }); // => '__Typename'\n  toPascalCase('type__', { suffixCharacters: '_' }); // => 'Type__'\n  toPascalCase('version 1.2.10', { mergeAmbiguousCharacters: true }); // => 'Version1210'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "to-pascal-case.ts",
							"line": 29,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-pascal-case.ts"
						}
					],
					"parameters": [
						{
							"id": 3082,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the string to convert"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3083,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional configuration for the conversion."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/case.types.ts",
									"qualifiedName": "ChangeCaseOptions"
								},
								"name": "ChangeCaseOptions",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 3084,
			"name": "toPascalSnakeCase",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "to-pascal-snake-case.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-pascal-snake-case.ts"
				}
			],
			"signatures": [
				{
					"id": 3085,
					"name": "toPascalSnakeCase",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convert a string to kebab case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "toPascalSnakeCase(str)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "toPascalSnakeCase('test'); // => 'Test'\n  toPascalSnakeCase('test string'); // => 'Test_String'\n  toPascalSnakeCase('test string', { delimiter: '$' }); // => 'Test$String'\n  toPascalSnakeCase('testV2', { separateNumbers: true }); // => 'Test_V_2'\n  toPascalSnakeCase('__typename', { prefixCharacters: '_' }); // => '__Typename'\n  toPascalSnakeCase('type__', { suffixCharacters: '_' }); // => 'Type__'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "to-pascal-snake-case.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-pascal-snake-case.ts"
						}
					],
					"parameters": [
						{
							"id": 3086,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the string to convert"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3087,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional configuration for the conversion."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/case.types.ts",
									"qualifiedName": "ChangeCaseOptions"
								},
								"name": "ChangeCaseOptions",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 3088,
			"name": "toSentenceCase",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "to-sentence-case.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-sentence-case.ts"
				}
			],
			"signatures": [
				{
					"id": 3089,
					"name": "toSentenceCase",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convert a string to sentence case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "toSentenceCase(str)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "toSentenceCase('test'); // => 'Test'\n  toSentenceCase('test string'); // => 'Test string'\n  toSentenceCase('test string', { delimiter: '$' }); // => 'Test$String'\n  toSentenceCase('testV2', { separateNumbers: true }); // => 'Test v 2'\n  toSentenceCase('__typename', { prefixCharacters: '_' }); // => '__Typename'\n  toSentenceCase('type__', { suffixCharacters: '_' }); // => 'Type__'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "to-sentence-case.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-sentence-case.ts"
						}
					],
					"parameters": [
						{
							"id": 3090,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the string to convert"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3091,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional configuration for the conversion."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/case.types.ts",
									"qualifiedName": "ChangeCaseOptions"
								},
								"name": "ChangeCaseOptions",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 3092,
			"name": "toSnakeCase",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "to-snake-case.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-snake-case.ts"
				}
			],
			"signatures": [
				{
					"id": 3093,
					"name": "toSnakeCase",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convert a string to sentence case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "toSnakeCase(str)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "toSnakeCase('test'); // => 'test'\n  toSnakeCase('test string'); // => 'test_string'\n  toSnakeCase('test string', { delimiter: '$' }); // => 'test$string'\n  toSnakeCase('testV2', { separateNumbers: true }); // => 'test_v_2'\n  toSnakeCase('__typename', { prefixCharacters: '_' }); // => '__typename'\n  toSnakeCase('type__', { suffixCharacters: '_' }); // => 'type__'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "to-snake-case.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-snake-case.ts"
						}
					],
					"parameters": [
						{
							"id": 3094,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the string to convert"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3095,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional configuration for the conversion."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/case.types.ts",
									"qualifiedName": "ChangeCaseOptions"
								},
								"name": "ChangeCaseOptions",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 3096,
			"name": "toTrainCase",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "to-train-case.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-train-case.ts"
				}
			],
			"signatures": [
				{
					"id": 3097,
					"name": "toTrainCase",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Convert a string to sentence case."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "toTrainCase(str)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "toTrainCase('test'); // => 'Test'\n  toTrainCase('test string'); // => 'Test-String'\n  toTrainCase('test string', { delimiter: '$' }); // => 'Test$String'\n  toTrainCase('testV2', { separateNumbers: true }); // => 'Test-V-2'\n  toTrainCase('__typename', { prefixCharacters: '_' }); // => '__Typename'\n  toTrainCase('type__', { suffixCharacters: '_' }); // => 'Type__'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "to-train-case.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/to-train-case.ts"
						}
					],
					"parameters": [
						{
							"id": 3098,
							"name": "input",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the string to convert"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3099,
							"name": "options",
							"variant": "param",
							"kind": 32768,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional configuration for the conversion."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/case.types.ts",
									"qualifiedName": "ChangeCaseOptions"
								},
								"name": "ChangeCaseOptions",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 3100,
			"name": "unique",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "unique.ts",
					"line": 20,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique.ts"
				},
				{
					"fileName": "unique.ts",
					"line": 38,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique.ts"
				},
				{
					"fileName": "unique.ts",
					"line": 40,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique.ts"
				}
			],
			"signatures": [
				{
					"id": 3101,
					"name": "unique",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a new array containing only one copy of each element in the original\nlist. Elements are compared by reference using Set."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.unique(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.unique([1, 2, 2, 5, 1, 6, 7]) // => [1, 2, 5, 6, 7]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "unique.ts",
							"line": 20,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3102,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 3103,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to filter."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3102,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "Deduped"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 3102,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Deduped",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 3104,
					"name": "unique",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a new array containing only one copy of each element in the original\nlist. Elements are compared by reference using Set."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.unique()(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [1, 2, 2, 5, 1, 6, 7], // only 4 iterations\n     P.unique(),\n     P.take(3)\n   ) // => [1, 2, 5]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "unique.ts",
							"line": 38,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique.ts"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3105,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "unique.ts",
									"line": 38,
									"character": 26,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique.ts"
								}
							],
							"signatures": [
								{
									"id": 3106,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 3108,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 3107,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 3108,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "Deduped"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 3108,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Deduped",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 3109,
			"name": "uniqueBy",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "unique-by.ts",
					"line": 24,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-by.ts"
				},
				{
					"fileName": "unique-by.ts",
					"line": 46,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-by.ts"
				},
				{
					"fileName": "unique-by.ts",
					"line": 50,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-by.ts"
				}
			],
			"signatures": [
				{
					"id": 3110,
					"name": "uniqueBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a new array containing only one copy of each element in the original\nlist transformed by a function. Elements are compared by reference using Set."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.uniqueBy(data, keyFunction)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.uniqueBy(\n    [{ n: 1 }, { n: 2 }, { n: 2 }, { n: 5 }, { n: 1 }, { n: 6 }, { n: 7 }],\n    (obj) => obj.n,\n   ) // => [{n: 1}, {n: 2}, {n: 5}, {n: 6}, {n: 7}]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "unique-by.ts",
							"line": 24,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3111,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 3112,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 3113,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to filter."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3111,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 3114,
							"name": "keyFunction",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Extracts a value that would be used to compare elements."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 3115,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "unique-by.ts",
											"line": 26,
											"character": 15,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-by.ts"
										}
									],
									"signatures": [
										{
											"id": 3116,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "unique-by.ts",
													"line": 26,
													"character": 15,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-by.ts"
												}
											],
											"parameters": [
												{
													"id": 3117,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 3111,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 3118,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 3119,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 3111,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 3112,
												"name": "K",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "Deduped"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 3111,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Deduped",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 3120,
					"name": "uniqueBy",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a new array containing only one copy of each element in the original\nlist transformed by a function. Elements are compared by reference using Set."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.uniqueBy(keyFunction)(data)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(\n     [{n: 1}, {n: 2}, {n: 2}, {n: 5}, {n: 1}, {n: 6}, {n: 7}], // only 4 iterations\n     P.uniqueBy(obj => obj.n),\n     P.take(3)\n   ) // => [{n: 1}, {n: 2}, {n: 5}]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "unique-by.ts",
							"line": 46,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-by.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3121,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 3122,
							"name": "K",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 3123,
							"name": "keyFunction",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Extracts a value that would be used to compare elements."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 3124,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "unique-by.ts",
											"line": 47,
											"character": 15,
											"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-by.ts"
										}
									],
									"signatures": [
										{
											"id": 3125,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "unique-by.ts",
													"line": 47,
													"character": 15,
													"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-by.ts"
												}
											],
											"parameters": [
												{
													"id": 3126,
													"name": "item",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "indexedAccess",
														"indexType": {
															"type": "intrinsic",
															"name": "number"
														},
														"objectType": {
															"type": "reference",
															"target": 3121,
															"name": "T",
															"package": "@vinicunca/perkakas",
															"refersToTypeParameter": true
														}
													}
												},
												{
													"id": 3127,
													"name": "index",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 3128,
													"name": "data",
													"variant": "param",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "reference",
														"target": 3121,
														"name": "T",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												}
											],
											"type": {
												"type": "reference",
												"target": 3122,
												"name": "K",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3129,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "unique-by.ts",
									"line": 48,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-by.ts"
								}
							],
							"signatures": [
								{
									"id": 3130,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 3131,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 3121,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "Deduped"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 3121,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Deduped",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 3132,
			"name": "uniqueWith",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "unique-with.ts",
					"line": 26,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-with.ts"
				},
				{
					"fileName": "unique-with.ts",
					"line": 50,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-with.ts"
				},
				{
					"fileName": "unique-with.ts",
					"line": 54,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-with.ts"
				}
			],
			"signatures": [
				{
					"id": 3133,
					"name": "uniqueWith",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a new array containing only one copy of each element in the original\nlist. Elements are compared by custom comparator isEquals."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.uniqueWith(array, isEquals)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.uniqueWith(\n     [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}],\n     P.equals,\n   ) // => [{a: 1}, {a: 2}, {a: 5}, {a: 6}, {a: 7}]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "unique-with.ts",
							"line": 26,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-with.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3134,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 3135,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The array to filter."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3134,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 3136,
							"name": "isEquals",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The comparator."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/unique-with.ts",
									"qualifiedName": "IsEquals"
								},
								"typeArguments": [
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "intrinsic",
											"name": "number"
										},
										"objectType": {
											"type": "reference",
											"target": 3134,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								],
								"name": "IsEquals",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/helpers/types.ts",
							"qualifiedName": "Deduped"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 3134,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Deduped",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 3137,
					"name": "uniqueWith",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a new array containing only one copy of each element in the original\nlist. Elements are compared by custom comparator isEquals."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.uniqueWith(isEquals)(array)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.uniqueWith(P.equals)(\n     [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}],\n   ) // => [{a: 1}, {a: 2}, {a: 5}, {a: 6}, {a: 7}]\n   P.pipe(\n     [{a: 1}, {a: 2}, {a: 2}, {a: 5}, {a: 1}, {a: 6}, {a: 7}], // only 4 iterations\n     P.uniqueWith(P.equals),\n     P.take(3)\n   ) // => [{a: 1}, {a: 2}, {a: 5}]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "unique-with.ts",
							"line": 50,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-with.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3138,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 3139,
							"name": "isEquals",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The comparator."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/unique-with.ts",
									"qualifiedName": "IsEquals"
								},
								"typeArguments": [
									{
										"type": "indexedAccess",
										"indexType": {
											"type": "intrinsic",
											"name": "number"
										},
										"objectType": {
											"type": "reference",
											"target": 3138,
											"name": "T",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								],
								"name": "IsEquals",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3140,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "unique-with.ts",
									"line": 52,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/unique-with.ts"
								}
							],
							"signatures": [
								{
									"id": 3141,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 3142,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 3138,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/helpers/types.ts",
											"qualifiedName": "Deduped"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 3138,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Deduped",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 3143,
			"name": "values",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "values.ts",
					"line": 24,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/values.ts"
				},
				{
					"fileName": "values.ts",
					"line": 42,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/values.ts"
				},
				{
					"fileName": "values.ts",
					"line": 44,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/values.ts"
				}
			],
			"signatures": [
				{
					"id": 3144,
					"name": "values",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a new array containing the values of the array or object."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.values(source)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.values(['x', 'y', 'z']) // => ['x', 'y', 'z']\n   P.values({ a: 'x', b: 'y', c: 'z' }) // => ['x', 'y', 'z']"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "values.ts",
							"line": 24,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/values.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3145,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"parameters": [
						{
							"id": 3146,
							"name": "data",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Either an array or an object."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3145,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/values.ts",
							"qualifiedName": "Values"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 3145,
								"name": "T",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Values",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 3147,
					"name": "values",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Returns a new array containing the values of the array or object."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.values()(source)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(['x', 'y', 'z'], P.values()) // => ['x', 'y', 'z']\n   P.pipe({ a: 'x', b: 'y', c: 'z' }, P.values()) // => ['x', 'y', 'z']\n   P.pipe(\n     { a: 'x', b: 'y', c: 'z' },\n     P.values(),\n     P.first(),\n   ) // => 'x'"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "values.ts",
							"line": 42,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/values.ts"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3148,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "values.ts",
									"line": 42,
									"character": 26,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/values.ts"
								}
							],
							"signatures": [
								{
									"id": 3149,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 3151,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										}
									],
									"parameters": [
										{
											"id": 3150,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 3151,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/values.ts",
											"qualifiedName": "Values"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 3151,
												"name": "T",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Values",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 3152,
			"name": "zip",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "zip.ts",
					"line": 41,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip.ts"
				},
				{
					"fileName": "zip.ts",
					"line": 60,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip.ts"
				},
				{
					"fileName": "zip.ts",
					"line": 64,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip.ts"
				}
			],
			"signatures": [
				{
					"id": 3153,
					"name": "zip",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a new list from two supplied lists by pairing up equally-positioned\nitems. The length of the returned list will match the shortest of the two\ninputs."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.zip(first, second)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.zip([1, 2], ['a', 'b']) // => [[1, 'a'], [2, 'b']]"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "zip.ts",
							"line": 41,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3154,
							"name": "F",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 3155,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 3156,
							"name": "first",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The first input list."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3154,
								"name": "F",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 3157,
							"name": "second",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second input list."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3155,
								"name": "S",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "src/zip.ts",
							"qualifiedName": "Zipped"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 3154,
								"name": "F",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							},
							{
								"type": "reference",
								"target": 3155,
								"name": "S",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						],
						"name": "Zipped",
						"package": "@vinicunca/perkakas"
					}
				},
				{
					"id": 3158,
					"name": "zip",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a new list from two supplied lists by pairing up equally-positioned\nitems. The length of the returned list will match the shortest of the two\ninputs."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.zip(second)(first)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.zip(['a', 'b'])([1, 2]) // => [[1, 'a'], [2, 'b']]"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "zip.ts",
							"line": 60,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3159,
							"name": "S",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"parameters": [
						{
							"id": 3160,
							"name": "second",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second input list."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3159,
								"name": "S",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3161,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "zip.ts",
									"line": 62,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip.ts"
								}
							],
							"signatures": [
								{
									"id": 3162,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 3164,
											"name": "F",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 3163,
											"name": "first",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 3164,
												"name": "F",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "src/zip.ts",
											"qualifiedName": "Zipped"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 3164,
												"name": "F",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 3159,
												"name": "S",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										],
										"name": "Zipped",
										"package": "@vinicunca/perkakas"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 3165,
			"name": "zipWith",
			"variant": "declaration",
			"kind": 64,
			"flags": {},
			"sources": [
				{
					"fileName": "zip-with.ts",
					"line": 28,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip-with.ts"
				},
				{
					"fileName": "zip-with.ts",
					"line": 49,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip-with.ts"
				},
				{
					"fileName": "zip-with.ts",
					"line": 70,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip-with.ts"
				},
				{
					"fileName": "zip-with.ts",
					"line": 76,
					"character": 16,
					"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip-with.ts"
				}
			],
			"signatures": [
				{
					"id": 3166,
					"name": "zipWith",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a new list from two supplied lists by calling the supplied function\nwith the same-positioned element from each list."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.zipWith(fn)(first, second)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.zipWith((a: string, b: string) => a + b)(['1', '2', '3'], ['a', 'b', 'c']) // => ['1a', '2b', '3c']"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "zip-with.ts",
							"line": 28,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip-with.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3167,
							"name": "TItem1",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 3168,
							"name": "TItem2",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						},
						{
							"id": 3169,
							"name": "Value",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 3170,
							"name": "fn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function applied to each position of the list."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/zip-with.ts",
									"qualifiedName": "ZippingFunction"
								},
								"typeArguments": [
									{
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"target": 3167,
												"name": "TItem1",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									},
									{
										"type": "typeOperator",
										"operator": "readonly",
										"target": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"target": 3168,
												"name": "TItem2",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									},
									{
										"type": "reference",
										"target": 3169,
										"name": "Value",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "ZippingFunction",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3171,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "zip-with.ts",
									"line": 30,
									"character": 3,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip-with.ts"
								}
							],
							"signatures": [
								{
									"id": 3172,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"typeParameters": [
										{
											"id": 3175,
											"name": "T1",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 3167,
														"name": "TItem1",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										},
										{
											"id": 3176,
											"name": "T2",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "src/helpers/types.ts",
													"qualifiedName": "IterableContainer"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 3168,
														"name": "TItem2",
														"package": "@vinicunca/perkakas",
														"refersToTypeParameter": true
													}
												],
												"name": "IterableContainer",
												"package": "@vinicunca/perkakas"
											}
										}
									],
									"parameters": [
										{
											"id": 3173,
											"name": "first",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 3175,
												"name": "T1",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 3174,
											"name": "second",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 3176,
												"name": "T2",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 3169,
											"name": "Value",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				},
				{
					"id": 3177,
					"name": "zipWith",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a new list from two supplied lists by calling the supplied function\nwith the same-positioned element from each list."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.zipWith(second, fn)(first)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.pipe(['1', '2', '3'], P.zipWith(['a', 'b', 'c'], (a, b) => a + b)) // => ['1a', '2b', '3c']"
									}
								]
							},
							{
								"tag": "@dataLast",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "zip-with.ts",
							"line": 49,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip-with.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3178,
							"name": "T1",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 3179,
							"name": "T2",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 3180,
							"name": "Value",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 3181,
							"name": "second",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second input list."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3179,
								"name": "T2",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 3182,
							"name": "fn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function applied to each position of the list."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/zip-with.ts",
									"qualifiedName": "ZippingFunction"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 3178,
										"name": "T1",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 3179,
										"name": "T2",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 3180,
										"name": "Value",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "ZippingFunction",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 3183,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"sources": [
								{
									"fileName": "zip-with.ts",
									"line": 53,
									"character": 51,
									"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip-with.ts"
								}
							],
							"signatures": [
								{
									"id": 3184,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 3185,
											"name": "first",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 3178,
												"name": "T1",
												"package": "@vinicunca/perkakas",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 3180,
											"name": "Value",
											"package": "@vinicunca/perkakas",
											"refersToTypeParameter": true
										}
									}
								}
							]
						}
					}
				},
				{
					"id": 3186,
					"name": "zipWith",
					"variant": "signature",
					"kind": 4096,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Creates a new list from two supplied lists by calling the supplied function\nwith the same-positioned element from each list."
							}
						],
						"blockTags": [
							{
								"tag": "@signature",
								"content": [
									{
										"kind": "text",
										"text": "P.zipWith(first, second, fn)"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "text",
										"text": "P.zipWith(['1', '2', '3'], ['a', 'b', 'c'], (a, b) => a + b) // => ['1a', '2b', '3c']"
									}
								]
							},
							{
								"tag": "@dataFirst",
								"content": []
							},
							{
								"tag": "@lazy",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "zip-with.ts",
							"line": 70,
							"character": 16,
							"url": "https://github.com/vinicunca/perkakas/blob/main/src/zip-with.ts"
						}
					],
					"typeParameters": [
						{
							"id": 3187,
							"name": "T1",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 3188,
							"name": "T2",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/helpers/types.ts",
									"qualifiedName": "IterableContainer"
								},
								"name": "IterableContainer",
								"package": "@vinicunca/perkakas"
							}
						},
						{
							"id": 3189,
							"name": "Value",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 3190,
							"name": "first",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The first input list."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3187,
								"name": "T1",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 3191,
							"name": "second",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The second input list."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 3188,
								"name": "T2",
								"package": "@vinicunca/perkakas",
								"refersToTypeParameter": true
							}
						},
						{
							"id": 3192,
							"name": "fn",
							"variant": "param",
							"kind": 32768,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The function applied to each position of the list."
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "src/zip-with.ts",
									"qualifiedName": "ZippingFunction"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 3187,
										"name": "T1",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 3188,
										"name": "T2",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 3189,
										"name": "Value",
										"package": "@vinicunca/perkakas",
										"refersToTypeParameter": true
									}
								],
								"name": "ZippingFunction",
								"package": "@vinicunca/perkakas"
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 3189,
							"name": "Value",
							"package": "@vinicunca/perkakas",
							"refersToTypeParameter": true
						}
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Variables",
			"children": [
				1093
			]
		},
		{
			"title": "Functions",
			"children": [
				2,
				19,
				36,
				53,
				70,
				79,
				92,
				101,
				110,
				123,
				262,
				270,
				281,
				302,
				313,
				328,
				345,
				347,
				360,
				373,
				384,
				405,
				426,
				437,
				450,
				493,
				536,
				557,
				600,
				621,
				630,
				641,
				654,
				677,
				686,
				707,
				728,
				737,
				760,
				783,
				804,
				817,
				821,
				823,
				846,
				859,
				874,
				883,
				887,
				891,
				895,
				898,
				923,
				927,
				936,
				940,
				944,
				969,
				973,
				977,
				997,
				1001,
				1005,
				1009,
				1013,
				1018,
				1043,
				1068,
				1072,
				1076,
				1080,
				1115,
				1124,
				1133,
				1142,
				1165,
				1190,
				1215,
				1238,
				1265,
				1286,
				1299,
				1327,
				1340,
				1357,
				1370,
				1383,
				1396,
				1439,
				1447,
				1456,
				1499,
				1548,
				1561,
				1604,
				2266,
				2442,
				2451,
				2470,
				2507,
				2513,
				2520,
				2529,
				2542,
				2569,
				2578,
				2587,
				2600,
				2617,
				2638,
				2647,
				2650,
				2661,
				2664,
				2683,
				2694,
				2705,
				2730,
				2751,
				2762,
				2787,
				2802,
				2829,
				2840,
				2861,
				2865,
				2882,
				2891,
				2912,
				2929,
				2946,
				2957,
				2970,
				2981,
				3002,
				3023,
				3041,
				3060,
				3064,
				3068,
				3072,
				3076,
				3080,
				3084,
				3088,
				3092,
				3096,
				3100,
				3109,
				3132,
				3143,
				3152,
				3165
			]
		}
	],
	"categories": [
		{
			"title": "Array",
			"children": [
				36,
				53,
				79,
				110,
				302,
				313,
				347,
				360,
				373,
				384,
				405,
				450,
				493,
				536,
				557,
				600,
				621,
				630,
				641,
				654,
				686,
				760,
				783,
				823,
				846,
				859,
				1080,
				1124,
				1133,
				1142,
				1190,
				1238,
				1265,
				1299,
				1357,
				1447,
				1456,
				2520,
				2529,
				2542,
				2569,
				2587,
				2638,
				2664,
				2683,
				2694,
				2705,
				2730,
				2751,
				2762,
				2787,
				2829,
				2840,
				2891,
				2912,
				2946,
				2957,
				2970,
				2981,
				3002,
				3041,
				3100,
				3109,
				3132,
				3152,
				3165
			]
		},
		{
			"title": "Function",
			"children": [
				123,
				262,
				270,
				281,
				345,
				821,
				1439,
				1604,
				2266,
				2647
			]
		},
		{
			"title": "Guard",
			"children": [
				804,
				883,
				887,
				891,
				895,
				898,
				923,
				927,
				936,
				940,
				944,
				969,
				973,
				977,
				997,
				1001,
				1005,
				1009,
				1013,
				1018,
				1043,
				1068,
				1072,
				1076
			]
		},
		{
			"title": "Number",
			"children": [
				2,
				70,
				92,
				328,
				677,
				1340,
				2442,
				2507,
				2578,
				2865,
				2882
			]
		},
		{
			"title": "Object",
			"children": [
				19,
				101,
				426,
				437,
				707,
				728,
				737,
				874,
				1115,
				1165,
				1215,
				1286,
				1327,
				1370,
				1383,
				1396,
				1499,
				1548,
				1561,
				2451,
				2470,
				2600,
				2617,
				2929,
				3143
			]
		},
		{
			"title": "Other",
			"children": [
				1093,
				3023
			]
		},
		{
			"title": "String",
			"children": [
				817,
				2513,
				2650,
				2661,
				2802,
				3060,
				3064,
				3068,
				3072,
				3076,
				3080,
				3084,
				3088,
				3092,
				3096
			]
		},
		{
			"title": "Utility",
			"children": [
				2861
			]
		}
	],
	"packageName": "@vinicunca/perkakas",
	"readme": [
		{
			"kind": "text",
			"text": "# @vinicunca/perkakas\n\n[![npm](https://img.shields.io/npm/v/@vinicunca/perkakas/latest.svg?style=flat&colorA=18181B&colorB=28CF8D)](https://npmjs.com/package/@vinicunca/perkakas)\n[![downloads](https://img.shields.io/npm/dm/@vinicunca/perkakas.svg?style=flat&colorA=18181B&colorB=28CF8D)](https://npmjs.com/package/@vinicunca/perkakas)\n[![license](https://img.shields.io/github/license/vinicunca/perkakas.svg?style=flat&colorA=18181B&colorB=28CF8D)](https://github.com/vinicunca/perkakas/blob/main/LICENSE)\n\nUtilities functions for javascript/typescript projects.\n\n[📖 &nbsp;Documentation](https://perkakas.vinicunca.dev/)"
		}
	],
	"symbolIdMap": {
		"0": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": ""
		},
		"2": {
			"sourceFileName": "src/add.ts",
			"qualifiedName": "add"
		},
		"3": {
			"sourceFileName": "src/add.ts",
			"qualifiedName": "add"
		},
		"4": {
			"sourceFileName": "src/add.ts",
			"qualifiedName": "value"
		},
		"5": {
			"sourceFileName": "src/add.ts",
			"qualifiedName": "addend"
		},
		"9": {
			"sourceFileName": "src/add.ts",
			"qualifiedName": "add"
		},
		"10": {
			"sourceFileName": "src/add.ts",
			"qualifiedName": "addend"
		},
		"11": {
			"sourceFileName": "src/add.ts",
			"qualifiedName": "__type"
		},
		"12": {
			"sourceFileName": "src/add.ts",
			"qualifiedName": "__type"
		},
		"13": {
			"sourceFileName": "src/add.ts",
			"qualifiedName": "value"
		},
		"19": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "addProp"
		},
		"20": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "addProp"
		},
		"21": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "T"
		},
		"22": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "K"
		},
		"23": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "V"
		},
		"24": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "obj"
		},
		"25": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "prop"
		},
		"26": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "value"
		},
		"27": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "addProp"
		},
		"28": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "T"
		},
		"29": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "K"
		},
		"30": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "V"
		},
		"31": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "prop"
		},
		"32": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "value"
		},
		"33": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "__type"
		},
		"34": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "__type"
		},
		"35": {
			"sourceFileName": "src/add-prop.ts",
			"qualifiedName": "obj"
		},
		"36": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "allPass"
		},
		"37": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "allPass"
		},
		"38": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "T"
		},
		"39": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "data"
		},
		"40": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "fns"
		},
		"41": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "__type"
		},
		"42": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "__type"
		},
		"43": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "data"
		},
		"44": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "allPass"
		},
		"45": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "T"
		},
		"46": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "fns"
		},
		"47": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "__type"
		},
		"48": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "__type"
		},
		"49": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "data"
		},
		"50": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "__type"
		},
		"51": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "__type"
		},
		"52": {
			"sourceFileName": "src/all-pass.ts",
			"qualifiedName": "data"
		},
		"53": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "anyPass"
		},
		"54": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "anyPass"
		},
		"55": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "T"
		},
		"56": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "data"
		},
		"57": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "fns"
		},
		"58": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "__type"
		},
		"59": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "__type"
		},
		"60": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "data"
		},
		"61": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "anyPass"
		},
		"62": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "T"
		},
		"63": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "fns"
		},
		"64": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "__type"
		},
		"65": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "__type"
		},
		"66": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "data"
		},
		"67": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "__type"
		},
		"68": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "__type"
		},
		"69": {
			"sourceFileName": "src/any-pass.ts",
			"qualifiedName": "data"
		},
		"70": {
			"sourceFileName": "src/ceil.ts",
			"qualifiedName": "ceil"
		},
		"71": {
			"sourceFileName": "src/ceil.ts",
			"qualifiedName": "ceil"
		},
		"72": {
			"sourceFileName": "src/ceil.ts",
			"qualifiedName": "value"
		},
		"73": {
			"sourceFileName": "src/ceil.ts",
			"qualifiedName": "precision"
		},
		"74": {
			"sourceFileName": "src/ceil.ts",
			"qualifiedName": "ceil"
		},
		"75": {
			"sourceFileName": "src/ceil.ts",
			"qualifiedName": "precision"
		},
		"76": {
			"sourceFileName": "src/ceil.ts",
			"qualifiedName": "__type"
		},
		"77": {
			"sourceFileName": "src/ceil.ts",
			"qualifiedName": "__type"
		},
		"78": {
			"sourceFileName": "src/ceil.ts",
			"qualifiedName": "value"
		},
		"79": {
			"sourceFileName": "src/chunk.ts",
			"qualifiedName": "chunk"
		},
		"80": {
			"sourceFileName": "src/chunk.ts",
			"qualifiedName": "chunk"
		},
		"81": {
			"sourceFileName": "src/chunk.ts",
			"qualifiedName": "T"
		},
		"82": {
			"sourceFileName": "src/chunk.ts",
			"qualifiedName": "N"
		},
		"83": {
			"sourceFileName": "src/chunk.ts",
			"qualifiedName": "array"
		},
		"84": {
			"sourceFileName": "src/chunk.ts",
			"qualifiedName": "size"
		},
		"85": {
			"sourceFileName": "src/chunk.ts",
			"qualifiedName": "chunk"
		},
		"86": {
			"sourceFileName": "src/chunk.ts",
			"qualifiedName": "N"
		},
		"87": {
			"sourceFileName": "src/chunk.ts",
			"qualifiedName": "size"
		},
		"88": {
			"sourceFileName": "src/chunk.ts",
			"qualifiedName": "__type"
		},
		"89": {
			"sourceFileName": "src/chunk.ts",
			"qualifiedName": "__type"
		},
		"90": {
			"sourceFileName": "src/chunk.ts",
			"qualifiedName": "array"
		},
		"91": {
			"sourceFileName": "src/chunk.ts",
			"qualifiedName": "T"
		},
		"92": {
			"sourceFileName": "src/clamp.ts",
			"qualifiedName": "clamp"
		},
		"93": {
			"sourceFileName": "src/clamp.ts",
			"qualifiedName": "clamp"
		},
		"94": {
			"sourceFileName": "src/clamp.ts",
			"qualifiedName": "value"
		},
		"95": {
			"sourceFileName": "src/clamp.ts",
			"qualifiedName": "limits"
		},
		"96": {
			"sourceFileName": "src/clamp.ts",
			"qualifiedName": "clamp"
		},
		"97": {
			"sourceFileName": "src/clamp.ts",
			"qualifiedName": "limits"
		},
		"98": {
			"sourceFileName": "src/clamp.ts",
			"qualifiedName": "__type"
		},
		"99": {
			"sourceFileName": "src/clamp.ts",
			"qualifiedName": "__type"
		},
		"100": {
			"sourceFileName": "src/clamp.ts",
			"qualifiedName": "value"
		},
		"101": {
			"sourceFileName": "src/clone.ts",
			"qualifiedName": "clone"
		},
		"102": {
			"sourceFileName": "src/clone.ts",
			"qualifiedName": "clone"
		},
		"103": {
			"sourceFileName": "src/clone.ts",
			"qualifiedName": "T"
		},
		"104": {
			"sourceFileName": "src/clone.ts",
			"qualifiedName": "data"
		},
		"105": {
			"sourceFileName": "src/clone.ts",
			"qualifiedName": "clone"
		},
		"106": {
			"sourceFileName": "src/clone.ts",
			"qualifiedName": "__type"
		},
		"107": {
			"sourceFileName": "src/clone.ts",
			"qualifiedName": "__type"
		},
		"108": {
			"sourceFileName": "src/clone.ts",
			"qualifiedName": "data"
		},
		"109": {
			"sourceFileName": "src/clone.ts",
			"qualifiedName": "T"
		},
		"110": {
			"sourceFileName": "src/concat.ts",
			"qualifiedName": "concat"
		},
		"111": {
			"sourceFileName": "src/concat.ts",
			"qualifiedName": "concat"
		},
		"112": {
			"sourceFileName": "src/concat.ts",
			"qualifiedName": "T1"
		},
		"113": {
			"sourceFileName": "src/concat.ts",
			"qualifiedName": "T2"
		},
		"114": {
			"sourceFileName": "src/concat.ts",
			"qualifiedName": "data"
		},
		"115": {
			"sourceFileName": "src/concat.ts",
			"qualifiedName": "other"
		},
		"116": {
			"sourceFileName": "src/concat.ts",
			"qualifiedName": "concat"
		},
		"117": {
			"sourceFileName": "src/concat.ts",
			"qualifiedName": "T2"
		},
		"118": {
			"sourceFileName": "src/concat.ts",
			"qualifiedName": "other"
		},
		"119": {
			"sourceFileName": "src/concat.ts",
			"qualifiedName": "__type"
		},
		"120": {
			"sourceFileName": "src/concat.ts",
			"qualifiedName": "__type"
		},
		"121": {
			"sourceFileName": "src/concat.ts",
			"qualifiedName": "data"
		},
		"122": {
			"sourceFileName": "src/concat.ts",
			"qualifiedName": "T1"
		},
		"123": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "conditionalPlus"
		},
		"124": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "conditionalPlus"
		},
		"125": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "T"
		},
		"126": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn0"
		},
		"127": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"128": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"129": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"130": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn1"
		},
		"131": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"132": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"133": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"134": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn2"
		},
		"135": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"136": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"137": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"138": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn3"
		},
		"139": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"140": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"141": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"142": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn4"
		},
		"143": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"144": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"145": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"146": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn5"
		},
		"147": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"148": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"149": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"150": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn6"
		},
		"151": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"152": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"153": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"154": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn7"
		},
		"155": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"156": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"157": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"158": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn8"
		},
		"159": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"160": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"161": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"162": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn9"
		},
		"163": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"164": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"165": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"166": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return0"
		},
		"167": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return1"
		},
		"168": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return2"
		},
		"169": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return3"
		},
		"170": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return4"
		},
		"171": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return5"
		},
		"172": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return6"
		},
		"173": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return7"
		},
		"174": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return8"
		},
		"175": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return9"
		},
		"176": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case0"
		},
		"177": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case1"
		},
		"178": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case2"
		},
		"179": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case3"
		},
		"180": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case4"
		},
		"181": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case5"
		},
		"182": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case6"
		},
		"183": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case7"
		},
		"184": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case8"
		},
		"185": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case9"
		},
		"186": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"187": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"188": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "data"
		},
		"189": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "conditionalPlus"
		},
		"190": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "T"
		},
		"191": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn0"
		},
		"192": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"193": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"194": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"195": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn1"
		},
		"196": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"197": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"198": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"199": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn2"
		},
		"200": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"201": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"202": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"203": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn3"
		},
		"204": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"205": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"206": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"207": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn4"
		},
		"208": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"209": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"210": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"211": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn5"
		},
		"212": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"213": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"214": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"215": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn6"
		},
		"216": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"217": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"218": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"219": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn7"
		},
		"220": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"221": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"222": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"223": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn8"
		},
		"224": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"225": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"226": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"227": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Fn9"
		},
		"228": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"229": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "__type"
		},
		"230": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "x"
		},
		"231": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return0"
		},
		"232": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return1"
		},
		"233": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return2"
		},
		"234": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return3"
		},
		"235": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return4"
		},
		"236": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return5"
		},
		"237": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return6"
		},
		"238": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return7"
		},
		"239": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return8"
		},
		"240": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "Return9"
		},
		"241": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "data"
		},
		"242": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case0"
		},
		"243": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case1"
		},
		"244": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case2"
		},
		"245": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case3"
		},
		"246": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case4"
		},
		"247": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case5"
		},
		"248": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case6"
		},
		"249": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case7"
		},
		"250": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case8"
		},
		"251": {
			"sourceFileName": "src/conditional.ts",
			"qualifiedName": "case9"
		},
		"262": {
			"sourceFileName": "src/constant.ts",
			"qualifiedName": "constant"
		},
		"263": {
			"sourceFileName": "src/constant.ts",
			"qualifiedName": "constant"
		},
		"264": {
			"sourceFileName": "src/constant.ts",
			"qualifiedName": "T"
		},
		"265": {
			"sourceFileName": "src/constant.ts",
			"qualifiedName": "value"
		},
		"266": {
			"sourceFileName": "src/constant.ts",
			"qualifiedName": "__type"
		},
		"267": {
			"sourceFileName": "src/constant.ts",
			"qualifiedName": "__type"
		},
		"268": {
			"sourceFileName": "src/constant.ts",
			"qualifiedName": "args"
		},
		"269": {
			"sourceFileName": "src/constant.ts",
			"qualifiedName": "Args"
		},
		"270": {
			"sourceFileName": "src/curry.ts",
			"qualifiedName": "curry"
		},
		"271": {
			"sourceFileName": "src/curry.ts",
			"qualifiedName": "curry"
		},
		"272": {
			"sourceFileName": "src/curry.ts",
			"qualifiedName": "fn"
		},
		"273": {
			"sourceFileName": "src/curry.ts",
			"qualifiedName": "__type"
		},
		"274": {
			"sourceFileName": "src/curry.ts",
			"qualifiedName": "__type"
		},
		"275": {
			"sourceFileName": "src/curry.ts",
			"qualifiedName": "args"
		},
		"276": {
			"sourceFileName": "src/curry.ts",
			"qualifiedName": "args"
		},
		"277": {
			"sourceFileName": "src/curry.ts",
			"qualifiedName": "lazy"
		},
		"278": {
			"sourceFileName": "src/curry.ts",
			"qualifiedName": "__type"
		},
		"279": {
			"sourceFileName": "src/curry.ts",
			"qualifiedName": "__type"
		},
		"280": {
			"sourceFileName": "src/curry.ts",
			"qualifiedName": "args"
		},
		"281": {
			"sourceFileName": "src/debounce.ts",
			"qualifiedName": "debounce"
		},
		"282": {
			"sourceFileName": "src/debounce.ts",
			"qualifiedName": "debounce"
		},
		"283": {
			"sourceFileName": "src/debounce.ts",
			"qualifiedName": "F"
		},
		"284": {
			"sourceFileName": "src/debounce.ts",
			"qualifiedName": "__type"
		},
		"285": {
			"sourceFileName": "src/debounce.ts",
			"qualifiedName": "__type"
		},
		"286": {
			"sourceFileName": "src/debounce.ts",
			"qualifiedName": "args"
		},
		"287": {
			"sourceFileName": "src/debounce.ts",
			"qualifiedName": "func"
		},
		"288": {
			"sourceFileName": "src/debounce.ts",
			"qualifiedName": "options"
		},
		"289": {
			"sourceFileName": "src/debounce.ts",
			"qualifiedName": "__type"
		},
		"290": {
			"sourceFileName": "src/debounce.ts",
			"qualifiedName": "__type.timing"
		},
		"302": {
			"sourceFileName": "src/difference.ts",
			"qualifiedName": "difference"
		},
		"303": {
			"sourceFileName": "src/difference.ts",
			"qualifiedName": "difference"
		},
		"304": {
			"sourceFileName": "src/difference.ts",
			"qualifiedName": "T"
		},
		"305": {
			"sourceFileName": "src/difference.ts",
			"qualifiedName": "data"
		},
		"306": {
			"sourceFileName": "src/difference.ts",
			"qualifiedName": "other"
		},
		"307": {
			"sourceFileName": "src/difference.ts",
			"qualifiedName": "difference"
		},
		"308": {
			"sourceFileName": "src/difference.ts",
			"qualifiedName": "T"
		},
		"309": {
			"sourceFileName": "src/difference.ts",
			"qualifiedName": "other"
		},
		"310": {
			"sourceFileName": "src/difference.ts",
			"qualifiedName": "__type"
		},
		"311": {
			"sourceFileName": "src/difference.ts",
			"qualifiedName": "__type"
		},
		"312": {
			"sourceFileName": "src/difference.ts",
			"qualifiedName": "data"
		},
		"313": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "differenceWith"
		},
		"314": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "differenceWith"
		},
		"315": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "TFirst"
		},
		"316": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "TSecond"
		},
		"317": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "array"
		},
		"318": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "other"
		},
		"319": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "isEquals"
		},
		"320": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "differenceWith"
		},
		"321": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "TFirst"
		},
		"322": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "TSecond"
		},
		"323": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "other"
		},
		"324": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "isEquals"
		},
		"325": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "__type"
		},
		"326": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "__type"
		},
		"327": {
			"sourceFileName": "src/difference-with.ts",
			"qualifiedName": "array"
		},
		"328": {
			"sourceFileName": "src/divide.ts",
			"qualifiedName": "divide"
		},
		"329": {
			"sourceFileName": "src/divide.ts",
			"qualifiedName": "divide"
		},
		"330": {
			"sourceFileName": "src/divide.ts",
			"qualifiedName": "value"
		},
		"331": {
			"sourceFileName": "src/divide.ts",
			"qualifiedName": "divisor"
		},
		"335": {
			"sourceFileName": "src/divide.ts",
			"qualifiedName": "divide"
		},
		"336": {
			"sourceFileName": "src/divide.ts",
			"qualifiedName": "divisor"
		},
		"337": {
			"sourceFileName": "src/divide.ts",
			"qualifiedName": "__type"
		},
		"338": {
			"sourceFileName": "src/divide.ts",
			"qualifiedName": "__type"
		},
		"339": {
			"sourceFileName": "src/divide.ts",
			"qualifiedName": "value"
		},
		"345": {
			"sourceFileName": "src/do-nothing.ts",
			"qualifiedName": "doNothing"
		},
		"346": {
			"sourceFileName": "src/do-nothing.ts",
			"qualifiedName": "doNothing"
		},
		"347": {
			"sourceFileName": "src/drop.ts",
			"qualifiedName": "drop"
		},
		"348": {
			"sourceFileName": "src/drop.ts",
			"qualifiedName": "drop"
		},
		"349": {
			"sourceFileName": "src/drop.ts",
			"qualifiedName": "T"
		},
		"350": {
			"sourceFileName": "src/drop.ts",
			"qualifiedName": "N"
		},
		"351": {
			"sourceFileName": "src/drop.ts",
			"qualifiedName": "array"
		},
		"352": {
			"sourceFileName": "src/drop.ts",
			"qualifiedName": "n"
		},
		"353": {
			"sourceFileName": "src/drop.ts",
			"qualifiedName": "drop"
		},
		"354": {
			"sourceFileName": "src/drop.ts",
			"qualifiedName": "N"
		},
		"355": {
			"sourceFileName": "src/drop.ts",
			"qualifiedName": "n"
		},
		"356": {
			"sourceFileName": "src/drop.ts",
			"qualifiedName": "__type"
		},
		"357": {
			"sourceFileName": "src/drop.ts",
			"qualifiedName": "__type"
		},
		"358": {
			"sourceFileName": "src/drop.ts",
			"qualifiedName": "array"
		},
		"359": {
			"sourceFileName": "src/drop.ts",
			"qualifiedName": "T"
		},
		"360": {
			"sourceFileName": "src/drop-first-by.ts",
			"qualifiedName": "dropFirstBy"
		},
		"361": {
			"sourceFileName": "src/drop-first-by.ts",
			"qualifiedName": "dropFirstBy"
		},
		"362": {
			"sourceFileName": "src/drop-first-by.ts",
			"qualifiedName": "T"
		},
		"363": {
			"sourceFileName": "src/drop-first-by.ts",
			"qualifiedName": "data"
		},
		"364": {
			"sourceFileName": "src/drop-first-by.ts",
			"qualifiedName": "n"
		},
		"365": {
			"sourceFileName": "src/drop-first-by.ts",
			"qualifiedName": "rules"
		},
		"366": {
			"sourceFileName": "src/drop-first-by.ts",
			"qualifiedName": "dropFirstBy"
		},
		"367": {
			"sourceFileName": "src/drop-first-by.ts",
			"qualifiedName": "T"
		},
		"368": {
			"sourceFileName": "src/drop-first-by.ts",
			"qualifiedName": "n"
		},
		"369": {
			"sourceFileName": "src/drop-first-by.ts",
			"qualifiedName": "rules"
		},
		"370": {
			"sourceFileName": "src/drop-first-by.ts",
			"qualifiedName": "__type"
		},
		"371": {
			"sourceFileName": "src/drop-first-by.ts",
			"qualifiedName": "__type"
		},
		"372": {
			"sourceFileName": "src/drop-first-by.ts",
			"qualifiedName": "data"
		},
		"373": {
			"sourceFileName": "src/drop-last.ts",
			"qualifiedName": "dropLast"
		},
		"374": {
			"sourceFileName": "src/drop-last.ts",
			"qualifiedName": "dropLast"
		},
		"375": {
			"sourceFileName": "src/drop-last.ts",
			"qualifiedName": "T"
		},
		"376": {
			"sourceFileName": "src/drop-last.ts",
			"qualifiedName": "array"
		},
		"377": {
			"sourceFileName": "src/drop-last.ts",
			"qualifiedName": "n"
		},
		"378": {
			"sourceFileName": "src/drop-last.ts",
			"qualifiedName": "dropLast"
		},
		"379": {
			"sourceFileName": "src/drop-last.ts",
			"qualifiedName": "n"
		},
		"380": {
			"sourceFileName": "src/drop-last.ts",
			"qualifiedName": "__type"
		},
		"381": {
			"sourceFileName": "src/drop-last.ts",
			"qualifiedName": "__type"
		},
		"382": {
			"sourceFileName": "src/drop-last.ts",
			"qualifiedName": "array"
		},
		"383": {
			"sourceFileName": "src/drop-last.ts",
			"qualifiedName": "T"
		},
		"384": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "dropLastWhile"
		},
		"385": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "dropLastWhile"
		},
		"386": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "T"
		},
		"387": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "data"
		},
		"388": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "predicate"
		},
		"389": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "__type"
		},
		"390": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "__type"
		},
		"391": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "item"
		},
		"392": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "index"
		},
		"393": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "data"
		},
		"394": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "dropLastWhile"
		},
		"395": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "T"
		},
		"396": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "predicate"
		},
		"397": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "__type"
		},
		"398": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "__type"
		},
		"399": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "item"
		},
		"400": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "index"
		},
		"401": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "data"
		},
		"402": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "__type"
		},
		"403": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "__type"
		},
		"404": {
			"sourceFileName": "src/drop-last-while.ts",
			"qualifiedName": "data"
		},
		"405": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "dropWhile"
		},
		"406": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "dropWhile"
		},
		"407": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "T"
		},
		"408": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "data"
		},
		"409": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "predicate"
		},
		"410": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "__type"
		},
		"411": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "__type"
		},
		"412": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "item"
		},
		"413": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "index"
		},
		"414": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "data"
		},
		"415": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "dropWhile"
		},
		"416": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "T"
		},
		"417": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "predicate"
		},
		"418": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "__type"
		},
		"419": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "__type"
		},
		"420": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "item"
		},
		"421": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "index"
		},
		"422": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "data"
		},
		"423": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "__type"
		},
		"424": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "__type"
		},
		"425": {
			"sourceFileName": "src/drop-while.ts",
			"qualifiedName": "data"
		},
		"426": {
			"sourceFileName": "src/entries.ts",
			"qualifiedName": "entries"
		},
		"427": {
			"sourceFileName": "src/entries.ts",
			"qualifiedName": "entries"
		},
		"428": {
			"sourceFileName": "src/entries.ts",
			"qualifiedName": "T"
		},
		"429": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"430": {
			"sourceFileName": "src/entries.ts",
			"qualifiedName": "data"
		},
		"431": {
			"sourceFileName": "src/entries.ts",
			"qualifiedName": "entries"
		},
		"432": {
			"sourceFileName": "src/entries.ts",
			"qualifiedName": "__type"
		},
		"433": {
			"sourceFileName": "src/entries.ts",
			"qualifiedName": "__type"
		},
		"434": {
			"sourceFileName": "src/entries.ts",
			"qualifiedName": "data"
		},
		"435": {
			"sourceFileName": "src/entries.ts",
			"qualifiedName": "T"
		},
		"436": {
			"sourceFileName": "src/entries.ts",
			"qualifiedName": "__type"
		},
		"437": {
			"sourceFileName": "src/evolve.ts",
			"qualifiedName": "evolve"
		},
		"438": {
			"sourceFileName": "src/evolve.ts",
			"qualifiedName": "evolve"
		},
		"439": {
			"sourceFileName": "src/evolve.ts",
			"qualifiedName": "T"
		},
		"440": {
			"sourceFileName": "src/evolve.ts",
			"qualifiedName": "E"
		},
		"441": {
			"sourceFileName": "src/evolve.ts",
			"qualifiedName": "object"
		},
		"442": {
			"sourceFileName": "src/evolve.ts",
			"qualifiedName": "evolver"
		},
		"443": {
			"sourceFileName": "src/evolve.ts",
			"qualifiedName": "evolve"
		},
		"444": {
			"sourceFileName": "src/evolve.ts",
			"qualifiedName": "T"
		},
		"445": {
			"sourceFileName": "src/evolve.ts",
			"qualifiedName": "E"
		},
		"446": {
			"sourceFileName": "src/evolve.ts",
			"qualifiedName": "evolver"
		},
		"447": {
			"sourceFileName": "src/evolve.ts",
			"qualifiedName": "__type"
		},
		"448": {
			"sourceFileName": "src/evolve.ts",
			"qualifiedName": "__type"
		},
		"449": {
			"sourceFileName": "src/evolve.ts",
			"qualifiedName": "object"
		},
		"450": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "filter"
		},
		"451": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "filter"
		},
		"452": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "T"
		},
		"453": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "S"
		},
		"454": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "data"
		},
		"455": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "predicate"
		},
		"456": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "__type"
		},
		"457": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "__type"
		},
		"458": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "value"
		},
		"459": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "index"
		},
		"460": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "data"
		},
		"470": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "filter"
		},
		"471": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "T"
		},
		"472": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "S"
		},
		"473": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "predicate"
		},
		"474": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "__type"
		},
		"475": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "__type"
		},
		"476": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "value"
		},
		"477": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "index"
		},
		"478": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "data"
		},
		"479": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "__type"
		},
		"480": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "__type"
		},
		"481": {
			"sourceFileName": "src/filter.ts",
			"qualifiedName": "data"
		},
		"493": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "find"
		},
		"494": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "find"
		},
		"495": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "T"
		},
		"496": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "S"
		},
		"497": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "data"
		},
		"498": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "predicate"
		},
		"499": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "__type"
		},
		"500": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "__type"
		},
		"501": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "value"
		},
		"502": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "index"
		},
		"503": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "data"
		},
		"513": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "find"
		},
		"514": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "T"
		},
		"515": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "S"
		},
		"516": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "predicate"
		},
		"517": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "__type"
		},
		"518": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "__type"
		},
		"519": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "value"
		},
		"520": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "index"
		},
		"521": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "data"
		},
		"522": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "__type"
		},
		"523": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "__type"
		},
		"524": {
			"sourceFileName": "src/find.ts",
			"qualifiedName": "data"
		},
		"536": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "findIndex"
		},
		"537": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "findIndex"
		},
		"538": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "T"
		},
		"539": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "data"
		},
		"540": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "predicate"
		},
		"541": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "__type"
		},
		"542": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "__type"
		},
		"543": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "value"
		},
		"544": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "index"
		},
		"545": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "obj"
		},
		"546": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "findIndex"
		},
		"547": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "T"
		},
		"548": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "predicate"
		},
		"549": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "__type"
		},
		"550": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "__type"
		},
		"551": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "value"
		},
		"552": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "index"
		},
		"553": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "obj"
		},
		"554": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "__type"
		},
		"555": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "__type"
		},
		"556": {
			"sourceFileName": "src/find-index.ts",
			"qualifiedName": "data"
		},
		"557": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "findLast"
		},
		"558": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "findLast"
		},
		"559": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "T"
		},
		"560": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "S"
		},
		"561": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "data"
		},
		"562": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "predicate"
		},
		"563": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "__type"
		},
		"564": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "__type"
		},
		"565": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "value"
		},
		"566": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "index"
		},
		"567": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "data"
		},
		"577": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "findLast"
		},
		"578": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "T"
		},
		"579": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "S"
		},
		"580": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "predicate"
		},
		"581": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "__type"
		},
		"582": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "__type"
		},
		"583": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "value"
		},
		"584": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "index"
		},
		"585": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "data"
		},
		"586": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "__type"
		},
		"587": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "__type"
		},
		"588": {
			"sourceFileName": "src/find-last.ts",
			"qualifiedName": "data"
		},
		"600": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "findLastIndex"
		},
		"601": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "findLastIndex"
		},
		"602": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "T"
		},
		"603": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "data"
		},
		"604": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "predicate"
		},
		"605": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "__type"
		},
		"606": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "__type"
		},
		"607": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "value"
		},
		"608": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "index"
		},
		"609": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "data"
		},
		"610": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "findLastIndex"
		},
		"611": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "T"
		},
		"612": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "predicate"
		},
		"613": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "__type"
		},
		"614": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "__type"
		},
		"615": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "value"
		},
		"616": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "index"
		},
		"617": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "data"
		},
		"618": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "__type"
		},
		"619": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "__type"
		},
		"620": {
			"sourceFileName": "src/find-last-index.ts",
			"qualifiedName": "array"
		},
		"621": {
			"sourceFileName": "src/first.ts",
			"qualifiedName": "first"
		},
		"622": {
			"sourceFileName": "src/first.ts",
			"qualifiedName": "first"
		},
		"623": {
			"sourceFileName": "src/first.ts",
			"qualifiedName": "T"
		},
		"624": {
			"sourceFileName": "src/first.ts",
			"qualifiedName": "data"
		},
		"625": {
			"sourceFileName": "src/first.ts",
			"qualifiedName": "first"
		},
		"626": {
			"sourceFileName": "src/first.ts",
			"qualifiedName": "__type"
		},
		"627": {
			"sourceFileName": "src/first.ts",
			"qualifiedName": "__type"
		},
		"628": {
			"sourceFileName": "src/first.ts",
			"qualifiedName": "data"
		},
		"629": {
			"sourceFileName": "src/first.ts",
			"qualifiedName": "T"
		},
		"630": {
			"sourceFileName": "src/first-by.ts",
			"qualifiedName": "firstBy"
		},
		"631": {
			"sourceFileName": "src/first-by.ts",
			"qualifiedName": "firstBy"
		},
		"632": {
			"sourceFileName": "src/first-by.ts",
			"qualifiedName": "T"
		},
		"633": {
			"sourceFileName": "src/first-by.ts",
			"qualifiedName": "rules"
		},
		"634": {
			"sourceFileName": "src/first-by.ts",
			"qualifiedName": "__type"
		},
		"635": {
			"sourceFileName": "src/first-by.ts",
			"qualifiedName": "__type"
		},
		"636": {
			"sourceFileName": "src/first-by.ts",
			"qualifiedName": "data"
		},
		"637": {
			"sourceFileName": "src/first-by.ts",
			"qualifiedName": "firstBy"
		},
		"638": {
			"sourceFileName": "src/first-by.ts",
			"qualifiedName": "T"
		},
		"639": {
			"sourceFileName": "src/first-by.ts",
			"qualifiedName": "data"
		},
		"640": {
			"sourceFileName": "src/first-by.ts",
			"qualifiedName": "rules"
		},
		"641": {
			"sourceFileName": "src/flat.ts",
			"qualifiedName": "flat"
		},
		"642": {
			"sourceFileName": "src/flat.ts",
			"qualifiedName": "flat"
		},
		"643": {
			"sourceFileName": "src/flat.ts",
			"qualifiedName": "T"
		},
		"644": {
			"sourceFileName": "src/flat.ts",
			"qualifiedName": "Depth"
		},
		"645": {
			"sourceFileName": "src/flat.ts",
			"qualifiedName": "data"
		},
		"646": {
			"sourceFileName": "src/flat.ts",
			"qualifiedName": "depth"
		},
		"647": {
			"sourceFileName": "src/flat.ts",
			"qualifiedName": "flat"
		},
		"648": {
			"sourceFileName": "src/flat.ts",
			"qualifiedName": "Depth"
		},
		"649": {
			"sourceFileName": "src/flat.ts",
			"qualifiedName": "depth"
		},
		"650": {
			"sourceFileName": "src/flat.ts",
			"qualifiedName": "__type"
		},
		"651": {
			"sourceFileName": "src/flat.ts",
			"qualifiedName": "__type"
		},
		"652": {
			"sourceFileName": "src/flat.ts",
			"qualifiedName": "data"
		},
		"653": {
			"sourceFileName": "src/flat.ts",
			"qualifiedName": "T"
		},
		"654": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "flatMap"
		},
		"655": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "flatMap"
		},
		"656": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "T"
		},
		"657": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "U"
		},
		"658": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "data"
		},
		"659": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "callbackfn"
		},
		"660": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "__type"
		},
		"661": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "__type"
		},
		"662": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "input"
		},
		"663": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "index"
		},
		"664": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "data"
		},
		"665": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "flatMap"
		},
		"666": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "T"
		},
		"667": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "U"
		},
		"668": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "callbackfn"
		},
		"669": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "__type"
		},
		"670": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "__type"
		},
		"671": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "input"
		},
		"672": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "index"
		},
		"673": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "data"
		},
		"674": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "__type"
		},
		"675": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "__type"
		},
		"676": {
			"sourceFileName": "src/flat-map.ts",
			"qualifiedName": "data"
		},
		"677": {
			"sourceFileName": "src/floor.ts",
			"qualifiedName": "floor"
		},
		"678": {
			"sourceFileName": "src/floor.ts",
			"qualifiedName": "floor"
		},
		"679": {
			"sourceFileName": "src/floor.ts",
			"qualifiedName": "value"
		},
		"680": {
			"sourceFileName": "src/floor.ts",
			"qualifiedName": "precision"
		},
		"681": {
			"sourceFileName": "src/floor.ts",
			"qualifiedName": "floor"
		},
		"682": {
			"sourceFileName": "src/floor.ts",
			"qualifiedName": "precision"
		},
		"683": {
			"sourceFileName": "src/floor.ts",
			"qualifiedName": "__type"
		},
		"684": {
			"sourceFileName": "src/floor.ts",
			"qualifiedName": "__type"
		},
		"685": {
			"sourceFileName": "src/floor.ts",
			"qualifiedName": "value"
		},
		"686": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "forEach"
		},
		"687": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "forEach"
		},
		"688": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "T"
		},
		"689": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "data"
		},
		"690": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "callbackfn"
		},
		"691": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "__type"
		},
		"692": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "__type"
		},
		"693": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "value"
		},
		"694": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "index"
		},
		"695": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "data"
		},
		"696": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "forEach"
		},
		"697": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "T"
		},
		"698": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "callbackfn"
		},
		"699": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "__type"
		},
		"700": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "__type"
		},
		"701": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "value"
		},
		"702": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "index"
		},
		"703": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "data"
		},
		"704": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "__type"
		},
		"705": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "__type"
		},
		"706": {
			"sourceFileName": "src/for-each.ts",
			"qualifiedName": "data"
		},
		"707": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "forEachObj"
		},
		"708": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "forEachObj"
		},
		"709": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "T"
		},
		"710": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "data"
		},
		"711": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "callbackfn"
		},
		"712": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "__type"
		},
		"713": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "__type"
		},
		"714": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "value"
		},
		"715": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "key"
		},
		"716": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "obj"
		},
		"717": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "forEachObj"
		},
		"718": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "T"
		},
		"719": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "callbackfn"
		},
		"720": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "__type"
		},
		"721": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "__type"
		},
		"722": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "value"
		},
		"723": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "key"
		},
		"724": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "obj"
		},
		"725": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "__type"
		},
		"726": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "__type"
		},
		"727": {
			"sourceFileName": "src/for-each-obj.ts",
			"qualifiedName": "object"
		},
		"728": {
			"sourceFileName": "src/from-entries.ts",
			"qualifiedName": "fromEntries"
		},
		"729": {
			"sourceFileName": "src/from-entries.ts",
			"qualifiedName": "fromEntries"
		},
		"730": {
			"sourceFileName": "src/from-entries.ts",
			"qualifiedName": "Entries"
		},
		"731": {
			"sourceFileName": "src/from-entries.ts",
			"qualifiedName": "entries"
		},
		"732": {
			"sourceFileName": "src/from-entries.ts",
			"qualifiedName": "fromEntries"
		},
		"733": {
			"sourceFileName": "src/from-entries.ts",
			"qualifiedName": "__type"
		},
		"734": {
			"sourceFileName": "src/from-entries.ts",
			"qualifiedName": "__type"
		},
		"735": {
			"sourceFileName": "src/from-entries.ts",
			"qualifiedName": "entries"
		},
		"736": {
			"sourceFileName": "src/from-entries.ts",
			"qualifiedName": "Entries"
		},
		"737": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "fromKeys"
		},
		"738": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "fromKeys"
		},
		"739": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "T"
		},
		"740": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "V"
		},
		"741": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "data"
		},
		"742": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "mapper"
		},
		"743": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "__type"
		},
		"744": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "__type"
		},
		"745": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "item"
		},
		"746": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "index"
		},
		"747": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "data"
		},
		"748": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "fromKeys"
		},
		"749": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "T"
		},
		"750": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "V"
		},
		"751": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "mapper"
		},
		"752": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "__type"
		},
		"753": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "__type"
		},
		"754": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "item"
		},
		"755": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "index"
		},
		"756": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "data"
		},
		"757": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "__type"
		},
		"758": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "__type"
		},
		"759": {
			"sourceFileName": "src/from-keys.ts",
			"qualifiedName": "data"
		},
		"760": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "groupBy"
		},
		"761": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "groupBy"
		},
		"762": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "T"
		},
		"763": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "Key"
		},
		"764": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "data"
		},
		"765": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "callbackfn"
		},
		"766": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "__type"
		},
		"767": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "__type"
		},
		"768": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "value"
		},
		"769": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "index"
		},
		"770": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "data"
		},
		"771": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "groupBy"
		},
		"772": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "T"
		},
		"773": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "Key"
		},
		"774": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "callbackfn"
		},
		"775": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "__type"
		},
		"776": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "__type"
		},
		"777": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "value"
		},
		"778": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "index"
		},
		"779": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "data"
		},
		"780": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "__type"
		},
		"781": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "__type"
		},
		"782": {
			"sourceFileName": "src/group-by.ts",
			"qualifiedName": "items"
		},
		"783": {
			"sourceFileName": "src/has-at-least.ts",
			"qualifiedName": "hasAtLeast"
		},
		"784": {
			"sourceFileName": "src/has-at-least.ts",
			"qualifiedName": "hasAtLeast"
		},
		"785": {
			"sourceFileName": "src/has-at-least.ts",
			"qualifiedName": "T"
		},
		"786": {
			"sourceFileName": "src/has-at-least.ts",
			"qualifiedName": "N"
		},
		"787": {
			"sourceFileName": "src/has-at-least.ts",
			"qualifiedName": "data"
		},
		"788": {
			"sourceFileName": "src/has-at-least.ts",
			"qualifiedName": "minimum"
		},
		"792": {
			"sourceFileName": "src/has-at-least.ts",
			"qualifiedName": "hasAtLeast"
		},
		"793": {
			"sourceFileName": "src/has-at-least.ts",
			"qualifiedName": "N"
		},
		"794": {
			"sourceFileName": "src/has-at-least.ts",
			"qualifiedName": "minimum"
		},
		"795": {
			"sourceFileName": "src/has-at-least.ts",
			"qualifiedName": "__type"
		},
		"796": {
			"sourceFileName": "src/has-at-least.ts",
			"qualifiedName": "__type"
		},
		"797": {
			"sourceFileName": "src/has-at-least.ts",
			"qualifiedName": "data"
		},
		"798": {
			"sourceFileName": "src/has-at-least.ts",
			"qualifiedName": "T"
		},
		"804": {
			"sourceFileName": "src/has-sub-object.ts",
			"qualifiedName": "hasSubObject"
		},
		"805": {
			"sourceFileName": "src/has-sub-object.ts",
			"qualifiedName": "hasSubObject"
		},
		"806": {
			"sourceFileName": "src/has-sub-object.ts",
			"qualifiedName": "T"
		},
		"807": {
			"sourceFileName": "src/has-sub-object.ts",
			"qualifiedName": "S"
		},
		"808": {
			"sourceFileName": "src/has-sub-object.ts",
			"qualifiedName": "data"
		},
		"809": {
			"sourceFileName": "src/has-sub-object.ts",
			"qualifiedName": "subObject"
		},
		"810": {
			"sourceFileName": "src/has-sub-object.ts",
			"qualifiedName": "hasSubObject"
		},
		"811": {
			"sourceFileName": "src/has-sub-object.ts",
			"qualifiedName": "S"
		},
		"812": {
			"sourceFileName": "src/has-sub-object.ts",
			"qualifiedName": "subObject"
		},
		"813": {
			"sourceFileName": "src/has-sub-object.ts",
			"qualifiedName": "__type"
		},
		"814": {
			"sourceFileName": "src/has-sub-object.ts",
			"qualifiedName": "__type"
		},
		"815": {
			"sourceFileName": "src/has-sub-object.ts",
			"qualifiedName": "data"
		},
		"816": {
			"sourceFileName": "src/has-sub-object.ts",
			"qualifiedName": "T"
		},
		"817": {
			"sourceFileName": "src/human-readable-file-size.ts",
			"qualifiedName": "humanReadableFileSize"
		},
		"818": {
			"sourceFileName": "src/human-readable-file-size.ts",
			"qualifiedName": "humanReadableFileSize"
		},
		"819": {
			"sourceFileName": "src/human-readable-file-size.ts",
			"qualifiedName": "bytes"
		},
		"820": {
			"sourceFileName": "src/human-readable-file-size.ts",
			"qualifiedName": "base"
		},
		"821": {
			"sourceFileName": "src/identity.ts",
			"qualifiedName": "identity"
		},
		"822": {
			"sourceFileName": "src/identity.ts",
			"qualifiedName": "identity"
		},
		"823": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "indexBy"
		},
		"824": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "indexBy"
		},
		"825": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "T"
		},
		"826": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "K"
		},
		"827": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "data"
		},
		"828": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "mapper"
		},
		"829": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "__type"
		},
		"830": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "__type"
		},
		"831": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "item"
		},
		"832": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "index"
		},
		"833": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "data"
		},
		"834": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "indexBy"
		},
		"835": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "T"
		},
		"836": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "K"
		},
		"837": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "mapper"
		},
		"838": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "__type"
		},
		"839": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "__type"
		},
		"840": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "item"
		},
		"841": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "index"
		},
		"842": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "data"
		},
		"843": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "__type"
		},
		"844": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "__type"
		},
		"845": {
			"sourceFileName": "src/index-by.ts",
			"qualifiedName": "data"
		},
		"846": {
			"sourceFileName": "src/intersection.ts",
			"qualifiedName": "intersection"
		},
		"847": {
			"sourceFileName": "src/intersection.ts",
			"qualifiedName": "intersection"
		},
		"848": {
			"sourceFileName": "src/intersection.ts",
			"qualifiedName": "T"
		},
		"849": {
			"sourceFileName": "src/intersection.ts",
			"qualifiedName": "S"
		},
		"850": {
			"sourceFileName": "src/intersection.ts",
			"qualifiedName": "data"
		},
		"851": {
			"sourceFileName": "src/intersection.ts",
			"qualifiedName": "other"
		},
		"852": {
			"sourceFileName": "src/intersection.ts",
			"qualifiedName": "intersection"
		},
		"853": {
			"sourceFileName": "src/intersection.ts",
			"qualifiedName": "S"
		},
		"854": {
			"sourceFileName": "src/intersection.ts",
			"qualifiedName": "other"
		},
		"855": {
			"sourceFileName": "src/intersection.ts",
			"qualifiedName": "__type"
		},
		"856": {
			"sourceFileName": "src/intersection.ts",
			"qualifiedName": "__type"
		},
		"857": {
			"sourceFileName": "src/intersection.ts",
			"qualifiedName": "data"
		},
		"858": {
			"sourceFileName": "src/intersection.ts",
			"qualifiedName": "T"
		},
		"859": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "intersectionWith"
		},
		"860": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "intersectionWith"
		},
		"861": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "TFirst"
		},
		"862": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "TSecond"
		},
		"863": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "array"
		},
		"864": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "other"
		},
		"865": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "comparator"
		},
		"866": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "intersectionWith"
		},
		"867": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "TFirst"
		},
		"868": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "TSecond"
		},
		"869": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "other"
		},
		"870": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "comparator"
		},
		"871": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "__type"
		},
		"872": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "__type"
		},
		"873": {
			"sourceFileName": "src/intersection-with.ts",
			"qualifiedName": "array"
		},
		"874": {
			"sourceFileName": "src/invert.ts",
			"qualifiedName": "invert"
		},
		"875": {
			"sourceFileName": "src/invert.ts",
			"qualifiedName": "invert"
		},
		"876": {
			"sourceFileName": "src/invert.ts",
			"qualifiedName": "T"
		},
		"877": {
			"sourceFileName": "src/invert.ts",
			"qualifiedName": "object"
		},
		"878": {
			"sourceFileName": "src/invert.ts",
			"qualifiedName": "invert"
		},
		"879": {
			"sourceFileName": "src/invert.ts",
			"qualifiedName": "T"
		},
		"880": {
			"sourceFileName": "src/invert.ts",
			"qualifiedName": "__type"
		},
		"881": {
			"sourceFileName": "src/invert.ts",
			"qualifiedName": "__type"
		},
		"882": {
			"sourceFileName": "src/invert.ts",
			"qualifiedName": "object"
		},
		"883": {
			"sourceFileName": "src/is-array.ts",
			"qualifiedName": "isArray"
		},
		"884": {
			"sourceFileName": "src/is-array.ts",
			"qualifiedName": "isArray"
		},
		"885": {
			"sourceFileName": "src/is-array.ts",
			"qualifiedName": "T"
		},
		"886": {
			"sourceFileName": "src/is-array.ts",
			"qualifiedName": "data"
		},
		"887": {
			"sourceFileName": "src/is-big-int.ts",
			"qualifiedName": "isBigInt"
		},
		"888": {
			"sourceFileName": "src/is-big-int.ts",
			"qualifiedName": "isBigInt"
		},
		"889": {
			"sourceFileName": "src/is-big-int.ts",
			"qualifiedName": "T"
		},
		"890": {
			"sourceFileName": "src/is-big-int.ts",
			"qualifiedName": "data"
		},
		"891": {
			"sourceFileName": "src/is-boolean.ts",
			"qualifiedName": "isBoolean"
		},
		"892": {
			"sourceFileName": "src/is-boolean.ts",
			"qualifiedName": "isBoolean"
		},
		"893": {
			"sourceFileName": "src/is-boolean.ts",
			"qualifiedName": "T"
		},
		"894": {
			"sourceFileName": "src/is-boolean.ts",
			"qualifiedName": "data"
		},
		"895": {
			"sourceFileName": "src/is-date.ts",
			"qualifiedName": "isDate"
		},
		"896": {
			"sourceFileName": "src/is-date.ts",
			"qualifiedName": "isDate"
		},
		"897": {
			"sourceFileName": "src/is-date.ts",
			"qualifiedName": "data"
		},
		"898": {
			"sourceFileName": "src/is-deep-equal.ts",
			"qualifiedName": "isDeepEqual"
		},
		"899": {
			"sourceFileName": "src/is-deep-equal.ts",
			"qualifiedName": "isDeepEqual"
		},
		"900": {
			"sourceFileName": "src/is-deep-equal.ts",
			"qualifiedName": "T"
		},
		"901": {
			"sourceFileName": "src/is-deep-equal.ts",
			"qualifiedName": "S"
		},
		"902": {
			"sourceFileName": "src/is-deep-equal.ts",
			"qualifiedName": "data"
		},
		"903": {
			"sourceFileName": "src/is-deep-equal.ts",
			"qualifiedName": "other"
		},
		"909": {
			"sourceFileName": "src/is-deep-equal.ts",
			"qualifiedName": "isDeepEqual"
		},
		"910": {
			"sourceFileName": "src/is-deep-equal.ts",
			"qualifiedName": "T"
		},
		"911": {
			"sourceFileName": "src/is-deep-equal.ts",
			"qualifiedName": "S"
		},
		"912": {
			"sourceFileName": "src/is-deep-equal.ts",
			"qualifiedName": "other"
		},
		"913": {
			"sourceFileName": "src/is-deep-equal.ts",
			"qualifiedName": "__type"
		},
		"914": {
			"sourceFileName": "src/is-deep-equal.ts",
			"qualifiedName": "__type"
		},
		"915": {
			"sourceFileName": "src/is-deep-equal.ts",
			"qualifiedName": "data"
		},
		"923": {
			"sourceFileName": "src/is-defined.ts",
			"qualifiedName": "isDefined"
		},
		"924": {
			"sourceFileName": "src/is-defined.ts",
			"qualifiedName": "isDefined"
		},
		"925": {
			"sourceFileName": "src/is-defined.ts",
			"qualifiedName": "T"
		},
		"926": {
			"sourceFileName": "src/is-defined.ts",
			"qualifiedName": "data"
		},
		"927": {
			"sourceFileName": "src/is-empty.ts",
			"qualifiedName": "isEmpty"
		},
		"928": {
			"sourceFileName": "src/is-empty.ts",
			"qualifiedName": "isEmpty"
		},
		"929": {
			"sourceFileName": "src/is-empty.ts",
			"qualifiedName": "T"
		},
		"930": {
			"sourceFileName": "src/is-empty.ts",
			"qualifiedName": "data"
		},
		"936": {
			"sourceFileName": "src/is-error.ts",
			"qualifiedName": "isError"
		},
		"937": {
			"sourceFileName": "src/is-error.ts",
			"qualifiedName": "isError"
		},
		"938": {
			"sourceFileName": "src/is-error.ts",
			"qualifiedName": "T"
		},
		"939": {
			"sourceFileName": "src/is-error.ts",
			"qualifiedName": "data"
		},
		"940": {
			"sourceFileName": "src/is-function.ts",
			"qualifiedName": "isFunction"
		},
		"941": {
			"sourceFileName": "src/is-function.ts",
			"qualifiedName": "isFunction"
		},
		"942": {
			"sourceFileName": "src/is-function.ts",
			"qualifiedName": "T"
		},
		"943": {
			"sourceFileName": "src/is-function.ts",
			"qualifiedName": "data"
		},
		"944": {
			"sourceFileName": "src/is-included-in.ts",
			"qualifiedName": "isIncludedIn"
		},
		"945": {
			"sourceFileName": "src/is-included-in.ts",
			"qualifiedName": "isIncludedIn"
		},
		"946": {
			"sourceFileName": "src/is-included-in.ts",
			"qualifiedName": "T"
		},
		"947": {
			"sourceFileName": "src/is-included-in.ts",
			"qualifiedName": "S"
		},
		"948": {
			"sourceFileName": "src/is-included-in.ts",
			"qualifiedName": "data"
		},
		"949": {
			"sourceFileName": "src/is-included-in.ts",
			"qualifiedName": "container"
		},
		"955": {
			"sourceFileName": "src/is-included-in.ts",
			"qualifiedName": "isIncludedIn"
		},
		"956": {
			"sourceFileName": "src/is-included-in.ts",
			"qualifiedName": "T"
		},
		"957": {
			"sourceFileName": "src/is-included-in.ts",
			"qualifiedName": "S"
		},
		"958": {
			"sourceFileName": "src/is-included-in.ts",
			"qualifiedName": "container"
		},
		"959": {
			"sourceFileName": "src/is-included-in.ts",
			"qualifiedName": "__type"
		},
		"960": {
			"sourceFileName": "src/is-included-in.ts",
			"qualifiedName": "__type"
		},
		"961": {
			"sourceFileName": "src/is-included-in.ts",
			"qualifiedName": "data"
		},
		"969": {
			"sourceFileName": "src/is-non-null.ts",
			"qualifiedName": "isNonNull"
		},
		"970": {
			"sourceFileName": "src/is-non-null.ts",
			"qualifiedName": "isNonNull"
		},
		"971": {
			"sourceFileName": "src/is-non-null.ts",
			"qualifiedName": "T"
		},
		"972": {
			"sourceFileName": "src/is-non-null.ts",
			"qualifiedName": "data"
		},
		"973": {
			"sourceFileName": "src/is-non-nullish.ts",
			"qualifiedName": "isNonNullish"
		},
		"974": {
			"sourceFileName": "src/is-non-nullish.ts",
			"qualifiedName": "isNonNullish"
		},
		"975": {
			"sourceFileName": "src/is-non-nullish.ts",
			"qualifiedName": "T"
		},
		"976": {
			"sourceFileName": "src/is-non-nullish.ts",
			"qualifiedName": "data"
		},
		"977": {
			"sourceFileName": "src/is-not.ts",
			"qualifiedName": "isNot"
		},
		"978": {
			"sourceFileName": "src/is-not.ts",
			"qualifiedName": "isNot"
		},
		"979": {
			"sourceFileName": "src/is-not.ts",
			"qualifiedName": "T"
		},
		"980": {
			"sourceFileName": "src/is-not.ts",
			"qualifiedName": "S"
		},
		"981": {
			"sourceFileName": "src/is-not.ts",
			"qualifiedName": "predicate"
		},
		"982": {
			"sourceFileName": "src/is-not.ts",
			"qualifiedName": "__type"
		},
		"983": {
			"sourceFileName": "src/is-not.ts",
			"qualifiedName": "__type"
		},
		"984": {
			"sourceFileName": "src/is-not.ts",
			"qualifiedName": "data"
		},
		"985": {
			"sourceFileName": "src/is-not.ts",
			"qualifiedName": "__type"
		},
		"986": {
			"sourceFileName": "src/is-not.ts",
			"qualifiedName": "__type"
		},
		"987": {
			"sourceFileName": "src/is-not.ts",
			"qualifiedName": "data"
		},
		"997": {
			"sourceFileName": "src/is-nullish.ts",
			"qualifiedName": "isNullish"
		},
		"998": {
			"sourceFileName": "src/is-nullish.ts",
			"qualifiedName": "isNullish"
		},
		"999": {
			"sourceFileName": "src/is-nullish.ts",
			"qualifiedName": "T"
		},
		"1000": {
			"sourceFileName": "src/is-nullish.ts",
			"qualifiedName": "data"
		},
		"1001": {
			"sourceFileName": "src/is-number.ts",
			"qualifiedName": "isNumber"
		},
		"1002": {
			"sourceFileName": "src/is-number.ts",
			"qualifiedName": "isNumber"
		},
		"1003": {
			"sourceFileName": "src/is-number.ts",
			"qualifiedName": "T"
		},
		"1004": {
			"sourceFileName": "src/is-number.ts",
			"qualifiedName": "data"
		},
		"1005": {
			"sourceFileName": "src/is-object-type.ts",
			"qualifiedName": "isObjectType"
		},
		"1006": {
			"sourceFileName": "src/is-object-type.ts",
			"qualifiedName": "isObjectType"
		},
		"1007": {
			"sourceFileName": "src/is-object-type.ts",
			"qualifiedName": "T"
		},
		"1008": {
			"sourceFileName": "src/is-object-type.ts",
			"qualifiedName": "data"
		},
		"1009": {
			"sourceFileName": "src/is-plain-object.ts",
			"qualifiedName": "isPlainObject"
		},
		"1010": {
			"sourceFileName": "src/is-plain-object.ts",
			"qualifiedName": "isPlainObject"
		},
		"1011": {
			"sourceFileName": "src/is-plain-object.ts",
			"qualifiedName": "T"
		},
		"1012": {
			"sourceFileName": "src/is-plain-object.ts",
			"qualifiedName": "data"
		},
		"1013": {
			"sourceFileName": "src/is-promise.ts",
			"qualifiedName": "isPromise"
		},
		"1014": {
			"sourceFileName": "src/is-promise.ts",
			"qualifiedName": "isPromise"
		},
		"1015": {
			"sourceFileName": "src/is-promise.ts",
			"qualifiedName": "T"
		},
		"1016": {
			"sourceFileName": "src/is-promise.ts",
			"qualifiedName": "S"
		},
		"1017": {
			"sourceFileName": "src/is-promise.ts",
			"qualifiedName": "data"
		},
		"1018": {
			"sourceFileName": "src/is-shallow-equal.ts",
			"qualifiedName": "isShallowEqual"
		},
		"1019": {
			"sourceFileName": "src/is-shallow-equal.ts",
			"qualifiedName": "isShallowEqual"
		},
		"1020": {
			"sourceFileName": "src/is-shallow-equal.ts",
			"qualifiedName": "T"
		},
		"1021": {
			"sourceFileName": "src/is-shallow-equal.ts",
			"qualifiedName": "S"
		},
		"1022": {
			"sourceFileName": "src/is-shallow-equal.ts",
			"qualifiedName": "data"
		},
		"1023": {
			"sourceFileName": "src/is-shallow-equal.ts",
			"qualifiedName": "other"
		},
		"1029": {
			"sourceFileName": "src/is-shallow-equal.ts",
			"qualifiedName": "isShallowEqual"
		},
		"1030": {
			"sourceFileName": "src/is-shallow-equal.ts",
			"qualifiedName": "T"
		},
		"1031": {
			"sourceFileName": "src/is-shallow-equal.ts",
			"qualifiedName": "S"
		},
		"1032": {
			"sourceFileName": "src/is-shallow-equal.ts",
			"qualifiedName": "other"
		},
		"1033": {
			"sourceFileName": "src/is-shallow-equal.ts",
			"qualifiedName": "__type"
		},
		"1034": {
			"sourceFileName": "src/is-shallow-equal.ts",
			"qualifiedName": "__type"
		},
		"1035": {
			"sourceFileName": "src/is-shallow-equal.ts",
			"qualifiedName": "data"
		},
		"1043": {
			"sourceFileName": "src/is-strict-equal.ts",
			"qualifiedName": "isStrictEqual"
		},
		"1044": {
			"sourceFileName": "src/is-strict-equal.ts",
			"qualifiedName": "isStrictEqual"
		},
		"1045": {
			"sourceFileName": "src/is-strict-equal.ts",
			"qualifiedName": "T"
		},
		"1046": {
			"sourceFileName": "src/is-strict-equal.ts",
			"qualifiedName": "S"
		},
		"1047": {
			"sourceFileName": "src/is-strict-equal.ts",
			"qualifiedName": "data"
		},
		"1048": {
			"sourceFileName": "src/is-strict-equal.ts",
			"qualifiedName": "other"
		},
		"1054": {
			"sourceFileName": "src/is-strict-equal.ts",
			"qualifiedName": "isStrictEqual"
		},
		"1055": {
			"sourceFileName": "src/is-strict-equal.ts",
			"qualifiedName": "T"
		},
		"1056": {
			"sourceFileName": "src/is-strict-equal.ts",
			"qualifiedName": "S"
		},
		"1057": {
			"sourceFileName": "src/is-strict-equal.ts",
			"qualifiedName": "other"
		},
		"1058": {
			"sourceFileName": "src/is-strict-equal.ts",
			"qualifiedName": "__type"
		},
		"1059": {
			"sourceFileName": "src/is-strict-equal.ts",
			"qualifiedName": "__type"
		},
		"1060": {
			"sourceFileName": "src/is-strict-equal.ts",
			"qualifiedName": "data"
		},
		"1068": {
			"sourceFileName": "src/is-string.ts",
			"qualifiedName": "isString"
		},
		"1069": {
			"sourceFileName": "src/is-string.ts",
			"qualifiedName": "isString"
		},
		"1070": {
			"sourceFileName": "src/is-string.ts",
			"qualifiedName": "T"
		},
		"1071": {
			"sourceFileName": "src/is-string.ts",
			"qualifiedName": "data"
		},
		"1072": {
			"sourceFileName": "src/is-symbol.ts",
			"qualifiedName": "isSymbol"
		},
		"1073": {
			"sourceFileName": "src/is-symbol.ts",
			"qualifiedName": "isSymbol"
		},
		"1074": {
			"sourceFileName": "src/is-symbol.ts",
			"qualifiedName": "T"
		},
		"1075": {
			"sourceFileName": "src/is-symbol.ts",
			"qualifiedName": "data"
		},
		"1076": {
			"sourceFileName": "src/is-truthy.ts",
			"qualifiedName": "isTruthy"
		},
		"1077": {
			"sourceFileName": "src/is-truthy.ts",
			"qualifiedName": "isTruthy"
		},
		"1078": {
			"sourceFileName": "src/is-truthy.ts",
			"qualifiedName": "T"
		},
		"1079": {
			"sourceFileName": "src/is-truthy.ts",
			"qualifiedName": "data"
		},
		"1080": {
			"sourceFileName": "src/join.ts",
			"qualifiedName": "join"
		},
		"1081": {
			"sourceFileName": "src/join.ts",
			"qualifiedName": "join"
		},
		"1082": {
			"sourceFileName": "src/join.ts",
			"qualifiedName": "T"
		},
		"1083": {
			"sourceFileName": "src/join.ts",
			"qualifiedName": "Glue"
		},
		"1084": {
			"sourceFileName": "src/join.ts",
			"qualifiedName": "data"
		},
		"1085": {
			"sourceFileName": "src/join.ts",
			"qualifiedName": "glue"
		},
		"1086": {
			"sourceFileName": "src/join.ts",
			"qualifiedName": "join"
		},
		"1087": {
			"sourceFileName": "src/join.ts",
			"qualifiedName": "T"
		},
		"1088": {
			"sourceFileName": "src/join.ts",
			"qualifiedName": "Glue"
		},
		"1089": {
			"sourceFileName": "src/join.ts",
			"qualifiedName": "glue"
		},
		"1090": {
			"sourceFileName": "src/join.ts",
			"qualifiedName": "__type"
		},
		"1091": {
			"sourceFileName": "src/join.ts",
			"qualifiedName": "__type"
		},
		"1092": {
			"sourceFileName": "src/join.ts",
			"qualifiedName": "data"
		},
		"1093": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "KEY_CODES"
		},
		"1094": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object"
		},
		"1095": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.ALT"
		},
		"1096": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.ARROW_DOWN"
		},
		"1097": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.ARROW_LEFT"
		},
		"1098": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.ARROW_RIGHT"
		},
		"1099": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.ARROW_UP"
		},
		"1100": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.AT"
		},
		"1101": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.BACKSPACE"
		},
		"1102": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.CTRL"
		},
		"1103": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.DELETE"
		},
		"1104": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.END"
		},
		"1105": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.ENTER"
		},
		"1106": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.ESC"
		},
		"1107": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.HOME"
		},
		"1108": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.KEY_F"
		},
		"1109": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.META"
		},
		"1110": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.PAGE_DOWN"
		},
		"1111": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.PAGE_UP"
		},
		"1112": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.SHIFT"
		},
		"1113": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.SPACE"
		},
		"1114": {
			"sourceFileName": "src/key-codes.ts",
			"qualifiedName": "__object.TAB"
		},
		"1115": {
			"sourceFileName": "src/keys.ts",
			"qualifiedName": "keys"
		},
		"1116": {
			"sourceFileName": "src/keys.ts",
			"qualifiedName": "keys"
		},
		"1117": {
			"sourceFileName": "src/keys.ts",
			"qualifiedName": "T"
		},
		"1118": {
			"sourceFileName": "src/keys.ts",
			"qualifiedName": "data"
		},
		"1119": {
			"sourceFileName": "src/keys.ts",
			"qualifiedName": "keys"
		},
		"1120": {
			"sourceFileName": "src/keys.ts",
			"qualifiedName": "__type"
		},
		"1121": {
			"sourceFileName": "src/keys.ts",
			"qualifiedName": "__type"
		},
		"1122": {
			"sourceFileName": "src/keys.ts",
			"qualifiedName": "data"
		},
		"1123": {
			"sourceFileName": "src/keys.ts",
			"qualifiedName": "T"
		},
		"1124": {
			"sourceFileName": "src/last.ts",
			"qualifiedName": "last"
		},
		"1125": {
			"sourceFileName": "src/last.ts",
			"qualifiedName": "last"
		},
		"1126": {
			"sourceFileName": "src/last.ts",
			"qualifiedName": "T"
		},
		"1127": {
			"sourceFileName": "src/last.ts",
			"qualifiedName": "data"
		},
		"1128": {
			"sourceFileName": "src/last.ts",
			"qualifiedName": "last"
		},
		"1129": {
			"sourceFileName": "src/last.ts",
			"qualifiedName": "__type"
		},
		"1130": {
			"sourceFileName": "src/last.ts",
			"qualifiedName": "__type"
		},
		"1131": {
			"sourceFileName": "src/last.ts",
			"qualifiedName": "data"
		},
		"1132": {
			"sourceFileName": "src/last.ts",
			"qualifiedName": "T"
		},
		"1133": {
			"sourceFileName": "src/length.ts",
			"qualifiedName": "length"
		},
		"1134": {
			"sourceFileName": "src/length.ts",
			"qualifiedName": "length"
		},
		"1135": {
			"sourceFileName": "src/length.ts",
			"qualifiedName": "T"
		},
		"1136": {
			"sourceFileName": "src/length.ts",
			"qualifiedName": "items"
		},
		"1137": {
			"sourceFileName": "src/length.ts",
			"qualifiedName": "length"
		},
		"1138": {
			"sourceFileName": "src/length.ts",
			"qualifiedName": "T"
		},
		"1139": {
			"sourceFileName": "src/length.ts",
			"qualifiedName": "__type"
		},
		"1140": {
			"sourceFileName": "src/length.ts",
			"qualifiedName": "__type"
		},
		"1141": {
			"sourceFileName": "src/length.ts",
			"qualifiedName": "items"
		},
		"1142": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "map"
		},
		"1143": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "map"
		},
		"1144": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "T"
		},
		"1145": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "U"
		},
		"1146": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "data"
		},
		"1147": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "callbackfn"
		},
		"1148": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "__type"
		},
		"1149": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "__type"
		},
		"1150": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "value"
		},
		"1151": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "index"
		},
		"1152": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "data"
		},
		"1153": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "map"
		},
		"1154": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "T"
		},
		"1155": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "U"
		},
		"1156": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "callbackfn"
		},
		"1157": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "__type"
		},
		"1158": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "__type"
		},
		"1159": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "value"
		},
		"1160": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "index"
		},
		"1161": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "data"
		},
		"1162": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "__type"
		},
		"1163": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "__type"
		},
		"1164": {
			"sourceFileName": "src/map.ts",
			"qualifiedName": "data"
		},
		"1165": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "mapKeys"
		},
		"1166": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "mapKeys"
		},
		"1167": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "T"
		},
		"1168": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"1169": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "S"
		},
		"1170": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "data"
		},
		"1171": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "keyMapper"
		},
		"1172": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "__type"
		},
		"1173": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "__type"
		},
		"1174": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "key"
		},
		"1175": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "value"
		},
		"1176": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "data"
		},
		"1177": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "mapKeys"
		},
		"1178": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "T"
		},
		"1179": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"1180": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "S"
		},
		"1181": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "keyMapper"
		},
		"1182": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "__type"
		},
		"1183": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "__type"
		},
		"1184": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "key"
		},
		"1185": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "value"
		},
		"1186": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "data"
		},
		"1187": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "__type"
		},
		"1188": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "__type"
		},
		"1189": {
			"sourceFileName": "src/map-keys.ts",
			"qualifiedName": "data"
		},
		"1190": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "mapToObj"
		},
		"1191": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "mapToObj"
		},
		"1192": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "T"
		},
		"1193": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "K"
		},
		"1194": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "V"
		},
		"1195": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "array"
		},
		"1196": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "fn"
		},
		"1197": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "__type"
		},
		"1198": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "__type"
		},
		"1199": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "value"
		},
		"1200": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "index"
		},
		"1201": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "data"
		},
		"1202": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "mapToObj"
		},
		"1203": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "T"
		},
		"1204": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "K"
		},
		"1205": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "V"
		},
		"1206": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "fn"
		},
		"1207": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "__type"
		},
		"1208": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "__type"
		},
		"1209": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "value"
		},
		"1210": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "index"
		},
		"1211": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "data"
		},
		"1212": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "__type"
		},
		"1213": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "__type"
		},
		"1214": {
			"sourceFileName": "src/map-to-obj.ts",
			"qualifiedName": "array"
		},
		"1215": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "mapValues"
		},
		"1216": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "mapValues"
		},
		"1217": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "T"
		},
		"1218": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "Value"
		},
		"1219": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "data"
		},
		"1220": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "valueMapper"
		},
		"1221": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "__type"
		},
		"1222": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "__type"
		},
		"1223": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "value"
		},
		"1224": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "key"
		},
		"1225": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "data"
		},
		"1226": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "mapValues"
		},
		"1227": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "T"
		},
		"1228": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "Value"
		},
		"1229": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "valueMapper"
		},
		"1230": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "__type"
		},
		"1231": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "__type"
		},
		"1232": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "value"
		},
		"1233": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "key"
		},
		"1234": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "data"
		},
		"1235": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "__type"
		},
		"1236": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "__type"
		},
		"1237": {
			"sourceFileName": "src/map-values.ts",
			"qualifiedName": "data"
		},
		"1238": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "mapWithFeedback"
		},
		"1239": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "mapWithFeedback"
		},
		"1240": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "T"
		},
		"1241": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "U"
		},
		"1242": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "data"
		},
		"1243": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "callbackfn"
		},
		"1244": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "__type"
		},
		"1245": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "__type"
		},
		"1246": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "previousValue"
		},
		"1247": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "currentValue"
		},
		"1248": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "currentIndex"
		},
		"1249": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "data"
		},
		"1250": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "initialValue"
		},
		"1251": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "mapWithFeedback"
		},
		"1252": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "T"
		},
		"1253": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "U"
		},
		"1254": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "callbackfn"
		},
		"1255": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "__type"
		},
		"1256": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "__type"
		},
		"1257": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "previousValue"
		},
		"1258": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "currentValue"
		},
		"1259": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "currentIndex"
		},
		"1260": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "data"
		},
		"1261": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "initialValue"
		},
		"1262": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "__type"
		},
		"1263": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "__type"
		},
		"1264": {
			"sourceFileName": "src/map-with-feedback.ts",
			"qualifiedName": "data"
		},
		"1265": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "meanBy"
		},
		"1266": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "meanBy"
		},
		"1267": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "T"
		},
		"1268": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "fn"
		},
		"1269": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "__type"
		},
		"1270": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "__type"
		},
		"1271": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "value"
		},
		"1272": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "index"
		},
		"1273": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "data"
		},
		"1274": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "__type"
		},
		"1275": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "__type"
		},
		"1276": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "items"
		},
		"1277": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "meanBy"
		},
		"1278": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "T"
		},
		"1279": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "items"
		},
		"1280": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "fn"
		},
		"1281": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "__type"
		},
		"1282": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "__type"
		},
		"1283": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "value"
		},
		"1284": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "index"
		},
		"1285": {
			"sourceFileName": "src/mean-by.ts",
			"qualifiedName": "data"
		},
		"1286": {
			"sourceFileName": "src/merge.ts",
			"qualifiedName": "merge"
		},
		"1287": {
			"sourceFileName": "src/merge.ts",
			"qualifiedName": "merge"
		},
		"1288": {
			"sourceFileName": "src/merge.ts",
			"qualifiedName": "T"
		},
		"1289": {
			"sourceFileName": "src/merge.ts",
			"qualifiedName": "Source"
		},
		"1290": {
			"sourceFileName": "src/merge.ts",
			"qualifiedName": "data"
		},
		"1291": {
			"sourceFileName": "src/merge.ts",
			"qualifiedName": "source"
		},
		"1292": {
			"sourceFileName": "src/merge.ts",
			"qualifiedName": "merge"
		},
		"1293": {
			"sourceFileName": "src/merge.ts",
			"qualifiedName": "Source"
		},
		"1294": {
			"sourceFileName": "src/merge.ts",
			"qualifiedName": "source"
		},
		"1295": {
			"sourceFileName": "src/merge.ts",
			"qualifiedName": "__type"
		},
		"1296": {
			"sourceFileName": "src/merge.ts",
			"qualifiedName": "__type"
		},
		"1297": {
			"sourceFileName": "src/merge.ts",
			"qualifiedName": "data"
		},
		"1298": {
			"sourceFileName": "src/merge.ts",
			"qualifiedName": "T"
		},
		"1299": {
			"sourceFileName": "src/merge-all.ts",
			"qualifiedName": "mergeAll"
		},
		"1300": {
			"sourceFileName": "src/merge-all.ts",
			"qualifiedName": "mergeAll"
		},
		"1301": {
			"sourceFileName": "src/merge-all.ts",
			"qualifiedName": "A"
		},
		"1302": {
			"sourceFileName": "src/merge-all.ts",
			"qualifiedName": "array"
		},
		"1327": {
			"sourceFileName": "src/merge-deep.ts",
			"qualifiedName": "mergeDeep"
		},
		"1328": {
			"sourceFileName": "src/merge-deep.ts",
			"qualifiedName": "mergeDeep"
		},
		"1329": {
			"sourceFileName": "src/merge-deep.ts",
			"qualifiedName": "Destination"
		},
		"1330": {
			"sourceFileName": "src/merge-deep.ts",
			"qualifiedName": "Source"
		},
		"1331": {
			"sourceFileName": "src/merge-deep.ts",
			"qualifiedName": "destination"
		},
		"1332": {
			"sourceFileName": "src/merge-deep.ts",
			"qualifiedName": "source"
		},
		"1333": {
			"sourceFileName": "src/merge-deep.ts",
			"qualifiedName": "mergeDeep"
		},
		"1334": {
			"sourceFileName": "src/merge-deep.ts",
			"qualifiedName": "Destination"
		},
		"1335": {
			"sourceFileName": "src/merge-deep.ts",
			"qualifiedName": "Source"
		},
		"1336": {
			"sourceFileName": "src/merge-deep.ts",
			"qualifiedName": "source"
		},
		"1337": {
			"sourceFileName": "src/merge-deep.ts",
			"qualifiedName": "__type"
		},
		"1338": {
			"sourceFileName": "src/merge-deep.ts",
			"qualifiedName": "__type"
		},
		"1339": {
			"sourceFileName": "src/merge-deep.ts",
			"qualifiedName": "target"
		},
		"1340": {
			"sourceFileName": "src/multiply.ts",
			"qualifiedName": "multiply"
		},
		"1341": {
			"sourceFileName": "src/multiply.ts",
			"qualifiedName": "multiply"
		},
		"1342": {
			"sourceFileName": "src/multiply.ts",
			"qualifiedName": "value"
		},
		"1343": {
			"sourceFileName": "src/multiply.ts",
			"qualifiedName": "multiplicand"
		},
		"1347": {
			"sourceFileName": "src/multiply.ts",
			"qualifiedName": "multiply"
		},
		"1348": {
			"sourceFileName": "src/multiply.ts",
			"qualifiedName": "multiplicand"
		},
		"1349": {
			"sourceFileName": "src/multiply.ts",
			"qualifiedName": "__type"
		},
		"1350": {
			"sourceFileName": "src/multiply.ts",
			"qualifiedName": "__type"
		},
		"1351": {
			"sourceFileName": "src/multiply.ts",
			"qualifiedName": "value"
		},
		"1357": {
			"sourceFileName": "src/nth-by.ts",
			"qualifiedName": "nthBy"
		},
		"1358": {
			"sourceFileName": "src/nth-by.ts",
			"qualifiedName": "nthBy"
		},
		"1359": {
			"sourceFileName": "src/nth-by.ts",
			"qualifiedName": "T"
		},
		"1360": {
			"sourceFileName": "src/nth-by.ts",
			"qualifiedName": "data"
		},
		"1361": {
			"sourceFileName": "src/nth-by.ts",
			"qualifiedName": "index"
		},
		"1362": {
			"sourceFileName": "src/nth-by.ts",
			"qualifiedName": "rules"
		},
		"1363": {
			"sourceFileName": "src/nth-by.ts",
			"qualifiedName": "nthBy"
		},
		"1364": {
			"sourceFileName": "src/nth-by.ts",
			"qualifiedName": "T"
		},
		"1365": {
			"sourceFileName": "src/nth-by.ts",
			"qualifiedName": "index"
		},
		"1366": {
			"sourceFileName": "src/nth-by.ts",
			"qualifiedName": "rules"
		},
		"1367": {
			"sourceFileName": "src/nth-by.ts",
			"qualifiedName": "__type"
		},
		"1368": {
			"sourceFileName": "src/nth-by.ts",
			"qualifiedName": "__type"
		},
		"1369": {
			"sourceFileName": "src/nth-by.ts",
			"qualifiedName": "data"
		},
		"1370": {
			"sourceFileName": "src/obj-of.ts",
			"qualifiedName": "objOf"
		},
		"1371": {
			"sourceFileName": "src/obj-of.ts",
			"qualifiedName": "objOf"
		},
		"1372": {
			"sourceFileName": "src/obj-of.ts",
			"qualifiedName": "T"
		},
		"1373": {
			"sourceFileName": "src/obj-of.ts",
			"qualifiedName": "K"
		},
		"1374": {
			"sourceFileName": "src/obj-of.ts",
			"qualifiedName": "value"
		},
		"1375": {
			"sourceFileName": "src/obj-of.ts",
			"qualifiedName": "key"
		},
		"1376": {
			"sourceFileName": "src/obj-of.ts",
			"qualifiedName": "objOf"
		},
		"1377": {
			"sourceFileName": "src/obj-of.ts",
			"qualifiedName": "T"
		},
		"1378": {
			"sourceFileName": "src/obj-of.ts",
			"qualifiedName": "K"
		},
		"1379": {
			"sourceFileName": "src/obj-of.ts",
			"qualifiedName": "key"
		},
		"1380": {
			"sourceFileName": "src/obj-of.ts",
			"qualifiedName": "__type"
		},
		"1381": {
			"sourceFileName": "src/obj-of.ts",
			"qualifiedName": "__type"
		},
		"1382": {
			"sourceFileName": "src/obj-of.ts",
			"qualifiedName": "value"
		},
		"1383": {
			"sourceFileName": "src/omit.ts",
			"qualifiedName": "omit"
		},
		"1384": {
			"sourceFileName": "src/omit.ts",
			"qualifiedName": "omit"
		},
		"1385": {
			"sourceFileName": "src/omit.ts",
			"qualifiedName": "T"
		},
		"1386": {
			"sourceFileName": "src/omit.ts",
			"qualifiedName": "K"
		},
		"1387": {
			"sourceFileName": "src/omit.ts",
			"qualifiedName": "propNames"
		},
		"1388": {
			"sourceFileName": "src/omit.ts",
			"qualifiedName": "__type"
		},
		"1389": {
			"sourceFileName": "src/omit.ts",
			"qualifiedName": "__type"
		},
		"1390": {
			"sourceFileName": "src/omit.ts",
			"qualifiedName": "data"
		},
		"1391": {
			"sourceFileName": "src/omit.ts",
			"qualifiedName": "omit"
		},
		"1392": {
			"sourceFileName": "src/omit.ts",
			"qualifiedName": "T"
		},
		"1393": {
			"sourceFileName": "src/omit.ts",
			"qualifiedName": "K"
		},
		"1394": {
			"sourceFileName": "src/omit.ts",
			"qualifiedName": "data"
		},
		"1395": {
			"sourceFileName": "src/omit.ts",
			"qualifiedName": "propNames"
		},
		"1396": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "omitBy"
		},
		"1397": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "omitBy"
		},
		"1398": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "T"
		},
		"1399": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "S"
		},
		"1400": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "data"
		},
		"1401": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "predicate"
		},
		"1402": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "__type"
		},
		"1403": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "__type"
		},
		"1404": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "value"
		},
		"1405": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "key"
		},
		"1406": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "data"
		},
		"1416": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "omitBy"
		},
		"1417": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "T"
		},
		"1418": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "S"
		},
		"1419": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "predicate"
		},
		"1420": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "__type"
		},
		"1421": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "__type"
		},
		"1422": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "value"
		},
		"1423": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "key"
		},
		"1424": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "data"
		},
		"1425": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "__type"
		},
		"1426": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "__type"
		},
		"1427": {
			"sourceFileName": "src/omit-by.ts",
			"qualifiedName": "data"
		},
		"1439": {
			"sourceFileName": "src/once.ts",
			"qualifiedName": "once"
		},
		"1440": {
			"sourceFileName": "src/once.ts",
			"qualifiedName": "once"
		},
		"1441": {
			"sourceFileName": "src/once.ts",
			"qualifiedName": "T"
		},
		"1442": {
			"sourceFileName": "src/once.ts",
			"qualifiedName": "fn"
		},
		"1443": {
			"sourceFileName": "src/once.ts",
			"qualifiedName": "__type"
		},
		"1444": {
			"sourceFileName": "src/once.ts",
			"qualifiedName": "__type"
		},
		"1445": {
			"sourceFileName": "src/once.ts",
			"qualifiedName": "__type"
		},
		"1446": {
			"sourceFileName": "src/once.ts",
			"qualifiedName": "__type"
		},
		"1447": {
			"sourceFileName": "src/only.ts",
			"qualifiedName": "only"
		},
		"1448": {
			"sourceFileName": "src/only.ts",
			"qualifiedName": "only"
		},
		"1449": {
			"sourceFileName": "src/only.ts",
			"qualifiedName": "T"
		},
		"1450": {
			"sourceFileName": "src/only.ts",
			"qualifiedName": "array"
		},
		"1451": {
			"sourceFileName": "src/only.ts",
			"qualifiedName": "only"
		},
		"1452": {
			"sourceFileName": "src/only.ts",
			"qualifiedName": "T"
		},
		"1453": {
			"sourceFileName": "src/only.ts",
			"qualifiedName": "__type"
		},
		"1454": {
			"sourceFileName": "src/only.ts",
			"qualifiedName": "__type"
		},
		"1455": {
			"sourceFileName": "src/only.ts",
			"qualifiedName": "array"
		},
		"1456": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "partition"
		},
		"1457": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "partition"
		},
		"1458": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "T"
		},
		"1459": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "S"
		},
		"1460": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "data"
		},
		"1461": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "predicate"
		},
		"1462": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "__type"
		},
		"1463": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "__type"
		},
		"1464": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "value"
		},
		"1465": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "index"
		},
		"1466": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "data"
		},
		"1476": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "partition"
		},
		"1477": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "T"
		},
		"1478": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "S"
		},
		"1479": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "predicate"
		},
		"1480": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "__type"
		},
		"1481": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "__type"
		},
		"1482": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "value"
		},
		"1483": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "index"
		},
		"1484": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "data"
		},
		"1485": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "__type"
		},
		"1486": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "__type"
		},
		"1487": {
			"sourceFileName": "src/partition.ts",
			"qualifiedName": "data"
		},
		"1499": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "pathOr"
		},
		"1500": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "pathOr"
		},
		"1501": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "T"
		},
		"1502": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "A"
		},
		"1503": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "object"
		},
		"1504": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "path"
		},
		"1505": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "defaultValue"
		},
		"1521": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "pathOr"
		},
		"1522": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "T"
		},
		"1523": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "A"
		},
		"1524": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "path"
		},
		"1525": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "defaultValue"
		},
		"1526": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "__type"
		},
		"1527": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "__type"
		},
		"1528": {
			"sourceFileName": "src/path-or.ts",
			"qualifiedName": "object"
		},
		"1548": {
			"sourceFileName": "src/pick.ts",
			"qualifiedName": "pick"
		},
		"1549": {
			"sourceFileName": "src/pick.ts",
			"qualifiedName": "pick"
		},
		"1550": {
			"sourceFileName": "src/pick.ts",
			"qualifiedName": "T"
		},
		"1551": {
			"sourceFileName": "src/pick.ts",
			"qualifiedName": "K"
		},
		"1552": {
			"sourceFileName": "src/pick.ts",
			"qualifiedName": "names"
		},
		"1553": {
			"sourceFileName": "src/pick.ts",
			"qualifiedName": "__type"
		},
		"1554": {
			"sourceFileName": "src/pick.ts",
			"qualifiedName": "__type"
		},
		"1555": {
			"sourceFileName": "src/pick.ts",
			"qualifiedName": "object"
		},
		"1556": {
			"sourceFileName": "src/pick.ts",
			"qualifiedName": "pick"
		},
		"1557": {
			"sourceFileName": "src/pick.ts",
			"qualifiedName": "T"
		},
		"1558": {
			"sourceFileName": "src/pick.ts",
			"qualifiedName": "K"
		},
		"1559": {
			"sourceFileName": "src/pick.ts",
			"qualifiedName": "object"
		},
		"1560": {
			"sourceFileName": "src/pick.ts",
			"qualifiedName": "names"
		},
		"1561": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "pickBy"
		},
		"1562": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "pickBy"
		},
		"1563": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "T"
		},
		"1564": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "S"
		},
		"1565": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "data"
		},
		"1566": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "predicate"
		},
		"1567": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "__type"
		},
		"1568": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "__type"
		},
		"1569": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "value"
		},
		"1570": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "key"
		},
		"1571": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "data"
		},
		"1581": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "pickBy"
		},
		"1582": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "T"
		},
		"1583": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "S"
		},
		"1584": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "predicate"
		},
		"1585": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "__type"
		},
		"1586": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "__type"
		},
		"1587": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "value"
		},
		"1588": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "key"
		},
		"1589": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "data"
		},
		"1590": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "__type"
		},
		"1591": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "__type"
		},
		"1592": {
			"sourceFileName": "src/pick-by.ts",
			"qualifiedName": "data"
		},
		"1604": {
			"sourceFileName": "src/pipe.ts",
			"qualifiedName": "pipe"
		},
		"1605": {
			"sourceFileName": "src/pipe.ts",
			"qualifiedName": "pipe"
		},
		"1606": {
			"sourceFileName": "src/pipe.ts",
			"qualifiedName": "A"
		},
		"1607": {
			"sourceFileName": "src/pipe.ts",
			"qualifiedName": "B"
		},
		"1608": {
			"sourceFileName": "src/pipe.ts",
			"qualifiedName": "value"
		},
		"1609": {
			"sourceFileName": "src/pipe.ts",
			"qualifiedName": "op1"
		},
		"1610": {
			"sourceFileName": "src/pipe.ts",
			"qualifiedName": "__type"
		},
		"1611": {
			"sourceFileName": "src/pipe.ts",
			"qualifiedName": "__type"
		},
		"1612": {
			"sourceFileName": "src/pipe.ts",
			"qualifiedName": "input"
		},
		"2266": {
			"sourceFileName": "src/piped.ts",
			"qualifiedName": "piped"
		},
		"2267": {
			"sourceFileName": "src/piped.ts",
			"qualifiedName": "piped"
		},
		"2268": {
			"sourceFileName": "src/piped.ts",
			"qualifiedName": "A"
		},
		"2269": {
			"sourceFileName": "src/piped.ts",
			"qualifiedName": "B"
		},
		"2270": {
			"sourceFileName": "src/piped.ts",
			"qualifiedName": "op1"
		},
		"2271": {
			"sourceFileName": "src/piped.ts",
			"qualifiedName": "__type"
		},
		"2272": {
			"sourceFileName": "src/piped.ts",
			"qualifiedName": "__type"
		},
		"2273": {
			"sourceFileName": "src/piped.ts",
			"qualifiedName": "input"
		},
		"2274": {
			"sourceFileName": "src/piped.ts",
			"qualifiedName": "__type"
		},
		"2275": {
			"sourceFileName": "src/piped.ts",
			"qualifiedName": "__type"
		},
		"2276": {
			"sourceFileName": "src/piped.ts",
			"qualifiedName": "value"
		},
		"2442": {
			"sourceFileName": "src/product.ts",
			"qualifiedName": "product"
		},
		"2443": {
			"sourceFileName": "src/product.ts",
			"qualifiedName": "product"
		},
		"2444": {
			"sourceFileName": "src/product.ts",
			"qualifiedName": "T"
		},
		"2445": {
			"sourceFileName": "src/product.ts",
			"qualifiedName": "data"
		},
		"2446": {
			"sourceFileName": "src/product.ts",
			"qualifiedName": "product"
		},
		"2447": {
			"sourceFileName": "src/product.ts",
			"qualifiedName": "__type"
		},
		"2448": {
			"sourceFileName": "src/product.ts",
			"qualifiedName": "__type"
		},
		"2449": {
			"sourceFileName": "src/product.ts",
			"qualifiedName": "data"
		},
		"2450": {
			"sourceFileName": "src/product.ts",
			"qualifiedName": "T"
		},
		"2451": {
			"sourceFileName": "src/prop.ts",
			"qualifiedName": "prop"
		},
		"2452": {
			"sourceFileName": "src/prop.ts",
			"qualifiedName": "prop"
		},
		"2453": {
			"sourceFileName": "src/prop.ts",
			"qualifiedName": "T"
		},
		"2454": {
			"sourceFileName": "src/prop.ts",
			"qualifiedName": "K"
		},
		"2455": {
			"sourceFileName": "src/prop.ts",
			"qualifiedName": "data"
		},
		"2456": {
			"sourceFileName": "src/prop.ts",
			"qualifiedName": "key"
		},
		"2457": {
			"sourceFileName": "src/prop.ts",
			"qualifiedName": "prop"
		},
		"2458": {
			"sourceFileName": "src/prop.ts",
			"qualifiedName": "T"
		},
		"2459": {
			"sourceFileName": "src/prop.ts",
			"qualifiedName": "K"
		},
		"2460": {
			"sourceFileName": "src/prop.ts",
			"qualifiedName": "key"
		},
		"2461": {
			"sourceFileName": "src/prop.ts",
			"qualifiedName": "__type"
		},
		"2462": {
			"sourceFileName": "src/prop.ts",
			"qualifiedName": "__type"
		},
		"2463": {
			"sourceFileName": "src/prop.ts",
			"qualifiedName": "data"
		},
		"2470": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "pullObject"
		},
		"2471": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "pullObject"
		},
		"2472": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "T"
		},
		"2473": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "K"
		},
		"2474": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "V"
		},
		"2475": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "data"
		},
		"2476": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "keyExtractor"
		},
		"2477": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "__type"
		},
		"2478": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "__type"
		},
		"2479": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "item"
		},
		"2480": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "index"
		},
		"2481": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "data"
		},
		"2482": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "valueExtractor"
		},
		"2483": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "__type"
		},
		"2484": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "__type"
		},
		"2485": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "item"
		},
		"2486": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "index"
		},
		"2487": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "data"
		},
		"2488": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "pullObject"
		},
		"2489": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "T"
		},
		"2490": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "K"
		},
		"2491": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "V"
		},
		"2492": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "keyExtractor"
		},
		"2493": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "__type"
		},
		"2494": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "__type"
		},
		"2495": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "item"
		},
		"2496": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "index"
		},
		"2497": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "data"
		},
		"2498": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "valueExtractor"
		},
		"2499": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "__type"
		},
		"2500": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "__type"
		},
		"2501": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "item"
		},
		"2502": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "index"
		},
		"2503": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "data"
		},
		"2504": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "__type"
		},
		"2505": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "__type"
		},
		"2506": {
			"sourceFileName": "src/pull-object.ts",
			"qualifiedName": "data"
		},
		"2507": {
			"sourceFileName": "src/random-integer.ts",
			"qualifiedName": "randomInteger"
		},
		"2508": {
			"sourceFileName": "src/random-integer.ts",
			"qualifiedName": "randomInteger"
		},
		"2509": {
			"sourceFileName": "src/random-integer.ts",
			"qualifiedName": "From"
		},
		"2510": {
			"sourceFileName": "src/random-integer.ts",
			"qualifiedName": "To"
		},
		"2511": {
			"sourceFileName": "src/random-integer.ts",
			"qualifiedName": "from"
		},
		"2512": {
			"sourceFileName": "src/random-integer.ts",
			"qualifiedName": "to"
		},
		"2513": {
			"sourceFileName": "src/random-string.ts",
			"qualifiedName": "randomString"
		},
		"2514": {
			"sourceFileName": "src/random-string.ts",
			"qualifiedName": "randomString"
		},
		"2515": {
			"sourceFileName": "src/random-string.ts",
			"qualifiedName": "length"
		},
		"2516": {
			"sourceFileName": "src/random-string.ts",
			"qualifiedName": "randomString"
		},
		"2517": {
			"sourceFileName": "src/random-string.ts",
			"qualifiedName": "__type"
		},
		"2518": {
			"sourceFileName": "src/random-string.ts",
			"qualifiedName": "__type"
		},
		"2519": {
			"sourceFileName": "src/random-string.ts",
			"qualifiedName": "length"
		},
		"2520": {
			"sourceFileName": "src/range.ts",
			"qualifiedName": "range"
		},
		"2521": {
			"sourceFileName": "src/range.ts",
			"qualifiedName": "range"
		},
		"2522": {
			"sourceFileName": "src/range.ts",
			"qualifiedName": "start"
		},
		"2523": {
			"sourceFileName": "src/range.ts",
			"qualifiedName": "end"
		},
		"2524": {
			"sourceFileName": "src/range.ts",
			"qualifiedName": "range"
		},
		"2525": {
			"sourceFileName": "src/range.ts",
			"qualifiedName": "end"
		},
		"2526": {
			"sourceFileName": "src/range.ts",
			"qualifiedName": "__type"
		},
		"2527": {
			"sourceFileName": "src/range.ts",
			"qualifiedName": "__type"
		},
		"2528": {
			"sourceFileName": "src/range.ts",
			"qualifiedName": "start"
		},
		"2529": {
			"sourceFileName": "src/rank-by.ts",
			"qualifiedName": "rankBy"
		},
		"2530": {
			"sourceFileName": "src/rank-by.ts",
			"qualifiedName": "rankBy"
		},
		"2531": {
			"sourceFileName": "src/rank-by.ts",
			"qualifiedName": "T"
		},
		"2532": {
			"sourceFileName": "src/rank-by.ts",
			"qualifiedName": "data"
		},
		"2533": {
			"sourceFileName": "src/rank-by.ts",
			"qualifiedName": "item"
		},
		"2534": {
			"sourceFileName": "src/rank-by.ts",
			"qualifiedName": "rules"
		},
		"2535": {
			"sourceFileName": "src/rank-by.ts",
			"qualifiedName": "rankBy"
		},
		"2536": {
			"sourceFileName": "src/rank-by.ts",
			"qualifiedName": "T"
		},
		"2537": {
			"sourceFileName": "src/rank-by.ts",
			"qualifiedName": "item"
		},
		"2538": {
			"sourceFileName": "src/rank-by.ts",
			"qualifiedName": "rules"
		},
		"2539": {
			"sourceFileName": "src/rank-by.ts",
			"qualifiedName": "__type"
		},
		"2540": {
			"sourceFileName": "src/rank-by.ts",
			"qualifiedName": "__type"
		},
		"2541": {
			"sourceFileName": "src/rank-by.ts",
			"qualifiedName": "data"
		},
		"2542": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "reduce"
		},
		"2543": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "reduce"
		},
		"2544": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "T"
		},
		"2545": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "U"
		},
		"2546": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "data"
		},
		"2547": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "callbackfn"
		},
		"2548": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "__type"
		},
		"2549": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "__type"
		},
		"2550": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "previousValue"
		},
		"2551": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "currentValue"
		},
		"2552": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "currentIndex"
		},
		"2553": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "data"
		},
		"2554": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "initialValue"
		},
		"2555": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "reduce"
		},
		"2556": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "T"
		},
		"2557": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "U"
		},
		"2558": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "callbackfn"
		},
		"2559": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "__type"
		},
		"2560": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "__type"
		},
		"2561": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "previousValue"
		},
		"2562": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "currentValue"
		},
		"2563": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "currentIndex"
		},
		"2564": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "data"
		},
		"2565": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "initialValue"
		},
		"2566": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "__type"
		},
		"2567": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "__type"
		},
		"2568": {
			"sourceFileName": "src/reduce.ts",
			"qualifiedName": "data"
		},
		"2569": {
			"sourceFileName": "src/reverse.ts",
			"qualifiedName": "reverse"
		},
		"2570": {
			"sourceFileName": "src/reverse.ts",
			"qualifiedName": "reverse"
		},
		"2571": {
			"sourceFileName": "src/reverse.ts",
			"qualifiedName": "T"
		},
		"2572": {
			"sourceFileName": "src/reverse.ts",
			"qualifiedName": "array"
		},
		"2573": {
			"sourceFileName": "src/reverse.ts",
			"qualifiedName": "reverse"
		},
		"2574": {
			"sourceFileName": "src/reverse.ts",
			"qualifiedName": "T"
		},
		"2575": {
			"sourceFileName": "src/reverse.ts",
			"qualifiedName": "__type"
		},
		"2576": {
			"sourceFileName": "src/reverse.ts",
			"qualifiedName": "__type"
		},
		"2577": {
			"sourceFileName": "src/reverse.ts",
			"qualifiedName": "array"
		},
		"2578": {
			"sourceFileName": "src/round.ts",
			"qualifiedName": "round"
		},
		"2579": {
			"sourceFileName": "src/round.ts",
			"qualifiedName": "round"
		},
		"2580": {
			"sourceFileName": "src/round.ts",
			"qualifiedName": "value"
		},
		"2581": {
			"sourceFileName": "src/round.ts",
			"qualifiedName": "precision"
		},
		"2582": {
			"sourceFileName": "src/round.ts",
			"qualifiedName": "round"
		},
		"2583": {
			"sourceFileName": "src/round.ts",
			"qualifiedName": "precision"
		},
		"2584": {
			"sourceFileName": "src/round.ts",
			"qualifiedName": "__type"
		},
		"2585": {
			"sourceFileName": "src/round.ts",
			"qualifiedName": "__type"
		},
		"2586": {
			"sourceFileName": "src/round.ts",
			"qualifiedName": "value"
		},
		"2587": {
			"sourceFileName": "src/sample.ts",
			"qualifiedName": "sample"
		},
		"2588": {
			"sourceFileName": "src/sample.ts",
			"qualifiedName": "sample"
		},
		"2589": {
			"sourceFileName": "src/sample.ts",
			"qualifiedName": "T"
		},
		"2590": {
			"sourceFileName": "src/sample.ts",
			"qualifiedName": "N"
		},
		"2591": {
			"sourceFileName": "src/sample.ts",
			"qualifiedName": "data"
		},
		"2592": {
			"sourceFileName": "src/sample.ts",
			"qualifiedName": "sampleSize"
		},
		"2593": {
			"sourceFileName": "src/sample.ts",
			"qualifiedName": "sample"
		},
		"2594": {
			"sourceFileName": "src/sample.ts",
			"qualifiedName": "T"
		},
		"2595": {
			"sourceFileName": "src/sample.ts",
			"qualifiedName": "N"
		},
		"2596": {
			"sourceFileName": "src/sample.ts",
			"qualifiedName": "sampleSize"
		},
		"2597": {
			"sourceFileName": "src/sample.ts",
			"qualifiedName": "__type"
		},
		"2598": {
			"sourceFileName": "src/sample.ts",
			"qualifiedName": "__type"
		},
		"2599": {
			"sourceFileName": "src/sample.ts",
			"qualifiedName": "data"
		},
		"2600": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "set"
		},
		"2601": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "set"
		},
		"2602": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "T"
		},
		"2603": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "K"
		},
		"2604": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "V"
		},
		"2605": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "obj"
		},
		"2606": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "prop"
		},
		"2607": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "value"
		},
		"2608": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "set"
		},
		"2609": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "T"
		},
		"2610": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "K"
		},
		"2611": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "V"
		},
		"2612": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "prop"
		},
		"2613": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "value"
		},
		"2614": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "__type"
		},
		"2615": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "__type"
		},
		"2616": {
			"sourceFileName": "src/set.ts",
			"qualifiedName": "obj"
		},
		"2617": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "setPath"
		},
		"2618": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "setPath"
		},
		"2619": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "T"
		},
		"2620": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "TPath"
		},
		"2621": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "data"
		},
		"2622": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "path"
		},
		"2623": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "value"
		},
		"2624": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "setPath"
		},
		"2625": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "T"
		},
		"2626": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "TPath"
		},
		"2627": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "Value"
		},
		"2628": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "path"
		},
		"2629": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "value"
		},
		"2630": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "__type"
		},
		"2631": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "__type"
		},
		"2632": {
			"sourceFileName": "src/set-path.ts",
			"qualifiedName": "data"
		},
		"2638": {
			"sourceFileName": "src/shuffle.ts",
			"qualifiedName": "shuffle"
		},
		"2639": {
			"sourceFileName": "src/shuffle.ts",
			"qualifiedName": "shuffle"
		},
		"2640": {
			"sourceFileName": "src/shuffle.ts",
			"qualifiedName": "T"
		},
		"2641": {
			"sourceFileName": "src/shuffle.ts",
			"qualifiedName": "items"
		},
		"2642": {
			"sourceFileName": "src/shuffle.ts",
			"qualifiedName": "shuffle"
		},
		"2643": {
			"sourceFileName": "src/shuffle.ts",
			"qualifiedName": "__type"
		},
		"2644": {
			"sourceFileName": "src/shuffle.ts",
			"qualifiedName": "__type"
		},
		"2645": {
			"sourceFileName": "src/shuffle.ts",
			"qualifiedName": "items"
		},
		"2646": {
			"sourceFileName": "src/shuffle.ts",
			"qualifiedName": "T"
		},
		"2647": {
			"sourceFileName": "src/sleep.ts",
			"qualifiedName": "sleep"
		},
		"2648": {
			"sourceFileName": "src/sleep.ts",
			"qualifiedName": "sleep"
		},
		"2649": {
			"sourceFileName": "src/sleep.ts",
			"qualifiedName": "timeout"
		},
		"2650": {
			"sourceFileName": "src/slice-string.ts",
			"qualifiedName": "sliceString"
		},
		"2651": {
			"sourceFileName": "src/slice-string.ts",
			"qualifiedName": "sliceString"
		},
		"2652": {
			"sourceFileName": "src/slice-string.ts",
			"qualifiedName": "data"
		},
		"2653": {
			"sourceFileName": "src/slice-string.ts",
			"qualifiedName": "indexStart"
		},
		"2654": {
			"sourceFileName": "src/slice-string.ts",
			"qualifiedName": "indexEnd"
		},
		"2655": {
			"sourceFileName": "src/slice-string.ts",
			"qualifiedName": "sliceString"
		},
		"2656": {
			"sourceFileName": "src/slice-string.ts",
			"qualifiedName": "indexStart"
		},
		"2657": {
			"sourceFileName": "src/slice-string.ts",
			"qualifiedName": "indexEnd"
		},
		"2658": {
			"sourceFileName": "src/slice-string.ts",
			"qualifiedName": "__type"
		},
		"2659": {
			"sourceFileName": "src/slice-string.ts",
			"qualifiedName": "__type"
		},
		"2660": {
			"sourceFileName": "src/slice-string.ts",
			"qualifiedName": "data"
		},
		"2661": {
			"sourceFileName": "src/slugify.ts",
			"qualifiedName": "slugify"
		},
		"2662": {
			"sourceFileName": "src/slugify.ts",
			"qualifiedName": "slugify"
		},
		"2663": {
			"sourceFileName": "src/slugify.ts",
			"qualifiedName": "str"
		},
		"2664": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "sort"
		},
		"2665": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "sort"
		},
		"2666": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "T"
		},
		"2667": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "items"
		},
		"2668": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "cmp"
		},
		"2669": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "__type"
		},
		"2670": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "__type"
		},
		"2671": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "a"
		},
		"2672": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "b"
		},
		"2673": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "sort"
		},
		"2674": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "T"
		},
		"2675": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "cmp"
		},
		"2676": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "__type"
		},
		"2677": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "__type"
		},
		"2678": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "a"
		},
		"2679": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "b"
		},
		"2680": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "__type"
		},
		"2681": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "__type"
		},
		"2682": {
			"sourceFileName": "src/sort.ts",
			"qualifiedName": "items"
		},
		"2683": {
			"sourceFileName": "src/sort-by.ts",
			"qualifiedName": "sortBy"
		},
		"2684": {
			"sourceFileName": "src/sort-by.ts",
			"qualifiedName": "sortBy"
		},
		"2685": {
			"sourceFileName": "src/sort-by.ts",
			"qualifiedName": "T"
		},
		"2686": {
			"sourceFileName": "src/sort-by.ts",
			"qualifiedName": "sortRules"
		},
		"2687": {
			"sourceFileName": "src/sort-by.ts",
			"qualifiedName": "__type"
		},
		"2688": {
			"sourceFileName": "src/sort-by.ts",
			"qualifiedName": "__type"
		},
		"2689": {
			"sourceFileName": "src/sort-by.ts",
			"qualifiedName": "array"
		},
		"2690": {
			"sourceFileName": "src/sort-by.ts",
			"qualifiedName": "sortBy"
		},
		"2691": {
			"sourceFileName": "src/sort-by.ts",
			"qualifiedName": "T"
		},
		"2692": {
			"sourceFileName": "src/sort-by.ts",
			"qualifiedName": "array"
		},
		"2693": {
			"sourceFileName": "src/sort-by.ts",
			"qualifiedName": "sortRules"
		},
		"2694": {
			"sourceFileName": "src/sorted-index.ts",
			"qualifiedName": "sortedIndex"
		},
		"2695": {
			"sourceFileName": "src/sorted-index.ts",
			"qualifiedName": "sortedIndex"
		},
		"2696": {
			"sourceFileName": "src/sorted-index.ts",
			"qualifiedName": "T"
		},
		"2697": {
			"sourceFileName": "src/sorted-index.ts",
			"qualifiedName": "data"
		},
		"2698": {
			"sourceFileName": "src/sorted-index.ts",
			"qualifiedName": "item"
		},
		"2699": {
			"sourceFileName": "src/sorted-index.ts",
			"qualifiedName": "sortedIndex"
		},
		"2700": {
			"sourceFileName": "src/sorted-index.ts",
			"qualifiedName": "T"
		},
		"2701": {
			"sourceFileName": "src/sorted-index.ts",
			"qualifiedName": "item"
		},
		"2702": {
			"sourceFileName": "src/sorted-index.ts",
			"qualifiedName": "__type"
		},
		"2703": {
			"sourceFileName": "src/sorted-index.ts",
			"qualifiedName": "__type"
		},
		"2704": {
			"sourceFileName": "src/sorted-index.ts",
			"qualifiedName": "data"
		},
		"2705": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "sortedIndexBy"
		},
		"2706": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "sortedIndexBy"
		},
		"2707": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "T"
		},
		"2708": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "data"
		},
		"2709": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "item"
		},
		"2710": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "valueFunction"
		},
		"2711": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "__type"
		},
		"2712": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "__type"
		},
		"2713": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "item"
		},
		"2714": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "index"
		},
		"2715": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "data"
		},
		"2716": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"2717": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "sortedIndexBy"
		},
		"2718": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "T"
		},
		"2719": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "item"
		},
		"2720": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "valueFunction"
		},
		"2721": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "__type"
		},
		"2722": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "__type"
		},
		"2723": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "item"
		},
		"2724": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "index"
		},
		"2725": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "data"
		},
		"2726": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"2727": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "__type"
		},
		"2728": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "__type"
		},
		"2729": {
			"sourceFileName": "src/sorted-index-by.ts",
			"qualifiedName": "data"
		},
		"2730": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "sortedIndexWith"
		},
		"2731": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "sortedIndexWith"
		},
		"2732": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "T"
		},
		"2733": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "data"
		},
		"2734": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "predicate"
		},
		"2735": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "__type"
		},
		"2736": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "__type"
		},
		"2737": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "value"
		},
		"2738": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "index"
		},
		"2739": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "data"
		},
		"2740": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "sortedIndexWith"
		},
		"2741": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "T"
		},
		"2742": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "predicate"
		},
		"2743": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "__type"
		},
		"2744": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "__type"
		},
		"2745": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "value"
		},
		"2746": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "index"
		},
		"2747": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "data"
		},
		"2748": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "__type"
		},
		"2749": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "__type"
		},
		"2750": {
			"sourceFileName": "src/sorted-index-with.ts",
			"qualifiedName": "data"
		},
		"2751": {
			"sourceFileName": "src/sorted-last-index.ts",
			"qualifiedName": "sortedLastIndex"
		},
		"2752": {
			"sourceFileName": "src/sorted-last-index.ts",
			"qualifiedName": "sortedLastIndex"
		},
		"2753": {
			"sourceFileName": "src/sorted-last-index.ts",
			"qualifiedName": "T"
		},
		"2754": {
			"sourceFileName": "src/sorted-last-index.ts",
			"qualifiedName": "data"
		},
		"2755": {
			"sourceFileName": "src/sorted-last-index.ts",
			"qualifiedName": "item"
		},
		"2756": {
			"sourceFileName": "src/sorted-last-index.ts",
			"qualifiedName": "sortedLastIndex"
		},
		"2757": {
			"sourceFileName": "src/sorted-last-index.ts",
			"qualifiedName": "T"
		},
		"2758": {
			"sourceFileName": "src/sorted-last-index.ts",
			"qualifiedName": "item"
		},
		"2759": {
			"sourceFileName": "src/sorted-last-index.ts",
			"qualifiedName": "__type"
		},
		"2760": {
			"sourceFileName": "src/sorted-last-index.ts",
			"qualifiedName": "__type"
		},
		"2761": {
			"sourceFileName": "src/sorted-last-index.ts",
			"qualifiedName": "data"
		},
		"2762": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "sortedLastIndexBy"
		},
		"2763": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "sortedLastIndexBy"
		},
		"2764": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "T"
		},
		"2765": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "data"
		},
		"2766": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "item"
		},
		"2767": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "valueFunction"
		},
		"2768": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "__type"
		},
		"2769": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "__type"
		},
		"2770": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "item"
		},
		"2771": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "index"
		},
		"2772": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "data"
		},
		"2773": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"2774": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "sortedLastIndexBy"
		},
		"2775": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "T"
		},
		"2776": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "item"
		},
		"2777": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "valueFunction"
		},
		"2778": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "__type"
		},
		"2779": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "__type"
		},
		"2780": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "item"
		},
		"2781": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "index"
		},
		"2782": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "data"
		},
		"2783": {
			"sourceFileName": "",
			"qualifiedName": "__type"
		},
		"2784": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "__type"
		},
		"2785": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "__type"
		},
		"2786": {
			"sourceFileName": "src/sorted-last-index-by.ts",
			"qualifiedName": "data"
		},
		"2787": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "splice"
		},
		"2788": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "splice"
		},
		"2789": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "T"
		},
		"2790": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "items"
		},
		"2791": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "start"
		},
		"2792": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "deleteCount"
		},
		"2793": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "replacement"
		},
		"2794": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "splice"
		},
		"2795": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "T"
		},
		"2796": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "start"
		},
		"2797": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "deleteCount"
		},
		"2798": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "replacement"
		},
		"2799": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "__type"
		},
		"2800": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "__type"
		},
		"2801": {
			"sourceFileName": "src/splice.ts",
			"qualifiedName": "items"
		},
		"2802": {
			"sourceFileName": "src/split.ts",
			"qualifiedName": "split"
		},
		"2803": {
			"sourceFileName": "src/split.ts",
			"qualifiedName": "split"
		},
		"2804": {
			"sourceFileName": "src/split.ts",
			"qualifiedName": "data"
		},
		"2805": {
			"sourceFileName": "src/split.ts",
			"qualifiedName": "separator"
		},
		"2806": {
			"sourceFileName": "src/split.ts",
			"qualifiedName": "limit"
		},
		"2814": {
			"sourceFileName": "src/split.ts",
			"qualifiedName": "split"
		},
		"2815": {
			"sourceFileName": "src/split.ts",
			"qualifiedName": "separator"
		},
		"2816": {
			"sourceFileName": "src/split.ts",
			"qualifiedName": "limit"
		},
		"2817": {
			"sourceFileName": "src/split.ts",
			"qualifiedName": "__type"
		},
		"2818": {
			"sourceFileName": "src/split.ts",
			"qualifiedName": "__type"
		},
		"2819": {
			"sourceFileName": "src/split.ts",
			"qualifiedName": "data"
		},
		"2829": {
			"sourceFileName": "src/split-at.ts",
			"qualifiedName": "splitAt"
		},
		"2830": {
			"sourceFileName": "src/split-at.ts",
			"qualifiedName": "splitAt"
		},
		"2831": {
			"sourceFileName": "src/split-at.ts",
			"qualifiedName": "T"
		},
		"2832": {
			"sourceFileName": "src/split-at.ts",
			"qualifiedName": "array"
		},
		"2833": {
			"sourceFileName": "src/split-at.ts",
			"qualifiedName": "index"
		},
		"2834": {
			"sourceFileName": "src/split-at.ts",
			"qualifiedName": "splitAt"
		},
		"2835": {
			"sourceFileName": "src/split-at.ts",
			"qualifiedName": "T"
		},
		"2836": {
			"sourceFileName": "src/split-at.ts",
			"qualifiedName": "index"
		},
		"2837": {
			"sourceFileName": "src/split-at.ts",
			"qualifiedName": "__type"
		},
		"2838": {
			"sourceFileName": "src/split-at.ts",
			"qualifiedName": "__type"
		},
		"2839": {
			"sourceFileName": "src/split-at.ts",
			"qualifiedName": "array"
		},
		"2840": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "splitWhen"
		},
		"2841": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "splitWhen"
		},
		"2842": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "T"
		},
		"2843": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "data"
		},
		"2844": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "predicate"
		},
		"2845": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "__type"
		},
		"2846": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "__type"
		},
		"2847": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "item"
		},
		"2848": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "index"
		},
		"2849": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "data"
		},
		"2850": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "splitWhen"
		},
		"2851": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "T"
		},
		"2852": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "predicate"
		},
		"2853": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "__type"
		},
		"2854": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "__type"
		},
		"2855": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "item"
		},
		"2856": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "index"
		},
		"2857": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "data"
		},
		"2858": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "__type"
		},
		"2859": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "__type"
		},
		"2860": {
			"sourceFileName": "src/split-when.ts",
			"qualifiedName": "array"
		},
		"2861": {
			"sourceFileName": "src/string-to-path.ts",
			"qualifiedName": "stringToPath"
		},
		"2862": {
			"sourceFileName": "src/string-to-path.ts",
			"qualifiedName": "stringToPath"
		},
		"2863": {
			"sourceFileName": "src/string-to-path.ts",
			"qualifiedName": "Path"
		},
		"2864": {
			"sourceFileName": "src/string-to-path.ts",
			"qualifiedName": "path"
		},
		"2865": {
			"sourceFileName": "src/subtract.ts",
			"qualifiedName": "subtract"
		},
		"2866": {
			"sourceFileName": "src/subtract.ts",
			"qualifiedName": "subtract"
		},
		"2867": {
			"sourceFileName": "src/subtract.ts",
			"qualifiedName": "value"
		},
		"2868": {
			"sourceFileName": "src/subtract.ts",
			"qualifiedName": "subtrahend"
		},
		"2872": {
			"sourceFileName": "src/subtract.ts",
			"qualifiedName": "subtract"
		},
		"2873": {
			"sourceFileName": "src/subtract.ts",
			"qualifiedName": "subtrahend"
		},
		"2874": {
			"sourceFileName": "src/subtract.ts",
			"qualifiedName": "__type"
		},
		"2875": {
			"sourceFileName": "src/subtract.ts",
			"qualifiedName": "__type"
		},
		"2876": {
			"sourceFileName": "src/subtract.ts",
			"qualifiedName": "value"
		},
		"2882": {
			"sourceFileName": "src/sum.ts",
			"qualifiedName": "sum"
		},
		"2883": {
			"sourceFileName": "src/sum.ts",
			"qualifiedName": "sum"
		},
		"2884": {
			"sourceFileName": "src/sum.ts",
			"qualifiedName": "T"
		},
		"2885": {
			"sourceFileName": "src/sum.ts",
			"qualifiedName": "data"
		},
		"2886": {
			"sourceFileName": "src/sum.ts",
			"qualifiedName": "sum"
		},
		"2887": {
			"sourceFileName": "src/sum.ts",
			"qualifiedName": "__type"
		},
		"2888": {
			"sourceFileName": "src/sum.ts",
			"qualifiedName": "__type"
		},
		"2889": {
			"sourceFileName": "src/sum.ts",
			"qualifiedName": "data"
		},
		"2890": {
			"sourceFileName": "src/sum.ts",
			"qualifiedName": "T"
		},
		"2891": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "sumBy"
		},
		"2892": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "sumBy"
		},
		"2893": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "T"
		},
		"2894": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "callbackfn"
		},
		"2895": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "__type"
		},
		"2896": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "__type"
		},
		"2897": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "value"
		},
		"2898": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "index"
		},
		"2899": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "data"
		},
		"2900": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "__type"
		},
		"2901": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "__type"
		},
		"2902": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "items"
		},
		"2903": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "sumBy"
		},
		"2904": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "T"
		},
		"2905": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "data"
		},
		"2906": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "callbackfn"
		},
		"2907": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "__type"
		},
		"2908": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "__type"
		},
		"2909": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "value"
		},
		"2910": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "index"
		},
		"2911": {
			"sourceFileName": "src/sum-by.ts",
			"qualifiedName": "data"
		},
		"2912": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "swapIndices"
		},
		"2913": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "swapIndices"
		},
		"2914": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "T"
		},
		"2915": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "K1"
		},
		"2916": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "K2"
		},
		"2917": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "data"
		},
		"2918": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "index1"
		},
		"2919": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "index2"
		},
		"2920": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "swapIndices"
		},
		"2921": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "K1"
		},
		"2922": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "K2"
		},
		"2923": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "index1"
		},
		"2924": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "index2"
		},
		"2925": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "__type"
		},
		"2926": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "__type"
		},
		"2927": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "data"
		},
		"2928": {
			"sourceFileName": "src/swap-indices.ts",
			"qualifiedName": "T"
		},
		"2929": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "swapProps"
		},
		"2930": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "swapProps"
		},
		"2931": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "T"
		},
		"2932": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "K1"
		},
		"2933": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "K2"
		},
		"2934": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "data"
		},
		"2935": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "key1"
		},
		"2936": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "key2"
		},
		"2937": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "swapProps"
		},
		"2938": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "T"
		},
		"2939": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "K1"
		},
		"2940": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "K2"
		},
		"2941": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "key1"
		},
		"2942": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "key2"
		},
		"2943": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "__type"
		},
		"2944": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "__type"
		},
		"2945": {
			"sourceFileName": "src/swap-props.ts",
			"qualifiedName": "data"
		},
		"2946": {
			"sourceFileName": "src/take.ts",
			"qualifiedName": "take"
		},
		"2947": {
			"sourceFileName": "src/take.ts",
			"qualifiedName": "take"
		},
		"2948": {
			"sourceFileName": "src/take.ts",
			"qualifiedName": "T"
		},
		"2949": {
			"sourceFileName": "src/take.ts",
			"qualifiedName": "array"
		},
		"2950": {
			"sourceFileName": "src/take.ts",
			"qualifiedName": "n"
		},
		"2951": {
			"sourceFileName": "src/take.ts",
			"qualifiedName": "take"
		},
		"2952": {
			"sourceFileName": "src/take.ts",
			"qualifiedName": "n"
		},
		"2953": {
			"sourceFileName": "src/take.ts",
			"qualifiedName": "__type"
		},
		"2954": {
			"sourceFileName": "src/take.ts",
			"qualifiedName": "__type"
		},
		"2955": {
			"sourceFileName": "src/take.ts",
			"qualifiedName": "array"
		},
		"2956": {
			"sourceFileName": "src/take.ts",
			"qualifiedName": "T"
		},
		"2957": {
			"sourceFileName": "src/take-first-by.ts",
			"qualifiedName": "takeFirstBy"
		},
		"2958": {
			"sourceFileName": "src/take-first-by.ts",
			"qualifiedName": "takeFirstBy"
		},
		"2959": {
			"sourceFileName": "src/take-first-by.ts",
			"qualifiedName": "T"
		},
		"2960": {
			"sourceFileName": "src/take-first-by.ts",
			"qualifiedName": "data"
		},
		"2961": {
			"sourceFileName": "src/take-first-by.ts",
			"qualifiedName": "n"
		},
		"2962": {
			"sourceFileName": "src/take-first-by.ts",
			"qualifiedName": "rules"
		},
		"2963": {
			"sourceFileName": "src/take-first-by.ts",
			"qualifiedName": "takeFirstBy"
		},
		"2964": {
			"sourceFileName": "src/take-first-by.ts",
			"qualifiedName": "T"
		},
		"2965": {
			"sourceFileName": "src/take-first-by.ts",
			"qualifiedName": "n"
		},
		"2966": {
			"sourceFileName": "src/take-first-by.ts",
			"qualifiedName": "rules"
		},
		"2967": {
			"sourceFileName": "src/take-first-by.ts",
			"qualifiedName": "__type"
		},
		"2968": {
			"sourceFileName": "src/take-first-by.ts",
			"qualifiedName": "__type"
		},
		"2969": {
			"sourceFileName": "src/take-first-by.ts",
			"qualifiedName": "data"
		},
		"2970": {
			"sourceFileName": "src/take-last.ts",
			"qualifiedName": "takeLast"
		},
		"2971": {
			"sourceFileName": "src/take-last.ts",
			"qualifiedName": "takeLast"
		},
		"2972": {
			"sourceFileName": "src/take-last.ts",
			"qualifiedName": "T"
		},
		"2973": {
			"sourceFileName": "src/take-last.ts",
			"qualifiedName": "array"
		},
		"2974": {
			"sourceFileName": "src/take-last.ts",
			"qualifiedName": "n"
		},
		"2975": {
			"sourceFileName": "src/take-last.ts",
			"qualifiedName": "takeLast"
		},
		"2976": {
			"sourceFileName": "src/take-last.ts",
			"qualifiedName": "T"
		},
		"2977": {
			"sourceFileName": "src/take-last.ts",
			"qualifiedName": "n"
		},
		"2978": {
			"sourceFileName": "src/take-last.ts",
			"qualifiedName": "__type"
		},
		"2979": {
			"sourceFileName": "src/take-last.ts",
			"qualifiedName": "__type"
		},
		"2980": {
			"sourceFileName": "src/take-last.ts",
			"qualifiedName": "array"
		},
		"2981": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "takeLastWhile"
		},
		"2982": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "takeLastWhile"
		},
		"2983": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "T"
		},
		"2984": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "data"
		},
		"2985": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "predicate"
		},
		"2986": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "__type"
		},
		"2987": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "__type"
		},
		"2988": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "item"
		},
		"2989": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "index"
		},
		"2990": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "data"
		},
		"2991": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "takeLastWhile"
		},
		"2992": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "T"
		},
		"2993": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "predicate"
		},
		"2994": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "__type"
		},
		"2995": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "__type"
		},
		"2996": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "item"
		},
		"2997": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "index"
		},
		"2998": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "data"
		},
		"2999": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "__type"
		},
		"3000": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "__type"
		},
		"3001": {
			"sourceFileName": "src/take-last-while.ts",
			"qualifiedName": "data"
		},
		"3002": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "takeWhile"
		},
		"3003": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "takeWhile"
		},
		"3004": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "T"
		},
		"3005": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "data"
		},
		"3006": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "predicate"
		},
		"3007": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "__type"
		},
		"3008": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "__type"
		},
		"3009": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "item"
		},
		"3010": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "index"
		},
		"3011": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "data"
		},
		"3012": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "takeWhile"
		},
		"3013": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "T"
		},
		"3014": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "predicate"
		},
		"3015": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "__type"
		},
		"3016": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "__type"
		},
		"3017": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "item"
		},
		"3018": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "index"
		},
		"3019": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "data"
		},
		"3020": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "__type"
		},
		"3021": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "__type"
		},
		"3022": {
			"sourceFileName": "src/take-while.ts",
			"qualifiedName": "array"
		},
		"3023": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "tap"
		},
		"3024": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "tap"
		},
		"3025": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "T"
		},
		"3026": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "value"
		},
		"3027": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "fn"
		},
		"3028": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "__type"
		},
		"3029": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "__type"
		},
		"3030": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "value"
		},
		"3031": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "tap"
		},
		"3032": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "T"
		},
		"3033": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "F"
		},
		"3034": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "__type"
		},
		"3035": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "__type"
		},
		"3036": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "value"
		},
		"3037": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "fn"
		},
		"3038": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "__type"
		},
		"3039": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "__type"
		},
		"3040": {
			"sourceFileName": "src/tap.ts",
			"qualifiedName": "value"
		},
		"3041": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "times"
		},
		"3042": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "times"
		},
		"3043": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "T"
		},
		"3044": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "N"
		},
		"3045": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "count"
		},
		"3046": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "fn"
		},
		"3047": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "__type"
		},
		"3048": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "__type"
		},
		"3049": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "index"
		},
		"3050": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "times"
		},
		"3051": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "T"
		},
		"3052": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "fn"
		},
		"3053": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "__type"
		},
		"3054": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "__type"
		},
		"3055": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "index"
		},
		"3056": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "__type"
		},
		"3057": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "__type"
		},
		"3058": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "count"
		},
		"3059": {
			"sourceFileName": "src/times.ts",
			"qualifiedName": "N"
		},
		"3060": {
			"sourceFileName": "src/to-camel-case.ts",
			"qualifiedName": "toCamelCase"
		},
		"3061": {
			"sourceFileName": "src/to-camel-case.ts",
			"qualifiedName": "toCamelCase"
		},
		"3062": {
			"sourceFileName": "src/to-camel-case.ts",
			"qualifiedName": "input"
		},
		"3063": {
			"sourceFileName": "src/to-camel-case.ts",
			"qualifiedName": "options"
		},
		"3064": {
			"sourceFileName": "src/to-capital-case.ts",
			"qualifiedName": "toCapitalCase"
		},
		"3065": {
			"sourceFileName": "src/to-capital-case.ts",
			"qualifiedName": "toCapitalCase"
		},
		"3066": {
			"sourceFileName": "src/to-capital-case.ts",
			"qualifiedName": "input"
		},
		"3067": {
			"sourceFileName": "src/to-capital-case.ts",
			"qualifiedName": "options"
		},
		"3068": {
			"sourceFileName": "src/to-constant-case.ts",
			"qualifiedName": "toConstantCase"
		},
		"3069": {
			"sourceFileName": "src/to-constant-case.ts",
			"qualifiedName": "toConstantCase"
		},
		"3070": {
			"sourceFileName": "src/to-constant-case.ts",
			"qualifiedName": "input"
		},
		"3071": {
			"sourceFileName": "src/to-constant-case.ts",
			"qualifiedName": "options"
		},
		"3072": {
			"sourceFileName": "src/to-kebab-case.ts",
			"qualifiedName": "toKebabCase"
		},
		"3073": {
			"sourceFileName": "src/to-kebab-case.ts",
			"qualifiedName": "toKebabCase"
		},
		"3074": {
			"sourceFileName": "src/to-kebab-case.ts",
			"qualifiedName": "input"
		},
		"3075": {
			"sourceFileName": "src/to-kebab-case.ts",
			"qualifiedName": "options"
		},
		"3076": {
			"sourceFileName": "src/to-no-case.ts",
			"qualifiedName": "toNoCase"
		},
		"3077": {
			"sourceFileName": "src/to-no-case.ts",
			"qualifiedName": "toNoCase"
		},
		"3078": {
			"sourceFileName": "src/to-no-case.ts",
			"qualifiedName": "input"
		},
		"3079": {
			"sourceFileName": "src/to-no-case.ts",
			"qualifiedName": "options"
		},
		"3080": {
			"sourceFileName": "src/to-pascal-case.ts",
			"qualifiedName": "toPascalCase"
		},
		"3081": {
			"sourceFileName": "src/to-pascal-case.ts",
			"qualifiedName": "toPascalCase"
		},
		"3082": {
			"sourceFileName": "src/to-pascal-case.ts",
			"qualifiedName": "input"
		},
		"3083": {
			"sourceFileName": "src/to-pascal-case.ts",
			"qualifiedName": "options"
		},
		"3084": {
			"sourceFileName": "src/to-pascal-snake-case.ts",
			"qualifiedName": "toPascalSnakeCase"
		},
		"3085": {
			"sourceFileName": "src/to-pascal-snake-case.ts",
			"qualifiedName": "toPascalSnakeCase"
		},
		"3086": {
			"sourceFileName": "src/to-pascal-snake-case.ts",
			"qualifiedName": "input"
		},
		"3087": {
			"sourceFileName": "src/to-pascal-snake-case.ts",
			"qualifiedName": "options"
		},
		"3088": {
			"sourceFileName": "src/to-sentence-case.ts",
			"qualifiedName": "toSentenceCase"
		},
		"3089": {
			"sourceFileName": "src/to-sentence-case.ts",
			"qualifiedName": "toSentenceCase"
		},
		"3090": {
			"sourceFileName": "src/to-sentence-case.ts",
			"qualifiedName": "input"
		},
		"3091": {
			"sourceFileName": "src/to-sentence-case.ts",
			"qualifiedName": "options"
		},
		"3092": {
			"sourceFileName": "src/to-snake-case.ts",
			"qualifiedName": "toSnakeCase"
		},
		"3093": {
			"sourceFileName": "src/to-snake-case.ts",
			"qualifiedName": "toSnakeCase"
		},
		"3094": {
			"sourceFileName": "src/to-snake-case.ts",
			"qualifiedName": "input"
		},
		"3095": {
			"sourceFileName": "src/to-snake-case.ts",
			"qualifiedName": "options"
		},
		"3096": {
			"sourceFileName": "src/to-train-case.ts",
			"qualifiedName": "toTrainCase"
		},
		"3097": {
			"sourceFileName": "src/to-train-case.ts",
			"qualifiedName": "toTrainCase"
		},
		"3098": {
			"sourceFileName": "src/to-train-case.ts",
			"qualifiedName": "input"
		},
		"3099": {
			"sourceFileName": "src/to-train-case.ts",
			"qualifiedName": "options"
		},
		"3100": {
			"sourceFileName": "src/unique.ts",
			"qualifiedName": "unique"
		},
		"3101": {
			"sourceFileName": "src/unique.ts",
			"qualifiedName": "unique"
		},
		"3102": {
			"sourceFileName": "src/unique.ts",
			"qualifiedName": "T"
		},
		"3103": {
			"sourceFileName": "src/unique.ts",
			"qualifiedName": "data"
		},
		"3104": {
			"sourceFileName": "src/unique.ts",
			"qualifiedName": "unique"
		},
		"3105": {
			"sourceFileName": "src/unique.ts",
			"qualifiedName": "__type"
		},
		"3106": {
			"sourceFileName": "src/unique.ts",
			"qualifiedName": "__type"
		},
		"3107": {
			"sourceFileName": "src/unique.ts",
			"qualifiedName": "data"
		},
		"3108": {
			"sourceFileName": "src/unique.ts",
			"qualifiedName": "T"
		},
		"3109": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "uniqueBy"
		},
		"3110": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "uniqueBy"
		},
		"3111": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "T"
		},
		"3112": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "K"
		},
		"3113": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "data"
		},
		"3114": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "keyFunction"
		},
		"3115": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "__type"
		},
		"3116": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "__type"
		},
		"3117": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "item"
		},
		"3118": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "index"
		},
		"3119": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "data"
		},
		"3120": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "uniqueBy"
		},
		"3121": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "T"
		},
		"3122": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "K"
		},
		"3123": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "keyFunction"
		},
		"3124": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "__type"
		},
		"3125": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "__type"
		},
		"3126": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "item"
		},
		"3127": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "index"
		},
		"3128": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "data"
		},
		"3129": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "__type"
		},
		"3130": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "__type"
		},
		"3131": {
			"sourceFileName": "src/unique-by.ts",
			"qualifiedName": "data"
		},
		"3132": {
			"sourceFileName": "src/unique-with.ts",
			"qualifiedName": "uniqueWith"
		},
		"3133": {
			"sourceFileName": "src/unique-with.ts",
			"qualifiedName": "uniqueWith"
		},
		"3134": {
			"sourceFileName": "src/unique-with.ts",
			"qualifiedName": "T"
		},
		"3135": {
			"sourceFileName": "src/unique-with.ts",
			"qualifiedName": "data"
		},
		"3136": {
			"sourceFileName": "src/unique-with.ts",
			"qualifiedName": "isEquals"
		},
		"3137": {
			"sourceFileName": "src/unique-with.ts",
			"qualifiedName": "uniqueWith"
		},
		"3138": {
			"sourceFileName": "src/unique-with.ts",
			"qualifiedName": "T"
		},
		"3139": {
			"sourceFileName": "src/unique-with.ts",
			"qualifiedName": "isEquals"
		},
		"3140": {
			"sourceFileName": "src/unique-with.ts",
			"qualifiedName": "__type"
		},
		"3141": {
			"sourceFileName": "src/unique-with.ts",
			"qualifiedName": "__type"
		},
		"3142": {
			"sourceFileName": "src/unique-with.ts",
			"qualifiedName": "data"
		},
		"3143": {
			"sourceFileName": "src/values.ts",
			"qualifiedName": "values"
		},
		"3144": {
			"sourceFileName": "src/values.ts",
			"qualifiedName": "values"
		},
		"3145": {
			"sourceFileName": "src/values.ts",
			"qualifiedName": "T"
		},
		"3146": {
			"sourceFileName": "src/values.ts",
			"qualifiedName": "data"
		},
		"3147": {
			"sourceFileName": "src/values.ts",
			"qualifiedName": "values"
		},
		"3148": {
			"sourceFileName": "src/values.ts",
			"qualifiedName": "__type"
		},
		"3149": {
			"sourceFileName": "src/values.ts",
			"qualifiedName": "__type"
		},
		"3150": {
			"sourceFileName": "src/values.ts",
			"qualifiedName": "data"
		},
		"3151": {
			"sourceFileName": "src/values.ts",
			"qualifiedName": "T"
		},
		"3152": {
			"sourceFileName": "src/zip.ts",
			"qualifiedName": "zip"
		},
		"3153": {
			"sourceFileName": "src/zip.ts",
			"qualifiedName": "zip"
		},
		"3154": {
			"sourceFileName": "src/zip.ts",
			"qualifiedName": "F"
		},
		"3155": {
			"sourceFileName": "src/zip.ts",
			"qualifiedName": "S"
		},
		"3156": {
			"sourceFileName": "src/zip.ts",
			"qualifiedName": "first"
		},
		"3157": {
			"sourceFileName": "src/zip.ts",
			"qualifiedName": "second"
		},
		"3158": {
			"sourceFileName": "src/zip.ts",
			"qualifiedName": "zip"
		},
		"3159": {
			"sourceFileName": "src/zip.ts",
			"qualifiedName": "S"
		},
		"3160": {
			"sourceFileName": "src/zip.ts",
			"qualifiedName": "second"
		},
		"3161": {
			"sourceFileName": "src/zip.ts",
			"qualifiedName": "__type"
		},
		"3162": {
			"sourceFileName": "src/zip.ts",
			"qualifiedName": "__type"
		},
		"3163": {
			"sourceFileName": "src/zip.ts",
			"qualifiedName": "first"
		},
		"3164": {
			"sourceFileName": "src/zip.ts",
			"qualifiedName": "F"
		},
		"3165": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "zipWith"
		},
		"3166": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "zipWith"
		},
		"3167": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "TItem1"
		},
		"3168": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "TItem2"
		},
		"3169": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "Value"
		},
		"3170": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "fn"
		},
		"3171": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "__type"
		},
		"3172": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "__type"
		},
		"3173": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "first"
		},
		"3174": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "second"
		},
		"3175": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "T1"
		},
		"3176": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "T2"
		},
		"3177": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "zipWith"
		},
		"3178": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "T1"
		},
		"3179": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "T2"
		},
		"3180": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "Value"
		},
		"3181": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "second"
		},
		"3182": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "fn"
		},
		"3183": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "__type"
		},
		"3184": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "__type"
		},
		"3185": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "first"
		},
		"3186": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "zipWith"
		},
		"3187": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "T1"
		},
		"3188": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "T2"
		},
		"3189": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "Value"
		},
		"3190": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "first"
		},
		"3191": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "second"
		},
		"3192": {
			"sourceFileName": "src/zip-with.ts",
			"qualifiedName": "fn"
		}
	},
	"files": {
		"entries": {
			"1": "src/index.ts"
		},
		"reflections": {
			"1": 0
		}
	}
}
